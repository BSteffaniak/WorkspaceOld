package net.foxycorndog.jdooal.audio;

import static org.lwjgl.openal.AL10.AL_BUFFER;
import static org.lwjgl.openal.AL10.AL_GAIN;
import static org.lwjgl.openal.AL10.AL_POSITION;
import static org.lwjgl.openal.AL10.AL_VELOCITY;
import static org.lwjgl.openal.AL10.alBufferData;
import static org.lwjgl.openal.AL10.alGenBuffers;
import static org.lwjgl.openal.AL10.alGenSources;
import static org.lwjgl.openal.AL10.alSource3f;
import static org.lwjgl.openal.AL10.alSourcePlay;
import static org.lwjgl.openal.AL10.alSourceStop;
import static org.lwjgl.openal.AL10.alSourcef;
import static org.lwjgl.openal.AL10.alSourcei;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.nio.FloatBuffer;
import java.util.ArrayList;
import java.util.HashMap;

import org.lwjgl.BufferUtils;
import org.lwjgl.LWJGLException;
import org.lwjgl.openal.AL10;
import org.lwjgl.openal.AL11;
import org.lwjgl.util.WaveData;

public class AL
{
	private static float masterVolume;
	
	private static HashMap<Integer, WaveData> audio;
	private static HashMap<Integer, Integer>  buffers;
	private static HashMap<Integer, Float>    volumes;
	
	private static ArrayList<Integer> ids;
	
	static
	{
		masterVolume = 1f;
		
		audio        = new HashMap<Integer, WaveData>();
		buffers      = new HashMap<Integer, Integer>();
		volumes      = new HashMap<Integer, Float>();
		
		ids          = new ArrayList<Integer>();
		
		try
		{
			org.lwjgl.openal.AL.create();
		}
		catch (LWJGLException e)
		{
			e.printStackTrace();
		}
		
		Runtime.getRuntime().addShutdownHook(new Thread()
		{
			public void run()
			{
				for (int i = 0; i < ids.size(); i ++)
				{
					AL10.alDeleteBuffers(buffers.get(ids.get(i)));
					AL10.alDeleteSources(ids.get(i));
				}
				
				audio   = null;
				buffers = null;
				volumes = null;
				
				org.lwjgl.openal.AL.destroy();
			}
		});
	}
	
//	public AL()
//	{
//		audio = new ArrayList<WaveData>();
//	}
	
	public static int genSound(String location)
	{
		WaveData sound = null;
		
		try
		{
			sound = WaveData.create(new BufferedInputStream(new FileInputStream(location)));
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		}
		
		int id = alGenBuffers();
		
		alBufferData(id, sound.format, sound.data, sound.samplerate);
		
		//alDeleteBuffers(id);
		
		int source = alGenSources();
		
		alSourcei (source, AL_BUFFER, id);
		alSource3f(source, AL_POSITION, 0, 0, 0);
		alSource3f(source, AL_VELOCITY, 0, 0, 0);
		alSourcef (source, AL_GAIN, masterVolume);
		//alDeleteSources(source);
		
		audio.put(source, sound);
		buffers.put(source, id);
		volumes.put(source, masterVolume);
		
		ids.add(source);
		
		return source;
	}
	
	public static int copy(int id)
	{
		int old = buffers.get(id);
		
		WaveData sound = audio.get(id);
		
		alBufferData(old, sound.format, sound.data, sound.samplerate);
		
		float oldVolume = volumes.get(id);
		
		int copy = alGenSources();
		
		alSourcei (copy, AL_BUFFER, old);
		alSource3f(copy, AL_POSITION, 0, 0, 0);
		alSource3f(copy, AL_VELOCITY, 0, 0, 0);
		alSourcef (copy, AL_GAIN, oldVolume);
		
		audio.put(copy, sound);
		buffers.put(copy, old);
		volumes.put(copy, oldVolume);
		
		ids.add(copy);
		
		return copy;
	}
	
	public static boolean isPlaying(int source)
	{
		return AL10.alGetSourcei(source, AL10.AL_SOURCE_STATE) == AL10.AL_PLAYING;
	}
	
	public static boolean isStopped(int source)
	{
		return AL10.alGetSourcei(source, AL10.AL_SOURCE_STATE) == AL10.AL_STOPPED;
	}
	
	public static boolean isPaused(int source)
	{
		return AL10.alGetSourcei(source, AL10.AL_SOURCE_STATE) == AL10.AL_PAUSED;
	}
	
	public static boolean isInitial(int source)
	{
		return AL10.alGetSourcei(source, AL10.AL_SOURCE_STATE) == AL10.AL_INITIAL;
	}
	
	public static void loop(int source, int times)
	{
		for (int i = 0; i < times; i ++)
		{
			alSourcePlay(source);
		}
	}
	
	public static float getMasterVolume()
	{
		return masterVolume;
	}
	
	public static void setMasterVolume(float volume)
	{
		volume = volume < 0 ? 0 : volume;
		volume = volume > 1 ? 1 : volume;
		
		float dif = 0;
		
		if (masterVolume != 0)
		{
			dif = volume / masterVolume;
		}
		else
		{
			dif = volume;
		}
		
		for (int i = 0; i < ids.size(); i ++)
		{
			int id = ids.get(i);
			
			if (volumes.get(id) == 0)
			{
				volumes.put(id, dif);
			}
			else
			{
				volumes.put(id, volumes.get(id) * dif);
			}
			
			AL10.alSourcef(ids.get(i), AL_GAIN, volumes.get(id));
		}
		
		masterVolume = volume;
	}
	
	public static void setVolume(int soundId, float volume)
	{
		volume = volume < 0 ? 0 : volume;
		volume = volume > 1 ? 1 : volume;
		
		volume = (volume / 1) * masterVolume;
		
		AL10.alSourcef(soundId, AL_GAIN, volume);
		
		
	}
	
	public static float getVolume(int soundId)
	{
		return AL10.alGetSourcef(soundId, AL_GAIN) * (1 / masterVolume);
	}
	
	public static void play(int source)
	{
		alSourcePlay(source);
	}
	
	public static void stop(int source)
	{
		alSourceStop(source);
	}
	
	public static void pause(int source)
	{
		AL10.alSourcePause(source);
	}
}