package net.foxycorndog.jdoogl.activity;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.app.Activity;
import android.opengl.GLSurfaceView;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.Window;
import net.foxycorndog.jdoogl.components.Frame;
import net.foxycorndog.jdoogl.components.Frame.GameRenderer;
import net.foxycorndog.jdoogl.input.KeyboardInput;
import net.foxycorndog.jdoogl.input.TouchInput;

public abstract class AdvancedActivity extends Activity
{
	private GLSurfaceView    mGLView;
	
	private AdvancedActivity activity;
	
	private GameRenderer     gameRenderer;
	
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		
		activity = this;
		
		gameRenderer = new GameRenderer()
		{
			public void render(GL10 gl)
			{
				activity.render(gl);
			}
			
			public void loop(GL10 gl)
			{
				activity.loop();
			}
			
			public void onSurfaceChanged(GL10 gl)
			{
				activity.onSurfaceChanged(gl);
			}

			public void onSurfaceCreated(GL10 gl, EGLConfig config)
			{
				activity.onSurfaceCreated(gl, config);
			}
		};
		
		mGLView = new GLSurfaceView(this);
        mGLView.setRenderer(gameRenderer);
		mGLView.setOnTouchListener(TouchInput.getTouchListener());
		mGLView.setOnClickListener(TouchInput.getClickListener());
		
        this.requestWindowFeature(Window.FEATURE_NO_TITLE);
        
        setContentView(mGLView);
	}
	
	public final boolean onKeyDown(int keyCode, KeyEvent keyEvent)
	{
		KeyboardInput.onKeyDown(keyCode, keyEvent);
		
		return false;
	}

	public final boolean onKeyLongPress(int keyCode, KeyEvent keyEvent)
	{
		KeyboardInput.onKeyLongPress(keyCode, keyEvent);
		
		return false;
	}

	public final boolean onKeyMultiple(int keyCode, int count, KeyEvent keyEvent)
	{
		KeyboardInput.onKeyMultiple(keyCode, count, keyEvent);
		
		return false;
	}

	public final boolean onKeyUp(int keyCode, KeyEvent keyEvent)
	{
		KeyboardInput.onKeyUp(keyCode, keyEvent);
		
		return false;
	}
	
	public GameRenderer getGameRenderer()
	{
		return gameRenderer;
	}
	
	public abstract void render(GL10 gl);
	
	public abstract void loop();
	
	public abstract void onSurfaceChanged(GL10 gl);
	
	public abstract void onSurfaceCreated(GL10 gl, EGLConfig config);
}