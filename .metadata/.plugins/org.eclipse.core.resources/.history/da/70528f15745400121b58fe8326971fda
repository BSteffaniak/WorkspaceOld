package net.foxycorndog.arrowide.file;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;

import net.foxycorndog.arrowide.language.Keyword;

public class FileUtils
{
	private static final String GLSL_VERTEX_ENDINGS[], GLSL_FRAGMENT_ENDINGS[], JAVA_ENDINGS[];
	
	public  static final int JAVA = 1, CLASS = 2, GLSL = 3, TXT = 4, RTF = 5, EXE = 6;
	
	static
	{
		GLSL_VERTEX_ENDINGS = new String[] { "vs", "vert" };
		GLSL_FRAGMENT_ENDINGS = new String[] { "fs", "frag", "shade", "shad", "sha" };
		
		JAVA_ENDINGS = new String[] { "java" };
	}
	
	public static int getLanguage(String name)
	{
		String ending = name.substring(name.lastIndexOf('.') + 1).toLowerCase();
		
		int language  = 0;
		
		if (contains(ending, GLSL_VERTEX_ENDINGS) || contains(ending, GLSL_FRAGMENT_ENDINGS))
		{
			language = GLSL;
		}
		else if (contains(ending, JAVA_ENDINGS))
		{
			language = JAVA;
		}
		
		return language;
	}
	
	public static boolean contains(String str, String endings[])
	{
		for (String ending : endings)
		{
			if (str.equals(ending))
			{
				return true;
			}
		}
		
		return false;
	}
	
	public static boolean delete(File file)
	{
		if (file.isDirectory())
		{
			File subFiles[] = file.listFiles();
			
			for (int i = 0; i < subFiles.length; i ++)
			{
				delete(subFiles[i]);
			}
		}
		
		return file.delete();
	}
	
	public static boolean isFileName(String location)
	{
		location = removeEndingSlashes(location);
		
		for (int i = location.length() - 1; i >= 0 && location.charAt(i) != '/'; i --)
		{
			if (location.charAt(i) == '.')
			{
				return true;
			}
		}
		
		return false;
	}
	
	public static String getParentFolder(String location)
	{
		location = removeEndingSlashes(location);
		
		int index = location.length() - 1;
		
		while (index >= 0)
		{
			if (location.charAt(index) == '/')
			{
				index--;
				
				break;
			}
			else
			{
				index--;
			}
		}
		
		return removeEndingSlashes(location.substring(0, index + 1));
	}
	
	public static String removeEndingSlashes(String location)
	{
		int lastIndex = location.length() - 1;
		
		while (lastIndex >= 0 && location.charAt(lastIndex) == '/')
		{
			lastIndex--;
		}
		
		return location.substring(0, lastIndex + 1);
	}
	
	public static int getFileType(String name)
	{
		int type = 0;
		
		if ((type = getLanguage(name)) != 0)
		{
			return type;
		}
		else
		{
			String ending = name.substring(name.lastIndexOf('.') + 1).toLowerCase();
			
			if (ending.equals("txt"))
			{
				return TXT;
			}
			else if (ending.equals("rtf"))
			{
				return RTF;
			}
			else if (ending.equals("exe"))
			{
				return EXE;
			}
		}
		
		return type;
	}
	
	public static String getFileName(String location)
	{
		location       = location.replace('\\', '/');
		
		int firstIndex = location.lastIndexOf('/') + 1;
		
		location       = removeEndingSlashes(location);
		
		return location.substring(firstIndex, location.length());
	}
	
	public static Font loadMonospacedFont(Display display, String name, String location, int size, int style)
	{
		File file = new File(location);
		
		if (!file.exists())
		{
			throw new IllegalStateException("\"" + file.toString() + "\" does not exist.");
		}
		
		if (!display.loadFont(file.toString()))
		{
			throw new IllegalStateException("\"" + file.toString() + "\" did not load correctly.");
		}
		
		final Font font = new Font(display, name, size, style);
		
		display.addListener(SWT.Dispose, new Listener()
		{
			public void handleEvent(Event event)
			{
				font.dispose();
			}
		});
		
		return font;
	}
	
	public static void writeFile(String location, String text)
	{
		File file = new File(location);
		
		try
		{
			PrintWriter writer = new PrintWriter(new FileWriter(file));
			
			writer.print(text);
			
			writer.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
}