package net.foxycorndog.arrowide.printer;

import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.printing.Printer;
import org.eclipse.swt.printing.PrinterData;

public class TextPrinter
{
	private Rectangle	bounds;

	private String		text;
	
	private Font		font;

	private Printer		printer;
	
	public TextPrinter(PrinterData data, String text, Font font)
	{
		this.text = text;
		
		this.font = font;
		
		printer = new Printer(data);
		
		bounds  = new Rectangle(0, 0, 0, 0);
	}
	
	public boolean print()
	{
		String lines[] = text.replace("\r", "").split("\n");
		
		return print(lines);
	}
	
	private boolean print(String lines[])
	{
		int x = bounds.x;
		int y = bounds.y;
		
		boolean printed = false;
		
		if (printer.startJob("ArrowIDE Printer"))
		{
			GC gc = new GC(printer);
			Font printerFont = new Font(printer, font.getFontData());
			gc.setFont(printerFont);
			int lineHeight = gc.getFontMetrics().getHeight();
			
			if (printer.startPage())
			{
				for (int i = 0; i < lines.length; i ++)
				{
					if (y > bounds.height + bounds.y)
					{
						printer.endPage();
						printer.startPage();
						
						y = bounds.y;
					}
					
					gc.drawText(lines[i], x, y);
					
					y += lineHeight;
				}
				
				printer.endPage();
			}
			
			gc.dispose();
			printer.endJob();
			
			printed = true;
		}
		
		printer.dispose();
		
		return printed;
	}
	
	public void setMargins(float left, float top, float right, float bottom)
	{
		Rectangle rect = printer.getClientArea();
		Rectangle trim = printer.computeTrim(0, 0, 0, 0);
		Point dpi = printer.getDPI();
		
		int left2 = trim.x + (int)(dpi.x * left);
		if (left2 < rect.x)
		{
			left2 = rect.x;
		}
		
		int right2 = rect.width + trim.x + trim.width - (int)(dpi.x * right);
		if (right2 > rect.width)
		{
			right2 = rect.width;
		}
		
		int top2 = trim.y + (int)(dpi.y * top);
		if (top2 < rect.y)
		{
			top2 = rect.y;
		}
		
		int bottom2 = rect.height + trim.y + trim.height - (int)(dpi.y * bottom);
		if (bottom2 > rect.height)
		{
			bottom2 = rect.height;
		}
		
		bounds = new Rectangle(left2, top2, right2 - left2, bottom2 - top2);
	}
}