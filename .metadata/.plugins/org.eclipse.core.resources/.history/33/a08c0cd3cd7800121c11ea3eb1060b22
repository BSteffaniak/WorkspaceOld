package net.foxycorndog.jfoxylib.components;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

import org.eclipse.swt.graphics.ImageData;
import org.eclipse.swt.graphics.PaletteData;
import org.eclipse.swt.widgets.Display;

public class Image
{
	private BufferedImage	bufferedImage;
	
	private org.eclipse.swt.graphics.Image image;
	
	private byte	alphaData[];
	
	private int		pixels[];
	
	public Image()
	{
		
	}
	
	public Image(String location)
	{
		BufferedImage image = null;
		
		try
		{
			image = ImageIO.read(new File(location));
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		
		createImage(image);
	}
	
	public Image(BufferedImage image)
	{
		createImage(image);
	}
	
	private void createImage(BufferedImage img)
	{
		bufferedImage = img;
		
		int width  = img.getWidth();
		int height = img.getHeight();
		
		BufferedImage newImg = convertToInt(img);
		
		pixels = ((DataBufferInt)newImg.getRaster().getDataBuffer()).getData();
		
		ImageData imageData = createImageData();
		
		alphaData = new byte[width * height];
		imageData.alphaData = alphaData;
		
		for (int i = 0; i < width * height; i++)
		{
			imageData.alphaData[i] = (byte)255;
		}
	    
	    imageData.setPixels(0, 0, pixels.length, pixels, 0);
	    
		image = new org.eclipse.swt.graphics.Image(Display.getDefault(), imageData);
	}
	
	private BufferedImage convertToInt(BufferedImage image)
	{
		BufferedImage newImg = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.BITMASK);
		
		Graphics2D g = newImg.createGraphics();
		g.drawImage(image, 0, 0, null);
		g.dispose();
		
		return newImg;
	}
	
	public org.eclipse.swt.graphics.Image getImage()
	{
		return image;
	}
	
	public void setSize(int width, int height)
	{
		if (image == null)
		{
			image = new org.eclipse.swt.graphics.Image(Display.getDefault(), width, height);
		}
		else
		{
			int oldWidth  = bufferedImage.getWidth();
			int oldHeight = bufferedImage.getHeight();
			
			bufferedImage = new BufferedImage(width, height, BufferedImage.BITMASK);
			
			ImageData imageData = createImageData();
			
			byte newAlpha[] = new byte[width * height];
			int newPixels[] = new int[width * height];
			
			for (int y = 0; y < oldWidth; y++)
			{
				for (int x = 0; x < oldWidth; x++)
				{
					newAlpha[x + y * width] = alphaData[x + y * oldWidth];
					newPixels[x + y * width] = pixels[x + y * oldWidth];
				}
			}
			
//			for (int y = oldHeight; y < height; y++)
//			{
//				for (int x = 0; x < width; x++)
//				{
//					newAlpha[x + y * width] = (byte)0;
//					newPixels[x + y * width] = (byte)0;
//				}
//			}
//			
//			for (int y = 0; y < oldHeight; y++)
//			{
//				for (int x = oldWidth; x < width; x++)
//				{
//					newAlpha[x + y * width] = (byte)0;
//					newPixels[x + y * width] = (byte)0;
//				}
//			}
			
			pixels              = newPixels;
			alphaData           = newAlpha;
			imageData.alphaData = alphaData;
			
			imageData.setPixels(0, 0, pixels.length, pixels, 0);
			
			image = new org.eclipse.swt.graphics.Image(Display.getDefault(), imageData);
		}
	}
	
	public void updatePixels()
	{
		ImageData imageData = createImageData();
		
		imageData.setPixels(0, 0, pixels.length, pixels, 0);
		
		image = new org.eclipse.swt.graphics.Image(Display.getDefault(), imageData);
	}
	
	private ImageData createImageData()
	{
		int width  = bufferedImage.getWidth();
		int height = bufferedImage.getHeight();
		
		PaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);
		ImageData imageData = new ImageData(width, height, bufferedImage.getColorModel().getPixelSize(), palette);
		
		return imageData;
	}
	
	public int getWidth()
	{
		return bufferedImage.getWidth();
	}
	
	public int getHeight()
	{
		return bufferedImage.getHeight();
	}
}