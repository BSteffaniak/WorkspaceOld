package net.foxycorndog.thedigginggame.map;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;

import net.foxycorndog.jfoxylib.Frame;
import net.foxycorndog.jfoxylib.bundle.Bundle;
import net.foxycorndog.jfoxylib.graphics.opengl.GL;
import net.foxycorndog.jfoxylib.shader.Shader;
import net.foxycorndog.jfoxylib.util.Bounds;
import net.foxycorndog.thedigginggame.TheDiggingGame;
import net.foxycorndog.thedigginggame.actor.Actor;
import net.foxycorndog.thedigginggame.tile.Tile;

/**
 * Class that holds the information of everything on the map. Such things
 * include: Actors, chunks, and location.
 * 
 * @author	Braden Steffaniak
 * @since	Feb 22, 2013 at 4:23:10 AM
 * @since	v0.1
 * @version Feb 22, 2013 at 4:23:10 AM
 * @version	v0.1
 */
public class Map
{
	private boolean	collision;
	
	private float	x, y;
	
	private TheDiggingGame	game;
	
	private Shader			lighting;
	
	private HashMap<Integer, HashMap<Integer, Chunk>> chunks;
	
	private ArrayList<Actor>	actors;
	
	/**
	 * Class that has a method that is to be implemented. Used
	 * While iterating through the Chunks.
	 * 
	 * @author	Braden Steffaniak
	 * @since	Feb 22, 2013 at 4:23:10 AM
	 * @since	v0.1
	 * @version Feb 22, 2013 at 4:23:10 AM
	 * @version	v0.1
	 */
	private abstract class Task
	{
		/**
		 * Method to be implemented.
		 * 
		 * @param chunk The chunk that is currently being iterated.
		 */
		public abstract void run(Chunk chunk);
	}
	
	/**
	 * Construct a Map.
	 */
	public Map(TheDiggingGame game)
	{
		lighting = new Shader("res/shaders/", new String[] { "lighting.vs" }, new String[] { "lighting.frag" });
		
		chunks    = new HashMap<Integer, HashMap<Integer, Chunk>>();
		
		actors    = new ArrayList<Actor>();
		
		this.game = game;
	}
	
	/**
	 * @return The game in which the Map is located.
	 */
	public TheDiggingGame getGame()
	{
		return game;
	}
	
	/**
	 * Add an actor to the Map if not already added.
	 * 
	 * @param actor The Actor to add to the map.
	 */
	public void addActor(Actor actor)
	{
		if (!actors.contains(actor))
		{
			actors.add(actor);
		}
	}
	
	public void setActorFocused(Actor actor)
	{
		for (int i = actors.size() - 1; i >= 0; i--)
		{
			if (actors.get(i) != actor)
			{
				actors.get(i).setFocused(false);
			}
		}
	}
	
	/**
	 * Generate a chunk at the specified location.
	 * 
	 * @param rx The relative horizontal location of the Chunk to
	 * 		generate.
	 * @param ry The relative vertical location of the Chunk to
	 * 		generate.
	 */
	public void generateChunk(int rx, int ry)
	{
		Chunk chunk = new Chunk(this, rx, ry);
		
		chunk.generate();
		
		if (!chunks.containsKey(rx))
		{
			chunks.put(rx, new HashMap<Integer, Chunk>());
		}
		
		chunks.get(rx).put(ry, chunk);
	}
	
	public boolean generateChunksAround(Actor actor)
	{
		boolean generated = false;
		
		int tileSize    = Tile.getTileSize();
		
		int chunkWidth  = Chunk.getWidth();
		int chunkHeight = Chunk.getHeight();
		
		int x = -chunkWidth;
		int y = -chunkHeight;
		
		int width  = Frame.getWidth()  + chunkWidth;
		int height = Frame.getHeight() + chunkHeight;
		
		while (y <= height)
		{
			while (x <= width)
			{
				int offsetX = (int)(actor.getX());
				int offsetY = (int)(actor.getY());
				
				int x2 = x / tileSize;
				int y2 = y / tileSize;
				
				System.out.println(x2 + ",");
				
				int rx = (x + offsetX) / chunkWidth;
				int ry = (y + offsetY) / chunkHeight;
				
				System.out.println(x2 + ", " + y2 + ", " + rx + ", " + ry);
				
				Bounds bounds = checkNegativeLocation(x2, y2, rx, ry);
				
//				x2 = bounds.getX();
//				y2 = bounds.getY();
				rx = bounds.getWidth();
				ry = bounds.getHeight();
				
				System.out.println(rx);
				
				if (!isChunkAt(rx, ry))
				{
					generateChunk(rx, ry);
				}
				
				x += chunkWidth;
			}
			y += chunkHeight;
		}
			System.out.println();
		
		return generated;
	}
	
	public boolean isChunkAt(int rx, int ry)
	{
		boolean contains = false;
		
		if (chunks.containsKey(rx))
		{
			contains = chunks.get(rx).containsKey(ry);
		}
		
		return contains;
	}
	
	/**
	 * Render all of the Chunks in the Map.
	 */
	public void render()
	{
//		lighting.run();
		
		
		
		GL.pushMatrix();
		{
			GL.translate(x, y, 0);
			
			iterateChunks(new Task()
			{
				public void run(Chunk chunk)
				{
					chunk.render();
				}
			});
		
			for (int i = actors.size() - 1; i >= 0; i--)
			{
				Actor actor = actors.get(i);
				
				actor.render();
			}
		}
		GL.popMatrix();
		
//		lighting.stop();
	}
	
	/**
	 * Adds a Tile from the Chunk at the specified location. Still
	 * needs an update() call afterwards.
	 * 
	 * @param tile The tile to add to the queue.
	 * @param x The horizontal location of the new Tile.
	 * 		(0 - CHUNK_SIZE-1)
	 * @param y The vertical location of the new Tile.
	 * 		(0 - CHUNK_SIZE-1)
	 * @return Whether a Tile was successfully added or not.
	 */
	public boolean addTile(Tile tile, int x, int y, int layer, boolean replace)
	{
		int chunkSize = Chunk.CHUNK_SIZE;
		
		int rx = x / chunkSize;
		int ry = y / chunkSize;
		
		Bounds bounds = checkNegativeLocation(x, y, rx, ry);
		
		x  = bounds.getX();
		y  = bounds.getY();
		rx = bounds.getWidth();
		ry = bounds.getHeight();
		
		if (isChunkAt(rx, ry))
		{
			Chunk chunk = chunks.get(rx).get(ry);
			
			return chunk.addTile(tile, x % chunkSize, y % chunkSize, layer, replace);
		}
		
		return false;
	}

	/**
	 * Removes a Tile from the Chunk at the specified location. Still
	 * needs an update() call afterwards.
	 * 
	 * @param x The horizontal location of the Tile.
	 * 		(0 - CHUNK_SIZE-1)
	 * @param y The vertical location of the Tile.
	 * 		(0 - CHUNK_SIZE-1)
	 * @return Whether a Tile was successfully removed or not.
	 */
	public boolean removeTile(int x, int y, int layer)
	{
		int chunkSize = Chunk.CHUNK_SIZE;
		
		int rx = x / chunkSize;
		int ry = y / chunkSize;
		
		Bounds bounds = checkNegativeLocation(x, y, rx, ry);
		
		x  = bounds.getX();
		y  = bounds.getY();
		rx = bounds.getWidth();
		ry = bounds.getHeight();
		
		if (isChunkAt(rx, ry))
		{
			Chunk chunk = chunks.get(rx).get(ry);
			
			return chunk.removeTile(x % chunkSize, y % chunkSize, layer);
		}
		
		return false;
	}
	
	/**
	 * Updates the buffers of the Chunk at the specified location.
	 * 
	 * @param x The absolute Tile horizontal location.
	 * @param y The absolute Tile vertical location.
	 */
	public void updateChunkAt(int x, int y)
	{
		int chunkSize = Chunk.CHUNK_SIZE;
		
		int rx = x / chunkSize;
		int ry = y / chunkSize;
		
		Bounds bounds = checkNegativeLocation(x, y, rx, ry);
		
		x  = bounds.getX();
		y  = bounds.getY();
		rx = bounds.getWidth();
		ry = bounds.getHeight();
		
		if (isChunkAt(rx, ry))
		{
			Chunk chunk = chunks.get(rx).get(ry);
			
			chunk.update();
		}
	}
	
	private Bounds checkNegativeLocation(int x, int y, int rx, int ry)
	{
		int chunkSize = Chunk.CHUNK_SIZE;
		
		if (x < 0)
		{
			rx--;
			
			x = -rx * chunkSize + x;
			
			if (x % chunkSize == 0)
			{
				rx++;
				x = 0;
			}
		}
		if (y < 0)
		{
			ry--;
			
			y = -ry * chunkSize + y;
			
			if (y % chunkSize == 0)
			{
				ry++;
				y = 0;
			}
		}
		
		return new Bounds(x, y, rx, ry);
	}
	
	/**
	 * Method that uses the iterates through each of the Chunks and
	 * calls the Task.run(Chunk) method for each Chunk.
	 * 
	 * @param task The Task to iterate with.
	 */
	private void iterateChunks(Task task)
	{
		Collection<HashMap<Integer, Chunk>> values = chunks.values();
		
		Iterator iterator = values.iterator();
		
		while (iterator.hasNext())
		{
			Object next = iterator.next();
			
			HashMap<Integer, Chunk> map = (HashMap<Integer, Chunk>)next;
			
			Chunk chunks[] = map.values().toArray(new Chunk[0]);
			
			for (Chunk chunk : chunks)
			{
				task.run(chunk);
			}
		}
	}
	
	/**
	 * Checks whether there is a collision with the Actor and any of the
	 * Chunks.
	 * 
	 * @param actor The Actor to check collisions on.
	 * @return Whether there is a collision.
	 */
	public boolean isCollision(final Actor actor)
	{
		collision = false;
		
		iterateChunks(new Task()
		{
			public void run(Chunk chunk)
			{
				if (chunk.isCollision(actor))
				{
					collision = true;
				}
			}
		});
		
		return collision;
	}
	
	/**
	 * @return The horizontal location of the Map.
	 */
	public float getX()
	{
		return x;
	}
	
	/**
	 * @return The vertical location of the Map.
	 */
	public float getY()
	{
		return y;
	}
	
	/**
	 * Set the absolute location of the Map.
	 * 
	 * @param x The horizontal component to set.
	 * @param y The vertical component to set.
	 */
	public void setLocation(float x, float y)
	{
		this.x = x;
		this.y = y;
	}
	
	/**
	 * Move the Map the specified amount.
	 * 
	 * @param dx The displacement horizontal component.
	 * @param dy The displacement vertical component.
	 */
	public void move(float dx, float dy)
	{
		this.x += dx;
		this.y += dy;
	}
}