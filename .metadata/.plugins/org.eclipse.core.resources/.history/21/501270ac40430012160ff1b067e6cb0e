#version 120

varying vec4  color;
varying vec4  fragScreenPos;
varying vec4  fragWorldPos;

uniform vec3  camPos;
uniform vec3  flashlightPos;

vec3 addOriginal(vec3, vec3);

vec3 flashlight()
{
	vec3 origColor  = gl_FragColor.rgb;
	vec3 amb        = gl_LightModel.ambient.rgb;
	vec3 finalColor = origColor * amb;

	vec3 lightCol = vec3(0.6f, 0.6f, 0.6f);

	float dist = 0;

	/*
	 * Calculates the distance that the light shows for.
	 */
	dist      = sqrt(pow(flashlightPos.x - fragWorldPos.x,  2) + pow(flashlightPos.y - fragWorldPos.y,  2) + pow(flashlightPos.z - fragWorldPos.z,  2));

	float radius      = 3;
	float largeRadius = radius + (radius * 1);
	float radDist     = sqrt(pow(fragScreenPos.x - flashlightPos.x * 0, 2) + pow(fragScreenPos.y - flashlightPos.y * 0, 2));

//	radius  = 0.1f + dist;

	if (radDist <= largeRadius)
	{
//		lightCol.r = lightCol.r < 0 ? 0 : lightCol.r;
//		lightCol.g = lightCol.g < 0 ? 0 : lightCol.g;
//		lightCol.b = lightCol.b < 0 ? 0 : lightCol.b;

		vec3 thing = finalColor;

//		thing = origColor * (lightCol * 0.1f);

		if (radDist <= radius)
		{
			lightCol.rgb *= min(1, radius - (radDist * 1));

//			thing = origColor * lightCol;
		thing = addOriginal(finalColor, lightCol);
		}
		else
		{
			if (lightCol.r < amb.r || lightCol.g < amb.g || lightCol.b < amb.b)
			{
//				lightCol.rgb *= min(1, largeRadius - (radDist * 1));

				thing = origColor * (lightCol * 0.5f);
			}
		}

//		thing.r = lightCol.r < amb.r ? finalColor.r : thing.r;
//		thing.g = lightCol.g < amb.g ? finalColor.g : thing.g;
//		thing.b = lightCol.b < amb.b ? finalColor.b : thing.b;
		

		finalColor = thing;
	}
	
	return finalColor;
}

vec3 addOriginal(vec3 oldColor, vec3 newColor)
{
	vec3 addedColor;
	
	addedColor.r = oldColor.r + newColor.r > color.r ? color.r : oldColor.r + newColor.r;
	addedColor.g = oldColor.g + newColor.g > color.g ? color.g : oldColor.g + newColor.g;
	addedColor.b = oldColor.b + newColor.b > color.b ? color.b : oldColor.b + newColor.b;
	
	return addedColor;
}