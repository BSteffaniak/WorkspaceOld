package net.foxycorndog.thedigginggame.map;

import java.util.ArrayList;

import net.foxycorndog.jfoxylib.bundle.Buffer;
import net.foxycorndog.jfoxylib.bundle.Bundle;
import net.foxycorndog.jfoxylib.graphics.opengl.GL;
import net.foxycorndog.jfoxylib.util.Intersects;
import net.foxycorndog.thedigginggame.TheDiggingGame;
import net.foxycorndog.thedigginggame.actor.Actor;
import net.foxycorndog.thedigginggame.tile.Tile;

/**
 * Class that holds the information for each of the chunks.
 * Such information includes the relative location of the chunk,
 * the size of a Chunk, and the tiles in the chunk.
 * 
 * @author	Braden Steffaniak
 * @since	Feb 22, 2013 at 4:23:18 AM
 * @since	v0.1
 * @version Feb 22, 2013 at 11:52:23 PM
 * @version	v0.1
 */
public class Chunk
{
	private int					relativeX, relativeY;
	
	private Buffer				texturesBuffer;
	
	private Bundle				bundle;
	
	private Map					map;
	
	private Tile				tiles[];
	
	private ArrayList<NewTile>	newTiles;
	
	private static Buffer		verticesBuffer;

	public static final int		CHUNK_SIZE = 32;
	public static final int		LAYER_COUNT = CHUNK_SIZE * CHUNK_SIZE;
	public static final int		TILE_COUNT = LAYER_COUNT * 3;
	public static final int		CHUNK_VERT_COUNT = TILE_COUNT * 4 * 3;
	public static final int		BACKGROUND = 0, MIDDLEGROUND = 1, FOREGROUND = 2;
	
	static
	{
		verticesBuffer = new Buffer(4 * 2 * CHUNK_SIZE * CHUNK_SIZE * 3);
		
		verticesBuffer.beginEditing();
		
		int offset = 0;
		
		int tileSize = Tile.getTileSize();
		
		for (int i = 0; i < 3; i++)
		{
			for (int y = 0; y < CHUNK_SIZE; y++)
			{
				for (int x = 0; x < CHUNK_SIZE; x++)
				{
					float verts[] = GL.genRectVerts(x * tileSize, y * tileSize, tileSize, tileSize);
					
					verticesBuffer.setData(offset, verts);
					
					offset += verts.length;
				}
			}
		}
		
		verticesBuffer.endEditing();
	}
	
	/**
	 * Class that holds the information for a new Tile that will be
	 * added to the tiles when the update() method is called.
	 * 
	 * @author	Braden Steffaniak
	 * @since	Feb 22, 2013 at 8:59:20 PM
	 * @since	v0.1
	 * @version Feb 22, 2013 at 11:52:20 PM
	 * @version	v0.1
	 */
	private class NewTile
	{
		private int		x, y;
		private int		layer;
		
		private Tile	tile;
		
		public NewTile(Tile tile, int x, int y, int layer)
		{
			this.tile  = tile;
			
			this.x     = x;
			this.y     = y;
			
			this.layer = layer;
		}
	}
	
	/**
	 * Constructs a Chunk in the specified Map at the specified relative
	 * location.
	 * 
	 * @param map The map to add the Chunk to.
	 * @param rx The relative horizontal location.
	 * @param ry The relative vertical location.
	 */
	public Chunk(Map map, int rx, int ry)
	{
		this.map       = map;
		
		this.relativeX = rx;
		this.relativeY = ry;
		
		texturesBuffer = new Buffer(2 * CHUNK_VERT_COUNT);
		
		bundle = new Bundle(verticesBuffer, texturesBuffer, null, 2);
		
		tiles    = new Tile[CHUNK_SIZE * CHUNK_SIZE * 3];
		newTiles = new ArrayList<NewTile>();
	}
	
	/**
	 * Method that generates the terrain of the chunk.
	 */
	public void generate()
	{
		for (int i = 0; i < CHUNK_SIZE; i++)
		{
			addTile(Tile.getTile("Grass"), i, CHUNK_SIZE - 21, MIDDLEGROUND, true);
		}
		
		for (int y = 0; y < CHUNK_SIZE - 21; y++)
		{
			for (int x = 0; x < CHUNK_SIZE; x++)
			{
				addTile(Tile.getTile("Dirt"), x, y, MIDDLEGROUND, true);
			}
		}
		
		addTile(Tile.getTile("Stone"), 8, 12, 1, false);
		addTile(Tile.getTile("Stone"), 9, 13, 1, false);
		addTile(Tile.getTile("Stone"), 10, 14, 1, false);
		addTile(Tile.getTile("Stone"), 11, 15, 1, false);
		addTile(Tile.getTile("Stone"), 12, 16, 1, false);
		addTile(Tile.getTile("Stone"), 13, 17, 1, false);
		
		update();
	}
	
	/**
	 * Adds a tile to the newTile queue. The update() method has to be
	 * called after this call to update the Buffers.
	 * 
	 * @param tile The tile to add to the queue.
	 * @param x The horizontal location of the new Tile.
	 * 		(0 - CHUNK_SIZE-1)
	 * @param y The vertical location of the new Tile.
	 * 		(0 - CHUNK_SIZE-1)
	 */
	public boolean addTile(Tile tile, int x, int y, int layer, boolean replace)
	{
		if (!replace && tiles[layer * LAYER_COUNT + (x + y * CHUNK_SIZE)] != null)
		{
			return false;
		}
		
		return newTiles.add(new NewTile(tile, x, y, layer));
	}
	
	/**
	 * Method that updates the current Tiles with the newTiles.
	 */
	public synchronized void update()
	{
		bundle.beginEditingTextures();
		
		while (newTiles.size() > 0)
		{
			NewTile newTile = newTiles.remove(0);
			
			int x      = newTile.x;
			int y      = newTile.y;
			
			int offset = 4 * LAYER_COUNT * newTile.layer;
			
			Tile tile  = newTile.tile;
			
			float textures[] = GL.genRectTextures(Tile.getTerrainSprites().getImageOffsetsf(tile.getX(), tile.getY(), tile.getCols(), tile.getRows()));
			
			bundle.setTextures(offset + (x + y * CHUNK_SIZE) * 4, textures);
			
			tiles[LAYER_COUNT * newTile.layer + (x + y * CHUNK_SIZE)] = tile;
		}
		
		bundle.endEditingTextures();
	}
	
	/**
	 * Method that renders all of the Tile to the screen.
	 */
	public void render()
	{
		GL.pushMatrix();
		{
			GL.translate(relativeX * CHUNK_SIZE * Tile.getTileSize(), relativeY * CHUNK_SIZE * Tile.getTileSize(), 0);
			
			renderBackground();
			renderMiddleground();
			renderForeground();
		}
		GL.popMatrix();
	}
	
	/**
	 * Method that renders the background Tiles.
	 */
	private void renderBackground()
	{
		GL.pushMatrix();
		{
			GL.translate(0, 0, -5);
			
			bundle.render(GL.QUADS, 0, 4 * CHUNK_SIZE * CHUNK_SIZE, Tile.getTerrainSprites());
		}
		GL.popMatrix();
	}

	/**
	 * Method that renders the middleground Tiles.
	 */
	private void renderMiddleground()
	{
		GL.pushMatrix();
		{
			bundle.render(GL.QUADS, 4 * CHUNK_SIZE * CHUNK_SIZE, 4 * CHUNK_SIZE * CHUNK_SIZE, Tile.getTerrainSprites());
		}
		GL.popMatrix();
	}

	/**
	 * Method that renders the foreground Tiles.
	 */
	private void renderForeground()
	{
		GL.pushMatrix();
		{
			GL.translate(0, 0, 5);
			
			bundle.render(GL.QUADS, 4 * CHUNK_SIZE * CHUNK_SIZE * 2, 4 * CHUNK_SIZE * CHUNK_SIZE, Tile.getTerrainSprites());
		}
		GL.popMatrix();
	}
	
	/**
	 * @return The horizontal location relative to the origin.
	 */
	public int getRelativeX()
	{
		return relativeX;
	}

	/**
	 * @return The vertical location relative to the origin.
	 */
	public int getRelativeY()
	{
		return relativeY;
	}

	/**
	 * @return The horizontal location relative to the origin in pixels.
	 */
	public int getX()
	{
		return relativeX * CHUNK_SIZE * Tile.getTileSize();
	}

	/**
	 * @return The vertical location relative to the origin in pixels.
	 */
	public int getY()
	{
		return relativeY * CHUNK_SIZE * Tile.getTileSize();
	}

	/**
	 * @return The width of the Chunk in pixels.
	 */
	public int getWidth()
	{
		return CHUNK_SIZE * Tile.getTileSize();
	}

	/**
	 * @return The height of the Chunk in pixels.
	 */
	public int getHeight()
	{
		return CHUNK_SIZE * Tile.getTileSize();
	}
	
	/**
	 * Checks whether there is a collision with the Actor and any of the
	 * Tiles.
	 * 
	 * @param actor The Actor to check collisions on.
	 * @return Whether there is a collision.
	 */
	public boolean isCollision(Actor actor)
	{
		float actorX    = actor.getX();
		float actorY    = actor.getY();
		int actorWidth  = actor.getWidth();
		int actorHeight = actor.getHeight();
		
		float chunkX    = getX();
		float chunkY    = getY();
		
		if (Intersects.rectangles(actorX, actorY, actorWidth, actorHeight, chunkX, chunkY, getWidth(), getHeight()))
		{
			int startX = 0;
			int startY = 0;
			int width  = 0;
			int height = 0;
			
			int tileSize = Tile.getTileSize();
			
			float startYf = (actorY - chunkY)  ;
			
			float remainder = (float)Math.ceil(startYf) - startYf;
			
			startX = (int)((actorX - chunkX)  / tileSize);
			startY = (int)((actorY - chunkY)  / tileSize);
			width  = (int)((float)actorWidth  / tileSize) + 1;
			height = (int)(((float)actorHeight) / tileSize) + 1;
//			System.out.println(remainder + ", " + (height + remainder) + ", " + height);
//			System.out.println(actorY);
			
			TheDiggingGame.font.render( (((float)actorHeight + remainder) / tileSize) + "", 0, 300, 10, null);
			
			startX = startX < 0 ? 0 : startX;
			startY = startY < 0 ? 0 : startY;
			width  = width  + startX >= CHUNK_SIZE ? CHUNK_SIZE - 1 : width;
			height = height + startY >= CHUNK_SIZE ? CHUNK_SIZE - 1 : height;
			
			int offset = LAYER_COUNT * MIDDLEGROUND;
			
			for (int y = startY; y < startY + height; y++)
			{
				for (int x = startX; x < startX + width; x++)
				{
					if (tiles[offset + x + y * CHUNK_SIZE] != null)
					{
						return true;
					}
				}
			}
		}
		
		return false;
	}
}