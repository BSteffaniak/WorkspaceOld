package net.foxycorndog.jdoutilandroid;

import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import android.opengl.GLES10;
import android.opengl.GLES11;
import android.util.Log;

import java.nio.*;
import java.util.HashSet;

import net.foxycorndog.jdobaseandroid.Base;

public class LightBuffer extends Buffer
{
	private boolean     editing;
	
	private int         id;
	private int         vertexSize;
	private int         position;
	
	private FloatBuffer buffer;
	private ByteBuffer  mapBuffer;
	
//	public LightBuffer(float array[])
//	{
//		setBuffer(FloatBuffer.wrap(array));
//	}
	
	public LightBuffer(int size, int vertexSize)
	{
//		floats = new float[size];
		
		size = Base.getDrawMode() == Base.ELEMENTS ? size : (Base.getDrawMode() == Base.ARRAYS ? (size / 4) * 3 * 2 : 0);
		
		this.vertexSize = vertexSize;
		
		ByteBuffer buf = ByteBuffer.allocateDirect(size * 4);
		
		buf.order(ByteOrder.nativeOrder());
		
		setBuffer(buf.asFloatBuffer());
	}
	
//	private void init()
//	{
//		int ids[] = new int[1];
//		
//		GLES11.glGenBuffers(1, ids, 0);
//		id = ids[0];
//		
//		GLES11.glBindBuffer(GLES11.GL_ELEMENT_ARRAY_BUFFER, id);
//		GLES11.glBufferData(GLES11.GL_ELEMENT_ARRAY_BUFFER, indices.capacity(), indices, GLES11.GL_DYNAMIC_DRAW);
//		//glBufferSubData(GL_ARRAY_BUFFER, 0, buffer);
//		//glBindBuffer(GL_ARRAY_BUFFER, 0);
//	}
	
	public void addData(float elements[])
	{
		if (Base.getDrawMode() == Base.ARRAYS)
		{
			position = (position / 4) * 3 * 2;
		}
//		glBindBuffer(GL_ARRAY_BUFFER, id);
//			
//		mapBuffer = glMapBuffer(GL_ARRAY_BUFFER, GL_WRITE_ONLY, null);
//			
//		buffer = mapBuffer.order(ByteOrder.nativeOrder()).asFloatBuffer();
//			
//		beginEditing();
		
		buffer.position(position);
		
		buffer.put(elements);
		
		buffer.rewind();
		
//		endEditing();
		
//		glUnmapBuffer(GL_ARRAY_BUFFER);
//			
//		glBindBuffer(GL_ARRAY_BUFFER, 0);
		
		this.position += elements.length;
	}
	
	public void setData(int position, float elements[])
	{
		if (Base.getDrawMode() == Base.ARRAYS)
		{
			position = (position / 4) * 3 * 2;
		}
//		this.position = position;
		
//		beginEditing();
		
		buffer.position(position);
		
		buffer.put(elements);
		
		buffer.rewind();
		
//		endEditing();
	}
	
	public void setData(int position, float element)
	{
		if (Base.getDrawMode() == Base.ARRAYS)
		{
			position = (position / 4) * 3 * 2;
		}
//		this.position = position;
		
//		beginEditing();
		
		buffer.position(position);
		
		buffer.put(element);
		
		buffer.rewind();
		
//		endEditing();
	}
	
	public float[] getData()
	{
		float dst[] = new float[this.capacity()];
		
		buffer.get(dst);
		
		return dst;
	}
	
//	public void beginEditing()
//	{
//		if (!editing)
//		{
//			GLES11.glBindBuffer(GLES11.GL_ARRAY_BUFFER, id);
//			
//			mapBuffer = GLES11.glMapBuffer(GLES11.GL_ARRAY_BUFFER, GLES11.GL_WRITE_ONLY, null);
//			
//			buffer    = mapBuffer.order(ByteOrder.nativeOrder()).asFloatBuffer();
//			
//			editing   = true;
//		}
//	}
//	
//	public void endEditing()
//	{
////		if (editing)
////		{
////			glUnmapBuffer(GL_ARRAY_BUFFER);
////			
////			glBindBuffer(GL_ARRAY_BUFFER, 0);
////			
////			editing = false;
////		}
//	}
	
	public float get(int index)
	{
		return buffer.get(index);
	}
	
	public FloatBuffer getBuffer()
	{
		return buffer;
	}
	
	public void setBuffer(FloatBuffer buffer)
	{
		this.buffer = buffer;
	}
	
//	public int getId()
//	{
//		return id;
//	}
	
	public int capacity()
	{
		return buffer.capacity();
	}
	
	public int getStride()
	{
		return vertexSize;
	}
	
//	public boolean doesGenIndices()
//	{
//		return genIndices;
//	}
}
