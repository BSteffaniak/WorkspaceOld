package net.foxycorndog.nostalgia.actor;

import java.util.ArrayList;

import net.foxycorndog.jdoogl.GL;
import net.foxycorndog.jdoogl.model.Model;
import net.foxycorndog.jdoutil.VerticesBuffer;
import net.foxycorndog.nostalgia.actor.camera.Camera;
import net.foxycorndog.nostalgia.items.Item;
import net.foxycorndog.nostalgia.items.weapons.guns.Gun;
import net.foxycorndog.nostalgia.map.Map;

public class Actor
{
	private boolean onGround;
	private boolean moving;
	private boolean sprinting;
	private boolean jumping;
	private boolean cameraAttached;
	
	private int     perspective;
	
	private float   width, height, depth;
	private float   centerX, centerY, centerZ;
	private float   offsetX, offsetY, offsetZ;
	private float   startY;
	
	private Camera  camera, location;
	
	private Map     map;
	
//	private VerticesBuffer verticesBuffer;
	private Model   model;
	
	private Gun     activeGun;
	
	private ArrayList<Gun> guns;
	
	public  static final int   THIRD = 3, FIRST = 1;
	
	private static final float TOLERANCE = 0.0001f;
	
	public Actor(float width, float height, float depth, float centerX, float centerY, float centerZ, Map map)
	{
		this.width     = width;
		this.height    = height;
		this.depth     = depth;
		
		this.centerX   = centerX;
		this.centerY   = centerY;
		this.centerZ   = centerZ;
		
		this.offsetX   = centerX;
		this.offsetY   = centerY;
		this.offsetZ   = centerZ;
		
		location       = new Camera();
		location.setActor(this);
		location.setCameraMode(Camera.XZ_ONLY);
		
		camera         = new Camera();
		camera.setActor(this);
		camera.moveDirection(centerX, centerY, centerZ);
		camera.setCameraMode(Camera.XZ_ONLY);
		
		this.map       = map;
		
//		verticesBuffer = new VerticesBuffer(3 * 4 * 6, 3);
//		
//		verticesBuffer.addData(GL.addCubeVertexArrayf(0, 0, 0, width, height, depth, 0, null));
//		verticesBuffer.genIndices(GL.QUADS, null);
		
		model = new Model(GL.addCubeVertexArrayf(0, 0, 0, width, height, depth, 0, null), null, null, null, null, null);
		
		guns  = new ArrayList<Gun>();
		
		perspective    = FIRST;
	}
	
	public boolean collided(Map map)
	{
		if (map.collided(this))
		{
			return true;
		}
		
		float cubes[] = map.getCubes();
		
		for (int i = 0; i < cubes.length; i += 6)
		{
			float minX1 = location.getX();
			float minY1 = location.getY();
			float minZ1 = location.getZ();
			
			float maxX1 = location.getX() + width;
			float maxY1 = location.getY() + height;
			float maxZ1 = location.getZ() + depth;
			

			float minX2 = cubes[i];
			float minY2 = cubes[i + 1];
			float minZ2 = cubes[i + 2];
			
			float maxX2 = cubes[i + 3];//12
			float maxY2 = cubes[i + 4];//4
			float maxZ2 = cubes[i + 5];//20
			
			if ((maxX1 >= minX2 && minX1 <= maxX2) && (maxZ1 >= minZ2 && minZ1 <= maxZ2) && (maxY1 >= minY2 && minY1 <= maxY2))
			{
				return true;
			}
		}
		
		return false;
	}
	
	/**
	 * Move the actor in the direction of the specified
	 * parameters. The direction that the Actor is facing
	 * affects the direction he will go.
	 *
	 * @param dx The amount to move horizontally.
	 * @param dy The amount to move vertically.
	 * @param dz The amount to move obliquely.
	 */
	public boolean move(float dx, float dy, float dz)
	{
		moving = false;
		
		/*
		 * Make the horizontal and oblique axis movements larger
		 * if the actor is sprinting.
		 */
		dx = sprinting ? dx * 1.8f : dx;
//		dy = sprinting ? dy * 1.8f : dy;
		dz = sprinting ? dz * 1.8f : dz;
		
		/*
		 * How many times to divide the movement to be smoother.
		 * The greater the number, the more calculations it does,
		 * but the more buttery smooth the move is.
		 */
		int times = 10;
			
		dx /= times;
		dy /= times;
		dz /= times;
		
		boolean movedVertical   = false;
		boolean movedHorizontal = false;
		boolean movedOblique    = false;
		
		for (int i = 0; i < times; i ++)
		{
			// Move horizontally
			moveEntities(dx, 0, 0);
			
			if (collided(map))
			{
				moveEntities(-dx, 0, 0);
			}
			else if (dx != 0)
			{
				movedHorizontal = true;
				moving          = true;
			}
			
			// Move vertically
			moveEntities(0, dy, 0);
			
			if (collided(map))
			{
				moveEntities(0, -dy, 0);
				
				if (dy > 0)
				{
					jumping = false;
				}
				else
				{
					onGround = true;
				}
			}
			else if (dy != 0)
			{
				movedVertical = true;
				onGround      = false;
			}
			
			// Move Obliquely
			moveEntities(0, 0, dz);

			if (collided(map))
			{
				moveEntities(0, 0, -dz);
			}
			else if (dz != 0)
			{
				movedOblique = true;
				moving       = true;
			}
		}
		
		return movedOblique || movedHorizontal || movedVertical;
	}
	
	public void moveEntities(float dx, float dy, float dz)
	{
		camera.moveDirection(dx, dy, dz);
		location.moveDirection(dx, dy, dz);
		
		if (activeGun != null)
		{
			activeGun.moveDirection(dx, dy, dz);
		}
	}
	
	public void rotateEntities(float yaw, float pitch, float roll)
	{
		if (yaw != 0)
		{
			camera.yaw(yaw);
			location.yaw(yaw);
			
			if (activeGun != null)
			{
				activeGun.yaw(yaw);
			}
		}
		if (pitch != 0)
		{
			camera.pitch(pitch);
			location.pitch(pitch);
			
			if (activeGun != null)
			{
				activeGun.pitch(-pitch);
			}
		}
		if (roll != 0)
		{
			camera.roll(roll);
			location.roll(roll);
			
			if (activeGun != null)
			{
				activeGun.roll(roll);
			}
		}
	}
	
	public void jump()
	{
		if (!jumping && onGround)
		{
			jumping  = true;
			
			startY   = location.getY();
		}
	}
	
	public void update(int dfps)
	{
		if (cameraAttached())
		{
			if (moving && sprinting)
			{
				if (GL.getFOV() < 60)
				{
					GL.setFOV(GL.getFOV() + 2);
				}
			}
			else
			{
				if (GL.getFOV() > 45)
				{
					GL.setFOV(GL.getFOV() - 2);
				}
			}
		}
		
		if (jumping)
		{
			if (location.getY() < startY + 4)
			{
				if (!move(0, 0.6f, 0))
				{
					jumping = false;
				}
				
				if (location.getY() >= startY + 4)
				{
					jumping  = false;
				}
			}
		}
		else
		{
			move(0, -0.4f, 0);
		}
	}
	
	public void attachCamera(Camera camera)
	{
		camera.setLocation(this.camera.getX(), this.camera.getY(), this.camera.getZ());
		
		this.camera = camera;
		
		camera.setActor(this);
		
		cameraAttached = true;
	}
	
	public void detachCamera()
	{
		camera.setActor(null);
		
		camera = (Camera)camera.clone();
//		
//		float x     = camera.getX();
//		float y     = camera.getY();
//		float z     = camera.getZ();
//		
//		float pitch = camera.getPitch();
//		float yaw   = camera.getYaw();
//		float roll  = camera.getRoll();
//		
//		camera      = null;
//		
//		camera      = new Camera();
//		camera.setLocation(x, y, z);
//		camera.rotate(pitch, yaw, roll);
		
		camera.setActor(this);
		
		cameraAttached = false;
	}
	
	public void lookThrough()
	{
//		GL.translatef(-getOffsetX() + getCenterX(), -getOffsetY() + getCenterY(), -getOffsetZ() + getCenterZ());
		GL.translatef(-(camera.getX() - getX()) + centerX, -(camera.getY() - getY()) + centerY, -(camera.getZ() - getZ()) + centerZ);
		
		camera.lookThrough();

//		GL.translatef(getOffsetX() - getCenterX(), getOffsetY() - getCenterY(), getOffsetZ() - getCenterZ());
		GL.translatef(camera.getX() - getX() - centerX, camera.getY() - getY() - centerY, camera.getZ() - getZ() - centerZ);
	}
	
	public void pitch(float amount)
	{
		rotateEntities(0, amount, 0);
	}
	
	public void yaw(float amount)
	{
		rotateEntities(amount, 0, 0);
	}
	
	public void setSprinting(boolean sprinting)
	{
		if (this.sprinting != sprinting)
		{
			this.sprinting = sprinting;
		}
	}
	
	public boolean isOnGround()
	{
		return onGround;
	}
	
	public float getX()
	{
		return location.getX();
	}
	
	public float getY()
	{
		return location.getY();
	}
	
	public float getZ()
	{
		return location.getZ();
	}
	
	public float getOffsetX()
	{
		return offsetX;
	}
	
	public float getOffsetY()
	{
		return offsetY;
	}
	
	public float getOffsetZ()
	{
		return offsetZ;
	}
	
	public float getCenterX()
	{
		return centerX;
	}
	
	public float getCenterY()
	{
		return centerY;
	}
	
	public float getCenterZ()
	{
		return centerZ;
	}
	
	public void moveCenter(float dx, float dy, float dz)
	{
		centerX += dx;
		centerY += dy;
		centerZ += dz;
	}
	
	public void moveOffest(float dx, float dy, float dz)
	{
		offsetX += dx;
		offsetY += dy;
		offsetZ += dz;
	}
	
	public int getPerspective()
	{
		return perspective;
	}
	
	public void setPerspective(int perspective)
	{
		if (this.perspective == perspective)
		{
			return;
		}
		
		if (perspective == THIRD)
		{
//			moveOffest(0, 2, 6);

			camera.setLocation(getX() + centerX, 2 + getY() + centerY, 6 + getZ() + centerZ);
		}
		else if (perspective == FIRST)
		{
//			moveOffest(0, -2, -6);

			camera.setLocation(getX() + centerX, getY() + centerY, getZ() + centerZ);
		}
		
		this.perspective = perspective;
	}
	
	public boolean cameraAttached()
	{
		return cameraAttached;
	}
	
	public Map getMap()
	{
		return map;
	}
	
	public Gun getActiveGun()
	{
		return activeGun;
	}
	
	public void useActiveWeapon()
	{
		if (activeGun != null)
		{
			activeGun.shoot();
		}
	}
	
	public void addGun(Gun gun)
	{
		guns.add(gun);
	}
	
	public void addGun(Gun gun, boolean equip)
	{
		guns.add(gun);
		
		if (equip)
		{
			activeGun = gun;
			
			gun.setLocation(location.getX(), location.getY(), location.getZ());
			gun.setRotation(location.getYaw(), location.getPitch(), location.getRoll());
			
			gun.move(1.1f, 0.5f, 0);
		}
	}
	
//	public VerticesBuffer getVerticesBuffer()
//	{
//		return verticesBuffer;
//	}
	public Model getMode()
	{
		return model;
	}
	
	public Camera getCamera()
	{
		return camera;
	}
	
	public boolean isMoving()
	{
		return moving;
	}
	
	public Model getModel()
	{
		return model;
	}
	
	public float[] getVertices()
	{
		return model.getVertices();
	}
	
	public String toString()
	{
		float location[] = this.location.getLocation();
		
		return "[ " + location[0] + ", " + location[1] + ", " + location[2] + " ]";
	}
}
