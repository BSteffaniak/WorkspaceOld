package net.foxycorndog.glshaderide.components;

import java.util.ArrayList;

import net.foxycorndog.glshaderide.GLShaderIDE;
import net.foxycorndog.glshaderide.shaderlanguage.Keyword;

import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.Bullet;
import org.eclipse.swt.custom.LineStyleEvent;
import org.eclipse.swt.custom.LineStyleListener;
import org.eclipse.swt.custom.ST;
import org.eclipse.swt.custom.StyleRange;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.dnd.Clipboard;
import org.eclipse.swt.dnd.TextTransfer;
import org.eclipse.swt.dnd.Transfer;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.KeyListener;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Device;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.graphics.GlyphMetrics;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;

public class CodeField extends StyledText
{
	private ArrayList<ArrayList<Boolean>> tabs;
	
	public CodeField(final Display display, Composite comp)
	{
		super(comp, SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL);
		
		setText("");
		setBounds(new Rectangle(0, 0, 100, 100));
	    setLayoutData(new GridData(SWT.RIGHT, SWT.TOP, true, true, 1, 1));
	    
	    FontData fontData[] = getFont().getFontData();
	    fontData[0].setHeight(16);
	    
	    setFont(new Font(display, fontData[0]));
	    
	    tabs = new ArrayList<ArrayList<Boolean>>();
	    tabs.add(new ArrayList<Boolean>());
	    setTabs(4);
		setAlwaysShowScrollBars(false);
		
	    highlightSyntax(display);
	    
	    addKeyListener(new KeyListener()
	    {
			@Override
			public void keyPressed(KeyEvent e)
			{
				int xPosition     = getCaretXPosition();
				int caretPosition = getCaretPosition();
				int lineNum       = getCaretLineNumber();
				
				parseChar(e.character, xPosition, caretPosition, lineNum, 0, false, true);
			}

			@Override
			public void keyReleased(KeyEvent e)
			{
				
			}
	    });
	    
//	    textField.addLineStyleListener(new LineStyleListener()
//	    {
//			@Override
//			public void lineGetStyle(LineStyleEvent e)
//			{
//				e.bulletIndex = textField.getLineAtOffset(e.lineOffset);
//				
//				String count = textField.getLineCount() - 1 + "";
//				
//				String prefix = "";
//				
//				if (count.length() == 1)
//				{
//					prefix = "0";
//				}
//				
//				StyleRange style = new StyleRange();
//				style.metrics = new GlyphMetrics(0, 0, (prefix.length() + count.length()) * 12);
//				
//				Bullet bullet = new Bullet(ST.BULLET_TEXT, style);
//				
//				bullet.text = prefix + (textField.getLineCount() - 1) + ".";
//				
//				e.bullet = bullet;
//			}
//	    });
	}
	
	private void parseChar(char c, int xPosition, int caretPosition, int lineNum, int offset, boolean addChar, boolean highlight)
	{
		caretPosition += offset;
		
		if (addChar)
		{
			String text = getText();
			
//			setText(text.substring(0, caretPosition) + (c) + text.substring(caretPosition));
		}
		
		// If enter pressed
		if (c == 13 || c == '\n')
		{
			if (c == 13)
			{
				caretPosition--;
				xPosition--;
			}
			
			tabs.add(lineNum, new ArrayList<Boolean>());
			
			if (!addChar)
			{
				String tabsStr = "";
				
				int tabsCount  = previousLineTabCount(lineNum);
				
				for (int i = 0; i < tabsCount; i ++)
				{
					tabsStr += "\t";
					tabs.get(lineNum).add(true);
				}
	
				String text   = getText();
				int    length = text.length();
				
				setText(text.substring(0, caretPosition - 1) + text.substring(caretPosition, caretPosition + 1) + tabsStr + (c == 13 ? text.substring(caretPosition + 1) : ""));
				
				setCaretOffset(caretPosition + tabsStr.length());
			}
		}
		// If backspace pressed
		else if (c == 8)
		{
//			System.out.println("before: TABS: " + tabs.size() + ",\tXPOS: " + xPosition);
			if (xPosition >= tabs.get(lineNum).size() && (lineNum > 0 || xPosition > 0))
			{
				tabs.remove(lineNum + 1);
			}
			else if (xPosition >= 0 && (tabs.get(lineNum).size() > 0))
			{
				tabs.get(lineNum).remove(xPosition);
			}
//			System.out.println("LINENUM: " + lineNum + ",\tXPOS: " + xPosition + ",\tTABS: " + tabs.size());
		}
		else if (c == '\t')
		{
			boolean lastCharacterTab = lastCharacterIsTab(1, lineNum);
			
			tabs.get(lineNum).add(lastCharacterTab);
		}
		else
		{
			if (isPrintable(c))
			{
				tabs.get(lineNum).add(false);
			}
			else
			{
				
			}
		}
		
		if (highlight)
		{
			highlightSyntax(GLShaderIDE.display);
		}
	}
	
	private void highlightSyntax(Device device)
	{
		StyleRange range = new StyleRange();
		range.start = 0;
		range.length = getText().length();
		range.foreground = new Color(device, 0, 0, 0);
		
		setStyleRange(range);
		
		String text  = getText();
		
//		for (int i = 0; i < chars.length; i ++)
//		{
//			if (chars[i] == 13 || chars[i] == '.' || chars[i] == '\n' || chars[i] == '\t' || chars[i] == ' ')
//			{
//				wasEmpty = true;
//				emptyChar = chars[i];
//			}
//			else
//			{
//				if (wasEmpty)
//				{
//					if (emptyChar == 13)
//					{
////						charOffset++;
//					}
//					
//					if (!finishedWord)
//					{
//						strings.add(text.substring(offsets.get(offsets.size() - 1), i + charOffset - 2));
//						finishedWord = true;
//					}
//					else
//					{
//						offsets.add(i + charOffset);
//						finishedWord = false;
//					}
//					
//					wasEmpty = false;
//				}
//			}
//		}
//		
//		if (text.length() > 0)
//		{
//			strings.add(text.substring(offsets.get(offsets.size() - 1), text.length() - 1));
//		}
		
		char whitespace[] = new char[] { ' ', '.', ',', '/', '(', ')', '[', ']', '{', '}', ';', '\n', '\t' };
		
		String strings[]  = text.split("[.,/\n\t\\[\\](){}; ]");
		int    offsets[]  = new int[strings.length];
		
		int charCount = 0;
		
		charCount += calculateSpaceBetween(text, 0, whitespace);
		
		for (int i = 0; i < strings.length; i ++)
		{
			String word = strings[i];
			
			if (!word.equals(""))
			{
				offsets[i]  = charCount;
				
//				System.out.println("i: " + i + ",\tword: " + word + ",\toffset: " + offsets[i] + ",\tlength: " + word.length() + ",\tsize: " + text.length());
				
				if (Keyword.isKeyword(word))
				{
					Keyword keyword = Keyword.getKeyword(word);
					
					int offset       = offsets[i];
					int length       = word.length();
					
					range            = new StyleRange();
					
					range.start      = offset;
					range.length     = length;
					range.foreground = keyword.getColor();
					
					setStyleRange(range);
				}
				
				int spaceBetween = calculateSpaceBetween(text, charCount + word.length(), whitespace);
				
				charCount += strings[i].length() + spaceBetween;
			}
		}
	}
	
	private int calculateSpaceBetween(String text, int start, char chars[])
	{
		int     count   = 0;
		
		for (int i = start; i < text.length(); i ++)
		{
			if (containsChar(chars, text.charAt(i)))
			{
				count++;
			}
			else
			{
				return count;
			}
		}
		
		return count;
	}
	
	private boolean containsChar(char chars[], char key)
	{
		for (int i = 0; i < chars.length; i ++)
		{
			if (key == chars[i])
			{
				return true;
			}
		}
		
		return false;
	}
	
	private int getCaretLineNumber()
	{
		return getLineAtOffset(getCaretPosition());
	}
	
	private int getCaretPosition()
	{
		return getCaretOffset();
	}
	
	private int getCaretXPosition()
	{
		int xPos              = 0;
		int countedCharacters = 0;
		int caretPos          = getCaretPosition();
		
		for (int i = 0; i < tabs.size(); i ++)
		{
			if (i == getCaretLineNumber())// || countedCharacters >= getCaretPosition())
			{
				xPos = caretPos - countedCharacters - i;// - (i * 2);
//				System.out.println("size: " + tabs.size() + ", caretPos: " + caretPos + ", counted: " + countedCharacters + ", Line number: " + i + ", after calc: " + xPos);
				
//				xPos = countedCharacters - (getCaretPosition()) + i;
//				xPos = Math.abs(xPos);
				
				return xPos;
			}
			
			countedCharacters += tabs.get(i).size();
		}
		
		return xPos;
	}
	
	private char lastCharacter(int charactersBack)
	{
		int textLength = getText().length();
		
		if (textLength >= charactersBack)
		{
			return getText().charAt(textLength - charactersBack);
		}
		
		return 0;
	}
	
	private boolean lastCharacterIsTab(int charactersBack, int lineNum)
	{
		ArrayList<Boolean> line = tabs.get(lineNum);
		int size                = line.size();
		
		if (size >= charactersBack)
		{
			return line.get(size - charactersBack);
		}
		else if (size == 0)
		{
			return true;
		}
		
		return false;
	}
	
	private int previousLineTabCount(int lineNumber)
	{
		int size    = tabs.get(lineNumber - 1).size();
		int tabsNum = 0;
		
		for (int i = size - 1; i >= 0; i --)
		{
			if (tabs.get(lineNumber - 1).get(i))
			{
				tabsNum = i + 1;
				
				break;
			}
		}
		
		return tabsNum;
	}
	
	private boolean isPrintable(char c)
	{
		Character.UnicodeBlock block = Character.UnicodeBlock.of(c);
		
		return (!Character.isISOControl(c) && block != null && block != Character.UnicodeBlock.SPECIALS);
	}
	
//	private char lastCharacterIsTab(int charactersBack)
//	{
//		return tabs.get(textField.getText().length() - charactersBack);
//	}
	
	
	public void paste()
	{
//		super.paste();
		
		Clipboard clip     = new Clipboard(GLShaderIDE.display);
		
		Transfer  trans    = TextTransfer.getInstance();
		final Object    contents = clip.getContents(trans);
		
		if (contents instanceof String)
		{
			new Thread(new Runnable()
			{
				public void run()
				{
					GLShaderIDE.display.asyncExec(new Runnable()
					{
						public void run()
						{
							char chars[] = ((String)contents).toCharArray();
							
							int xPosition     = getCaretXPosition();
							int caretPosition = getCaretPosition();
							int lineNum       = getCaretLineNumber();
							
							int index  = 0;
							
							int tabCount = previousLineTabCount(lineNum + 1);
							System.out.println(tabCount);
							
							for (int i = 0; i < chars.length; i ++)
							{
								char c = chars[i];
								
								if (c == '\r')
								{
									continue;
								}
								
								if (c == '\n')
								{
									lineNum ++;
								}
								
								parseChar(c, 0, caretPosition, lineNum, index++, true, false);
								
								if (c == '\n')
								{
									for (int tab = 0; tab < tabCount; tab ++)
									{
										parseChar('\t', 0, caretPosition, lineNum, index++, true, false);
									}
								}
							}
							
							setCaretOffset(caretPosition + index);
							highlightSyntax(GLShaderIDE.display);
						}
					});
				}
			}).start();
		}
	}
	
	public void setText(String text)
	{
		super.setText(text);
	}
	
	public String getRawText()
	{
		return getText().replace(new Character((char)13), ' ');
	}
	
	public int getWidth()
	{
		return getBounds().width;
	}
	
	public int getHeight()
	{
		return getBounds().height;
	}
}