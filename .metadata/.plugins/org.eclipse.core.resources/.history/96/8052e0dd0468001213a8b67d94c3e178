package net.foxycorndog.arrowide.language;

import org.eclipse.swt.graphics.Color;

public class CommentProperties
{
	public final boolean	multiLineEnabled, singleLineEnabled;
	
	public final Color		color;
	
	public final String		multiLineStart[], multiLineEnd[], singleLineStart[];
	
	public CommentProperties()
	{
		multiLineEnabled		= false;
		singleLineEnabled		= false;
		
		this.multiLineStart		= null;
		this.multiLineEnd		= null;
		this.singleLineStart	= null;
		
		this.color				= null;
	}
	
	public CommentProperties(String singleLineStart[], Color color)
	{
		multiLineEnabled		= false;
		singleLineEnabled		= true;
		
		this.multiLineStart		= null;
		this.multiLineEnd		= null;
		this.singleLineStart	= singleLineStart;
		
		this.color				= color;
	}
	
	public CommentProperties(String multiLineStart[], String multiLineEnd[], Color color)
	{
		multiLineEnabled		= true;
		singleLineEnabled		= false;
		
		this.multiLineStart		= multiLineStart;
		this.multiLineEnd		= multiLineEnd;
		this.singleLineStart	= null;
		
		this.color				= color;
	}
	
	public CommentProperties(String singleLineStart[], String multiLineStart[], String multiLineEnd[], Color color)
	{
		multiLineEnabled		= true;
		singleLineEnabled		= true;
		
		this.multiLineStart		= multiLineStart;
		this.multiLineEnd		= multiLineEnd;
		this.singleLineStart	= singleLineStart;
		
		this.color				= color;
	}
	
	public CommentProperties(String singleLineStart, Color color)
	{
		multiLineEnabled		= false;
		singleLineEnabled		= true;
		
		this.multiLineStart		= null;
		this.multiLineEnd		= null;
		this.singleLineStart	= new String[] { singleLineStart };
		
		this.color				= color;
	}
	
	public CommentProperties(String multiLineStart, String multiLineEnd, Color color)
	{
		multiLineEnabled		= true;
		singleLineEnabled		= false;
		
		this.multiLineStart		= new String[] { multiLineStart };
		this.multiLineEnd		= new String[] { multiLineEnd };
		this.singleLineStart	= null;
		
		this.color				= color;
	}
	
	public CommentProperties(String singleLineStart, String multiLineStart, String multiLineEnd, Color color)
	{
		multiLineEnabled		= true;
		singleLineEnabled		= true;
		
		this.multiLineStart		= new String[] { multiLineStart };
		this.multiLineEnd		= new String[] { multiLineEnd };
		this.singleLineStart	= new String[] { singleLineStart };
		
		this.color				= color;
	}
	
	public CommentProperties(String singleLineStart, String multiLineStart[], String multiLineEnd[], Color color)
	{
		multiLineEnabled		= true;
		singleLineEnabled		= true;
		
		this.multiLineStart		= multiLineStart;
		this.multiLineEnd		= multiLineEnd;
		this.singleLineStart	= new String[] { singleLineStart };
		
		this.color				= color;
	}
	
	public CommentProperties(String singleLineStart, String multiLineStart[], String multiLineEnd, Color color)
	{
		multiLineEnabled		= true;
		singleLineEnabled		= true;
		
		this.multiLineStart		= multiLineStart;
		this.multiLineEnd		= new String[] { multiLineEnd };
		this.singleLineStart	= new String[] { singleLineStart };
		
		this.color				= color;
	}
	
	public int startsComment(String str)
	{
		if (!singleLineEnabled)
		{
			for (String com : singleLineStart)
			{
				if (com.equals(str))
				{
					return true;
				}
			}
		}
		
		if (multiLineEnabled)
		{
			for (String com : multiLineStart)
			{
				if (com.equals(str))
				{
					return true;
				}
			}
		}
		
		return false;
	}
	
	public int endsComment(String str)
	{
		if (!multiLineEnabled)
		{
			return false;
		}
		
		for (String com : multiLineEnd)
		{
			if (com.equals(str))
			{
				return true;
			}
		}
		
		return false;
	}
	
	public boolean startsToStartComment(String str)
	{
		if (!singleLineEnabled)
		{
			return false;
		}
		
		for (String com : singleLineStart)
		{
			if (com.startsWith(str))
			{
				return true;
			}
		}
		
		if (multiLineEnabled)
		{
			for (String com : multiLineStart)
			{
				if (com.startsWith(str))
				{
					return true;
				}
			}
		}
		
		return false;
	}
	
	public boolean startsToEndComment(String str)
	{
		if (!multiLineEnabled)
		{
			return false;
		}
		
		for (String com : multiLineEnd)
		{
			if (com.startsWith(str))
			{
				return true;
			}
		}
		
		return false;
	}
}