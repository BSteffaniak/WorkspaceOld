/**
 * File:          Market.java
 * Author:        Braden Steffaniak
 * Programming:   APCS
 * Last Modified: 6Sep2012
 * Description:   Class that is the starting point of the program.
 * In the main method, it creates a new Market.
 */
public class Market
{
	/**
	 * The main method of this program. This is the first method that
	 * is ran when the program is started. It instantiates a new
	 * Market, in which begins the program.
	 * 
	 * @param args The command line arguments. These are never used here.
	 */
	public static void main(String args[])
	{
		new Market();
	}
	
	/**
	 * Constructor 
	 */
	public Market()
	{
//		Point conPoints[] =
//		{
//			new Point(1, 1),
//			new Point(2, 2),
//			new Point(3, 3),
//			new Point(4, 4),
//			new Point(5, 5)
//		};
//		
//		Point proPoints[] =
//		{
//			new Point(1, 9),
//			new Point(2, 7),
//			new Point(3, 3.1),
//			new Point(4, 3),
//			new Point(5, 1)
//		};
		
		Point conPoints[] =
		{
			new Point(10, 10),
			new Point(20, 0),
			new Point(30, 31),
			new Point(40, 40),
			new Point(50, 50)
		};
		
		Point proPoints[] =
		{
			new Point(10, 90),
			new Point(20, 70),
			new Point(29, 60),
			new Point(89, 42),
			new Point(50, 50)
		};
		
		Consumer c = new Consumer(conPoints);//1, 1, 0, 10);
		Producer p = new Producer(proPoints);//-1, 1, 10, 10);
		
		System.out.println(c);
		System.out.println(p);
		
		boolean dealReached = false;
		
		Point currentBid  = c.initialBid();
		Point currentBid2 = p.initialBid();
		
		for (int i = 0; i < conPoints.length - 1; i ++)
		{
			currentBid  = p.negotiate(currentBid);
			
			currentBid2 = c.negotiate(currentBid);
			
			/* 
			 * uses == because if they have come to an agreement
			 * then the currentBid will have the same reference.
			 */
			if (currentBid == currentBid2)
			{
				System.out.println("Deal reached at " + currentBid);
				
				dealReached = true;
				
				break;
			}
		}
		
		if (!dealReached)
		{
			System.out.println("No deal reached. Poop.");
		}
	}
	
	public static boolean equilibrium(Point p, Rectangle tol)
	{
		Rectangle pointRect = new Rectangle(p.getQuantity(), p.getCost(), 1, 1);
		
		return pointRect.intersects(tol);
	}
	
	public static boolean equilibrium(Point p, Rectangle tol1, Rectangle tol2)
	{
		Rectangle pointRect = new Rectangle(p.getQuantity(), p.getCost(), 1, 1);
		
		return pointRect.intersects(tol1) || pointRect.intersects(tol2);
	}
}