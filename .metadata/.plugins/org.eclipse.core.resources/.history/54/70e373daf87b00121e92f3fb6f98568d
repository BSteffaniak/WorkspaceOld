package net.foxycorndog.jfoxylib.input;

import java.awt.DefaultKeyboardFocusManager;
import java.awt.KeyEventDispatcher;
import java.awt.KeyEventPostProcessor;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Queue;

import net.foxycorndog.jfoxylib.graphics.opengl.GL;

import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.jnativehook.GlobalScreen;
import org.jnativehook.NativeHookException;
import org.jnativehook.NativeSystem;
import org.jnativehook.keyboard.NativeKeyEvent;
import org.jnativehook.keyboard.NativeKeyListener;
import org.lwjgl.LWJGLException;

public class Keyboard
{
	private static boolean pressed[];
	private static boolean next[];
	
	private static NativeKeyEvent key;
	
	private static final NativeKeyListener nativeKeyListener;
	
	public static final int ESCAPE = key.VK_ESCAPE, SHIFT = key.VK_SHIFT;
	
	static
	{
		pressed = new boolean[256];
		next = new boolean[pressed.length];
		
		nativeKeyListener = new NativeKeyListener()
		{
			public void nativeKeyTyped(NativeKeyEvent e)
			{
				
			}
			
			public void nativeKeyReleased(NativeKeyEvent e)
			{
				int code = e.getKeyCode();
				
				pressed[code] = false;
				
//				System.out.println("release " + code);
			}
			
			public void nativeKeyPressed(NativeKeyEvent e)
			{
				int code = e.getKeyCode();
				
				pressed[code] = true;
				
//				System.out.println("press " + code);
			}
		};
		
		String nativeLocation = null;
		File binFile = null;
		
		try
		{
			URL loc = GlobalScreen.class.getProtectionDomain().getCodeSource().getLocation();
			URI uri = loc.toURI();
			
			String uriStr = uri.toString();
			
			boolean jar = uriStr.startsWith("rsrc:") || uriStr.startsWith("jar:");
			
			if (jar)
			{
				String workingDirectory = System.getProperty("user.dir").replace('\\', '/');
				
				nativeLocation = workingDirectory + "/" + NativeSystem.getFamily() + "/"
											+ NativeSystem.getArchitecture() + "/";
			}
			else
			{
				binFile = new File(uri);
		
				nativeLocation = binFile.getParent().replace('\\', '/');
				nativeLocation += "/native" + "/" + NativeSystem.getFamily() + "/"
						+ NativeSystem.getArchitecture() + "/";
			}
			
			System.load(nativeLocation);

		}
		catch (URISyntaxException e)
		{
			e.printStackTrace();
		}
		
		create();
		
		GlobalScreen.getInstance().addNativeKeyListener(nativeKeyListener);
	}
	
	public static void create()
	{
		try
		{
			GlobalScreen.registerNativeHook();
		}
		catch (NativeHookException e)
		{
			e.printStackTrace();
		}
	}
	
	public static void destroy()
	{
		GlobalScreen.unregisterNativeHook();
	}
	
	public static boolean keyPressed(int keyId)
	{
		return pressed[keyId];
	}
	
	public static boolean next(int keyId)
	{
		boolean nxt = pressed[keyId] && next[keyId];
		
		return nxt;
	}
	
	public static void update()
	{
		for (int i = 0; i < pressed.length; i ++)
		{
			if (!pressed[i])
			{
				next[i] = true;
			}
			else
			{
				next[i] = false;
			}
		}
	}
}