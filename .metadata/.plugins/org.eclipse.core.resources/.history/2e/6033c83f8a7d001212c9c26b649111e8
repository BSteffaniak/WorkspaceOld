package net.foxycorndog.jfoxylib.components;

import java.awt.AWTException;
import java.awt.Robot;
import java.util.ArrayList;

import net.foxycorndog.jfoxylib.GameEntry;
import net.foxycorndog.jfoxylib.events.MoveEvent;
import net.foxycorndog.jfoxylib.input.Mouse;
import net.foxycorndog.jfoxylib.listeners.GameListener;
import net.foxycorndog.jfoxylib.listeners.MoveListener;
import net.foxycorndog.jfoxylib.util.Rectangle;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ControlEvent;
import org.eclipse.swt.events.ControlListener;
import org.eclipse.swt.events.DragDetectEvent;
import org.eclipse.swt.events.DragDetectListener;
import org.eclipse.swt.events.FocusEvent;
import org.eclipse.swt.events.FocusListener;
import org.eclipse.swt.events.GestureEvent;
import org.eclipse.swt.events.GestureListener;
import org.eclipse.swt.events.MenuDetectEvent;
import org.eclipse.swt.events.MenuDetectListener;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseListener;
import org.eclipse.swt.events.ShellEvent;
import org.eclipse.swt.events.ShellListener;
import org.eclipse.swt.events.TouchEvent;
import org.eclipse.swt.events.TouchListener;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.graphics.ImageData;
import org.eclipse.swt.graphics.PaletteData;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Monitor;
import org.eclipse.swt.widgets.Shell;

/**
 * 
 * 
 * @author	Braden Steffaniak
 * @since	Feb 15, 2013 at 11:43:17 PM
 * @since	v0.1
 * @version Feb 21, 2013 at 12:24:53 AM
 * @version	v0.1
 */
public class Frame extends Panel
{
	private boolean			mouseGrabbed;
	
	private int				style;
	
	private Rectangle		viewBounds;
	
	private String			title;
	
	private Panel			contentPanel;
	
	private Shell			shell;
	
	private Listener		moveListener;
	
	private GameListener	grabListener;
	
	private Cursor			oldCursor, currentCursor;
	
	private ArrayList<MoveListener>	moveListeners;
	
	public Frame()
	{
		style = SWT.NONE;
		
		moveListeners = new ArrayList<MoveListener>();
		
		moveListener = new Listener()
		{
			public void handleEvent(Event event)
			{
				for (int i = moveListeners.size() - 1; i >= 0; i--)
				{
					MoveEvent e = new MoveEvent();
					
					moveListeners.get(i).moved(e);
				}
			}
		};
		
		title = "";
		
		recreateShell();
		
		oldCursor     = shell.getCursor();
		currentCursor = shell.getCursor();
		
		contentPanel = new Panel(this);
	}
	
	private void recreateContentArea()
	{
		Rectangle area = new Rectangle(shell.getClientArea());
		
		int x = (getWidth() - area.getWidth()) / 2;
		int y = (getHeight() - area.getHeight() - x);
		
		contentPanel.setLocation(area.getX(), area.getY());
		contentPanel.setSize(area.getWidth(), area.getHeight());
		
		viewBounds = new Rectangle(x + getX(), y + getY(), area.getWidth(), area.getHeight());
	}
	
	private void recreateShell()
	{
		shell = new Shell(style);
		shell.setLocation(getX(), getY());
		shell.setSize(getWidth(), getHeight());
		shell.setText(title);
		
		create(shell);
		
		setControl(shell);
		
		shell.addListener(SWT.Move, moveListener);
		
		if ((style & SWT.RESIZE) != 0)
		{
			shell.addListener(SWT.Resize, new Listener()
			{
				public void handleEvent(Event e)
				{
					setSize(shell.getSize().x, shell.getSize().y, false);
					recreateContentArea();
					update();
				}
			});
		}
		
		if (currentCursor != null)
		{
			shell.setCursor(currentCursor);
		}
	}
	
	public void setResizable(boolean resizable)
	{
		if (resizable && (style & SWT.RESIZE) == 0)
		{
			addStyle(SWT.RESIZE);
		}
		else
		{
			
		}
	}
	
	public String getTitle()
	{
		return title;
	}
	
	public void setTitle(String title)
	{
		this.title = title;
		
		shell.setText(title);
	}
	
	public Rectangle getViewBounds()
	{
		return viewBounds;
	}
	
	public void addMoveListener(MoveListener listener)
	{
		moveListeners.add(listener);
	}
	
	public void removeMoveListener(MoveListener listener)
	{
		moveListeners.remove(listener);
	}
	
	public Panel getContentPanel()
	{
		return contentPanel;
	}
	
	public void setMaximizable(boolean maximizable)
	{
		if (maximizable)
		{
			addStyle(SWT.MAX);
		}
		else
		{
			
		}
	}
	
	public void addStyle(int style)
	{
		this.style |= style;
		
		recreateShell();
		
		recreateContentArea();
	}
	
	public boolean isOpen()
	{
		return !shell.isDisposed() && shell.isVisible();
	}
	
	public void setSize(int width, int height)
	{
		setSize(width, height, true);
	}
	
	public void setSize(int width, int height, boolean swt)
	{
		super.setSize(width, height, swt);
		
		recreateContentArea();
	}
	
	public void open()
	{
		shell.open();
	}
	
	public void close()
	{
		if (shell.isDisposed())
		{
			return;
		}
		
		shell.close();
	}
	
	public void center()
	{
		Rectangle bounds = new Rectangle(0, 0, 0, 0);
		
		int centerX = bounds.getWidth()  / 2 - getWidth()  / 2;
		int centerY = bounds.getHeight() / 2 - getHeight() / 2;
		
		setLocation(centerX, centerY);
	}
	
	public boolean isMouseGrabbed()
	{
		return mouseGrabbed;
	}
	
	public void setMouseGrabbed(boolean mouseGrabbed)
	{
		if (mouseGrabbed != this.mouseGrabbed)
		{
			if (mouseGrabbed)
			{
				Mouse.setLocation(getX() + getWidth() / 2, getY() + getHeight() / 2);
				
				if (grabListener == null)
				{
					grabListener = new GameListener()
					{
						public void looped()
						{
							int centerX = getX() + getWidth()  / 2;
							int centerY = getY() + getHeight() / 2;
							
							int newX = centerX;
							int newY = centerY;
							
							Mouse.setLocation(newX, newY);
						}
					};
				}
				
				GameEntry.addGameListener(grabListener);
				
				// TODO: set cursor transparent
			}
			else
			{
				GameEntry.removeGameListener(grabListener);
				
				// TODO: reset cursor
			}
			
			// TODO: set cursor
		
			this.mouseGrabbed = mouseGrabbed;
		}
	}
}