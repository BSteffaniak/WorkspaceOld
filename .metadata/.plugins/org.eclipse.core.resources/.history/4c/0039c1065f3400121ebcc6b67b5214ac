package net.foxycorndog.jdoogl.shader;

import static org.lwjgl.opengl.GL20.*;
import static org.lwjgl.opengl.GL11.GL_FALSE;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;


public class ShaderFactory
{
	public static int genShaderProgramId()
	{
		return glCreateProgram();
	}
	
	public static void genProgram(int programId)
	{
		glLinkProgram(programId);
	}
	
	public static boolean validateProgram(int programId)
	{
		glValidateProgram(programId);
		
		return glGetProgram(programId, GL_VALIDATE_STATUS) != GL_FALSE;
	}
	
	public static int loadVertexShader(String location)
	{
		int vertexShader   = glCreateShader(GL_VERTEX_SHADER);
		
		StringBuilder shaderSource   = new StringBuilder();
		
		try
		{
			BufferedReader shaderReader = new BufferedReader(new FileReader(location));
			
			String line = null;
			
			while ((line = shaderReader.readLine()) != null)
			{
				shaderSource.append(line).append('\n');
			}
			
			shaderReader.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		
		glShaderSource(vertexShader, shaderSource);
		glCompileShader(vertexShader);
		
		if (glGetShader(vertexShader, GL_COMPILE_STATUS) == GL_FALSE)
		{
			throw new RuntimeException("Vertex shader at \"" + location + "\" was not compiled correctly!");
		}
		
		return vertexShader;
	}
	
	public static int loadFragmentShader(String location)
	{
		int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
		
		StringBuilder shaderSource   = new StringBuilder();
		
		try
		{
			BufferedReader shaderReader = new BufferedReader(new FileReader(location));
			
			String line = null;
			
			while ((line = shaderReader.readLine()) != null)
			{
				shaderSource.append(line).append('\n');
			}
			
			shaderReader.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		
		glShaderSource(fragmentShader, shaderSource);
		glCompileShader(fragmentShader);
		
		if (glGetShader(fragmentShader, GL_COMPILE_STATUS) == GL_FALSE)
		{
			throw new RuntimeException("Fragment shader at \"" + location + "\" was not compiled correctly!");
		}
		
		return fragmentShader;
	}
	
	public void attachShader(int shaderId, int shaderProgramId)
	{
		glAttachShader(shaderProgramId, shaderId);
	}
}