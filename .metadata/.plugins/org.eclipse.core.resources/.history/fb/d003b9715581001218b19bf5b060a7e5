package net.foxycorndog.jfoxylib;

import java.util.ArrayList;

import org.lwjgl.LWJGLException;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.GL11;

import net.foxycorndog.jfoxylib.graphics.opengl.GL;
import net.foxycorndog.jfoxylib.input.Keyboard;
import net.foxycorndog.jfoxylib.input.Mouse;
import net.foxycorndog.jfoxylib.listeners.GameListener;

/**
 * This class serves as the entry point for all of the
 * OpenGL functionality. Once the start() method is
 * called, the loop will run until the Frame is closed
 * or the stop() method is called.
 * 
 * @author	Braden Steffaniak
 * @since	Feb 15, 2013 at 11:44:47 PM
 * @since	v0.1
 * @version	Feb 26, 2013 at 6:36:47 AM
 * @version	v0.1
 */
public abstract class GameStarter
{
	private boolean	running;
	
	private Frame	mainFrame;
	
	private static ArrayList<GameListener>	listeners;
	
	static
	{
		listeners = new ArrayList<GameListener>();
	}
	
	/**
	 * Initializes all of the necessary OpenGL components.
	 */
	public GameStarter()
	{
		GL.init();
	}
	
	/**
	 * Method that runs a loop that goes until the Frame
	 * is closed. The loop and render methods are called
	 * during each iteration of the loop.
	 */
	public void start()
	{
		running  = true;
		
		int fps  = 0;
		int dfps = 0;
		
		int pred = 0;
		
		init();
		
		long startTime  = System.currentTimeMillis();
		long newOldTime = System.nanoTime();
		long oldTime    = newOldTime;
		
		while (!Display.isCloseRequested() && running)
		{
			long newTime = System.currentTimeMillis();
			
			if (fps == 0 && dfps > 0)
			{
				newOldTime = System.nanoTime();
				
				int change = (int)(newOldTime - oldTime);
				
				System.out.println(newOldTime + " - " + oldTime + " = " + change + ", " + (1000000000 / change));
				
				if (change != 0)
				{
					pred = 1000000000 / change;
					
					Frame.setFPS(pred);
				}
			
				oldTime = newOldTime;
			}
			
			GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);

			loop(dfps);
			
			GL.resetMatrix();
			GL.initPerspective(Frame.getWidth(), Frame.getHeight(), 0.01f, 99999f);
			
			render3D(dfps);
			
			GL.resetMatrix();
			GL.initOrtho(Frame.getWidth(), Frame.getHeight());
//			GL11.glPushAttrib(GL11.GL_LIGHTING_BIT);
//			{
//				GL11.glDisable(GL11.GL_LIGHTING);
				render2D(dfps);
//			}
//			GL11.glPopAttrib();
			
			dfps++;
			
			if (startTime + 1000 <= newTime)
			{
				fps  = dfps;
				dfps = 0;
				
				startTime = newTime;
				
				Frame.setFPS(fps);
			}
			
			Mouse.update();
			Keyboard.update();
			
			Display.sync(Frame.getTargetFPS());
			Display.update();
		}
		
		Keyboard.destroy();
		Display.destroy();
		System.exit(0);
	}
	
	/**
	 * Method that stops the loop from running.
	 */
	public void stop()
	{
		running = false;
	}
	
	/**
	 * Method that notifies the game listeners by calling their
	 * looped() method.
	 */
	public static void notifyGameListeners()
	{
		for (int i = listeners.size() - 1; i >= 0; i--)
		{
			listeners.get(i).looped();
		}
	}
	
	/**
	 * Method that adds a GameListener to the list. During every
	 * iteration, the listeners looped method will be called.
	 * 
	 * @param listener The GameListener to add to the list.
	 */
	public static void addGameListener(GameListener listener)
	{
		listeners.add(listener);
	}
	
	/**
	 * Method that removes a GameListener from the list. The
	 * listener will no longer be called each loop.
	 * 
	 * @param listener The GameListener to remove from the list.
	 */
	public static void removeGameListener(GameListener listener)
	{
		listeners.remove(listener);
	}
	
	/**
	 * Method in which you initialize all of your OpenGL data.
	 */
	public abstract void init();
	
	/**
	 * Method that is used to render through the orthographic
	 * mode. All two deminsional drawing should be done in here.
	 * 
	 * @param dfps A counter that counts up to the fps of each
	 * 		frame.
	 */
	public abstract void render2D(int dfps);
	
	/**
	 * Method that is used to render through the perspective
	 * mode. All three deminsional drawing should be done in here.
	 * 
	 * @param dfps A counter that counts up to the fps of each
	 * 		frame.
	 */
	public abstract void render3D(int dfps);
	
	/**
	 * Method that is right before the render methods are called.
	 * All calculations should be done in here.
	 * 
	 * @param dfps A counter that counts up to the fps of each
	 * 		frame.
	 */
	public abstract void loop(int dfps);
}
