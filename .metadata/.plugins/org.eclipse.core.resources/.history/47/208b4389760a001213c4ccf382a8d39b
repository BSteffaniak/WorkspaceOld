package net.foxycorndog.jdoutilandroid;

import java.nio.ShortBuffer;

import net.foxycorndog.jdobaseandroid.Base;

import android.opengl.GLES10;
import android.opengl.GLES11;

public class VerticesBuffer extends LightBuffer
{
	private boolean     genIndices;
	
	private int         id, indicesId;
	
	private ShortBuffer indices;
	
	public VerticesBuffer(int size, int vertexSize)
	{
		super(size, vertexSize);
		
		init();
	}
	
	private void init()
	{
		if (Base.getDrawMode() == Base.ELEMENTS)
		{
			genIndices(GLES10.GL_TRIANGLES);
		}
		
		if (Base.usingVBO())
		{
			int ids[] = new int[2];
			
			GLES11.glGenBuffers(2, ids, 0);
			id        = ids[0];
			indicesId = ids[1];
			
			GLES11.glBindBuffer(GLES11.GL_ARRAY_BUFFER, id);
			GLES11.glBufferData(GLES11.GL_ARRAY_BUFFER, getBuffer().capacity(), getBuffer(), GLES11.GL_DYNAMIC_DRAW);
			
			GLES11.glBindBuffer(GLES11.GL_ELEMENT_ARRAY_BUFFER, indicesId);
			GLES11.glBufferData(GLES11.GL_ELEMENT_ARRAY_BUFFER, indices.capacity(), indices, GLES11.GL_DYNAMIC_DRAW);
		}
	}
	
	public void setData(int position, float elements[])
	{
		super.setData(position, elements);
		
		if (position % (4 * getStride()) == 0)
		{
			setIndices(((position / getStride()) / 4) * 3 * 2, position / getStride(), (elements.length / getStride()) / 4);
		}
	}
	
	private void setIndices(int position, int offset, int amount)
	{
		if (indices == null)
		{
			genIndices(GLES10.GL_TRIANGLES);
			
			//return;
		}
		
		indices.position(position);
		
		short ind[] = new short[3 * 2 * amount];
		
		int off2 = 0;
		
		for (int i = 0; i < amount; i ++)
		{
			ind[0 + off2] = (short)(0 + offset + off2);
			ind[1 + off2] = (short)(1 + offset + off2);
			ind[2 + off2] = (short)(2 + offset + off2);
			ind[3 + off2] = (short)(0 + offset + off2);
			ind[4 + off2] = (short)(2 + offset + off2);
			ind[5 + off2] = (short)(3 + offset + off2);
			
			off2 += 6;
		}
		
		indices.put(ind);
		
		indices.rewind();
	}
	
	public void checkIndices(int shape)
	{
		if (genIndices && indices == null)
		{
			genIndices(shape);
		}
	}
	
	public int getIndicesId()
	{
		return indicesId;
	}
	
	public void setGenIndices(boolean gen)
	{
		this.genIndices = gen;
	}
	
	private void genIndices(int shape)
	{
		if (shape != GLES10.GL_TRIANGLES)
		{
			return;
		}
		
		indices = ShortBuffer.allocate(((getBuffer().capacity() / getStride()) / 4) * 3 * 2);
		
		short ind[] = new short[indices.capacity()];
		
		int offset = 0;
		
		for (int i = 0; i < ind.length; i += 6)
		{
//			0 1 2
//			0 2 3
			ind[i + 0] = (short)(0 + offset);
			ind[i + 1] = (short)(1 + offset);
			ind[i + 2] = (short)(2 + offset);
			ind[i + 3] = (short)(0 + offset);
			ind[i + 4] = (short)(2 + offset);
			ind[i + 5] = (short)(3 + offset);
			
			offset += 4;
		}
		
		indices.put(ind);
		
		indices.rewind();
	}
	
	public ShortBuffer getIndices()
	{
		return indices;
	}
}