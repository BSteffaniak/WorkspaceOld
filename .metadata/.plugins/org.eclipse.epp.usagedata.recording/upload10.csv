what,kind,bundleId,bundleVersion,description,time
error,log,,,"Error in JDT Core during reconcile",1364132431919
executed,command,org.eclipse.ui,3.7.0.v20110928-1505,"org.eclipse.ui.file.save",1364132432286
error,log,,,"Exception occurred during compilation unit conversion:\r\n----------------------------------- SOURCE BEGIN -------------------------------------\r\npackage net.foxycorndog.arrowide;\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.awt.TextField;\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\nimport java.io.PrintStream;\r\nimport java.net.URLDecoder;\r\n\r\nimport net.foxycorndog.arrowide.color.ColorUtils;\r\nimport net.foxycorndog.arrowide.components.CodeField;\r\nimport net.foxycorndog.arrowide.components.CodeFieldEvent;\r\nimport net.foxycorndog.arrowide.components.CodeFieldListener;\r\nimport net.foxycorndog.arrowide.components.CompositeSizer;\r\nimport net.foxycorndog.arrowide.components.ConsoleField;\r\nimport net.foxycorndog.arrowide.components.ContentEvent;\r\nimport net.foxycorndog.arrowide.components.ContentListener;\r\nimport net.foxycorndog.arrowide.components.SizerListener;\r\nimport net.foxycorndog.arrowide.components.SplashScreen;\r\nimport net.foxycorndog.arrowide.components.TitleBar;\r\nimport net.foxycorndog.arrowide.components.menubar.Menubar;\r\nimport net.foxycorndog.arrowide.components.menubar.MenubarListener;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenu;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenuEvent;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenuListener;\r\nimport net.foxycorndog.arrowide.components.toolbar.Toolbar;\r\nimport net.foxycorndog.arrowide.components.toolbar.ToolbarListener;\r\nimport net.foxycorndog.arrowide.components.treemenu.TreeMenu;\r\nimport net.foxycorndog.arrowide.components.treemenu.TreeMenuListener;\r\nimport net.foxycorndog.arrowide.components.window.Window;\r\nimport net.foxycorndog.arrowide.console.ConsoleListener;\r\nimport net.foxycorndog.arrowide.console.ConsoleStream;\r\nimport net.foxycorndog.arrowide.dialog.Dialog;\r\nimport net.foxycorndog.arrowide.dialog.DialogFilter;\r\nimport net.foxycorndog.arrowide.dialog.FileBrowseDialog;\r\nimport net.foxycorndog.arrowide.dialog.FileInputDialog;\r\nimport net.foxycorndog.arrowide.dialog.OptionDialog;\r\nimport net.foxycorndog.arrowide.dialog.PreferencesDialog;\r\nimport net.foxycorndog.arrowide.dialog.DialogPanel;\r\nimport net.foxycorndog.arrowide.dialog.PropertiesDialog;\r\nimport net.foxycorndog.arrowide.dialog.TextInputDialog;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.AssemblyPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.CppPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.GeneralPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.JavaPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.PythonPanel;\r\nimport net.foxycorndog.arrowide.file.ConfigReader;\r\nimport net.foxycorndog.arrowide.file.FileUtils;\r\nimport net.foxycorndog.arrowide.formatter.Formatter;\r\nimport net.foxycorndog.arrowide.language.CompilerListener;\r\nimport net.foxycorndog.arrowide.language.Keyword;\r\nimport net.foxycorndog.arrowide.language.Language;\r\nimport net.foxycorndog.arrowide.language.CompileOutput;\r\nimport net.foxycorndog.arrowide.language.java.JavaLanguage;\r\nimport net.foxycorndog.arrowide.printer.TextPrinter;\r\nimport net.foxycorndog.arrowide.xml.Reader;\r\nimport net.foxycorndog.arrowide.xml.XMLItem;\r\n\r\nimport org.eclipse.swt.SWT;\r\nimport org.eclipse.swt.events.ControlEvent;\r\nimport org.eclipse.swt.events.ControlListener;\r\nimport org.eclipse.swt.events.DisposeEvent;\r\nimport org.eclipse.swt.events.DisposeListener;\r\nimport org.eclipse.swt.events.KeyEvent;\r\nimport org.eclipse.swt.events.KeyListener;\r\nimport org.eclipse.swt.events.MouseEvent;\r\nimport org.eclipse.swt.events.MouseListener;\r\nimport org.eclipse.swt.events.MouseMoveListener;\r\nimport org.eclipse.swt.events.PaintEvent;\r\nimport org.eclipse.swt.events.PaintListener;\r\nimport org.eclipse.swt.events.SelectionEvent;\r\nimport org.eclipse.swt.events.SelectionListener;\r\nimport org.eclipse.swt.graphics.Color;\r\nimport org.eclipse.swt.graphics.Font;\r\nimport org.eclipse.swt.graphics.FontData;\r\nimport org.eclipse.swt.graphics.GC;\r\nimport org.eclipse.swt.graphics.Image;\r\nimport org.eclipse.swt.graphics.Point;\r\nimport org.eclipse.swt.graphics.Rectangle;\r\nimport org.eclipse.swt.layout.FillLayout;\r\nimport org.eclipse.swt.layout.GridData;\r\nimport org.eclipse.swt.layout.GridLayout;\r\nimport org.eclipse.swt.opengl.GLCanvas;\r\nimport org.eclipse.swt.opengl.GLData;\r\nimport org.eclipse.swt.printing.PrintDialog;\r\nimport org.eclipse.swt.printing.Printer;\r\nimport org.eclipse.swt.printing.PrinterData;\r\nimport org.eclipse.swt.widgets.Button;\r\nimport org.eclipse.swt.widgets.Composite;\r\nimport org.eclipse.swt.widgets.DirectoryDialog;\r\nimport org.eclipse.swt.widgets.Display;\r\nimport org.eclipse.swt.widgets.Event;\r\nimport org.eclipse.swt.widgets.FileDialog;\r\nimport org.eclipse.swt.widgets.Label;\r\nimport org.eclipse.swt.widgets.Listener;\r\nimport org.eclipse.swt.widgets.Menu;\r\nimport org.eclipse.swt.widgets.MenuItem;\r\nimport org.eclipse.swt.widgets.Monitor;\r\nimport org.eclipse.swt.widgets.Shell;\r\nimport org.eclipse.swt.widgets.TabFolder;\r\nimport org.eclipse.swt.widgets.TabItem;\r\nimport org.eclipse.swt.widgets.Text;\r\nimport org.eclipse.swt.widgets.Widget;\r\nimport org.lwjgl.LWJGLException;\r\nimport org.lwjgl.Sys;\r\nimport org.lwjgl.opengl.GLContext;\r\n\r\n/**\r\n * Main class for the ArrowIDE program.\r\n * \r\n * @author\tBraden Steffaniak\r\n * @since\tFeb 13, 2013 at 4:46:00 PM\r\n * @since\tv0.7\r\n * @version\tFeb 13, 2013 at 4:46:00 PM\r\n * @version\tv0.7\r\n */\r\npublic class ArrowIDE implements ContentListener, CodeFieldListener, TabMenuListener\r\n{\r\n\tprivate boolean\t\t\t\t\t\t\t\tfilesNeedRefresh;\r\n\tprivate boolean\t\t\t\t\t\t\t\tcustom;\r\n\t\r\n\tprivate int\t\t\t\t\t\t\t\t\tcurId;\r\n\tprivate int\t\t\t\t\t\t\t\t\ttitleBarHeight;\r\n\tprivate int\t\t\t\t\t\t\t\t\toldTabId;\r\n\r\n\tprivate CodeField\t\t\t\t\t\t\tcodeField;\r\n\r\n\tprivate ConsoleField\t\t\t\t\t\tconsoleField;\r\n\r\n\tprivate String\t\t\t\t\t\t\t\tfileLocation;\r\n\r\n\tprivate Image\t\t\t\t\t\t\t\tfolderImage, fileImage,\r\n\t\t\tjavaFileImage, classFileImage, glslFileImage, txtFileImage,\r\n\t\t\trtfFileImage, exeFileImage, asmFileImage, cppFileImage, hFileImage;\r\n\r\n\tprivate PropertiesDialog\t\t\t\t\tproperties;\r\n\tprivate PreferencesDialog\t\t\t\t\tpreferences;\r\n\r\n\tprivate Composite\t\t\t\t\t\t\tcontentPanel;\r\n\t\r\n\tprivate Menubar\t\t\t\t\t\t\t\tmenubar;\r\n\r\n\tprivate TitleBar\t\t\t\t\t\t\ttitleBar;\r\n\t\r\n\tprivate Toolbar\t\t\t\t\t\t\t\ttoolbar;\r\n\r\n\tprivate TreeMenu\t\t\t\t\t\t\ttreeMenu;\r\n\t\r\n\tprivate CompositeSizer\t\t\t\t\t\ttreeMenuSizer, codeFieldSizer;\r\n\r\n\tprivate TabMenu\t\t\t\t\t\t\t\tfileTabs, consoleTabs;\r\n\r\n\tprivate ConsoleStream\t\t\t\t\t\tconsoleStream;\r\n\r\n\tprivate Dialog\t\t\t\t\t\t\t\tnewFolderDialog, newFileDialog,\r\n\t\t\tnewProjectDialog;\r\n\tprivate TextInputDialog\t\t\t\t\t\trenameFileDialog;\r\n\r\n\tprivate HashMap<Integer, String>\t\t\ttreeItemLocations;\r\n\tprivate HashMap<String, Integer>\t\t\ttreeItemIds;\r\n\tprivate HashMap<Integer, String>\t\t\ttreeItemDirectories;\r\n\tprivate HashMap<String, String>\t\t\t\tfileCache;\r\n\tprivate HashMap<String, Boolean>\t\t\tfileCacheSaved;\r\n\tprivate HashMap<Integer, String>\t\t\ttabFileLocations;\r\n\tprivate HashMap<String, Integer>\t\t\ttabFileIds;\r\n\tprivate HashMap<Integer, Integer>\t\t\ttabTopPixels;\r\n\tprivate HashMap<Integer, Point>\t\t\t\ttabSelection;\r\n//\tprivate HashMap<, Integer>\t\t\t\t\tconsoleTabIds;\r\n\tprivate HashMap<Integer, Program>\t\t\t\t\tconsoleTabPrograms;\r\n\t\r\n\tprivate ArrayList<Program>\t\t\t\t\tprograms;\r\n\r\n\tprivate static boolean\t\t\t\t\t\trestarting;\r\n\tprivate static boolean\t\t\t\t\t\texiting;\r\n\t\r\n\tprivate static int\t\t\t\t\t\t\tuntitledNumber;\r\n\t\r\n\tprivate static Window\t\t\t\t\t\twindow;\r\n\t\r\n\tprivate static SplashScreen\t\t\t\t\tsplash;\r\n\r\n\tprivate static String\t\t\t\t\t\tconfigLocation;\r\n\r\n\tpublic static final Display\t\t\t\t\tDISPLAY;\r\n\r\n\tpublic static final Color\t\t\t\t\tTITLE_BAR_BACKGROUND, TITLE_BAR_FOREGROUND, FOCUS_COLOR, NON_FOCUS_COLOR;\r\n\t\r\n\tpublic static final HashMap<String, String>\tCONFIG_DATA;\r\n\t\r\n\tpublic static final HashMap<String, HashMap<String, XMLItem[]>>\tPROJECT_PROPERTIES;\r\n\tpublic static final HashMap<String, HashMap<String, XMLItem[]>>\tPROJECT_CLASSPATHS;\r\n\t// public static final HashMap<Integer, String> CONFIG_LINE_NUMBER_DATA;\r\n\t// public static final HashMap<String, Integer> CONFIG_LINE_NUMBERS;\r\n\r\n\tpublic static final HashMap<String, Object>\tPROPERTIES;\r\n\t\r\n\tprivate static ArrayList<Thread>\t\t\tfileViewerThreads;\r\n\t\r\n\tprivate class Efficient\r\n\t{\r\n\t\tprivate int i;\r\n\t\t\r\n\t\tprivate String s;\r\n\t\t\r\n\t\tpublic Efficient(String s, int i)\r\n\t\t{\r\n\t\t\tthis.s = s;\r\n\t\t\tthis.i = i;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiate the {@link #DISPLAY display}, and the color palette.\r\n\t */\r\n\tstatic\r\n\t{\r\n\t\tDISPLAY = new Display();\r\n\t\t\r\n\t\tTITLE_BAR_BACKGROUND = new Color(DISPLAY, 240, 240, 240);\r\n\t\tTITLE_BAR_FOREGROUND = TITLE_BAR_BACKGROUND;\r\n\t\t\r\n\t\tFOCUS_COLOR = new Color(DISPLAY, 255, 255, 255);\r\n\t\tNON_FOCUS_COLOR = ColorUtils.lighten(TITLE_BAR_BACKGROUND, 10);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize the CONFIG_DATA HashMaps and set the os properties\r\n\t * in the PROPERTIES HashMap.\r\n\t */\r\n\tstatic\r\n\t{\r\n\t\tCONFIG_DATA             = new HashMap<String, String>();\r\n\t\t\r\n\t\tPROJECT_PROPERTIES      = new HashMap<String, HashMap<String, XMLItem[]>>();\r\n\t\tPROJECT_CLASSPATHS      = new HashMap<String, HashMap<String, XMLItem[]>>();\r\n//\t\tCONFIG_LINE_NUMBER_DATA = new HashMap<Integer, String>();\r\n//\t\tCONFIG_LINE_NUMBERS     = new HashMap<String, Integer>();\r\n\t\t\r\n\t\tPROPERTIES              = new HashMap<String, Object>();\r\n\t\t\r\n\t\tString osName = System.getProperty(""os.name"");\r\n\t\t\r\n\t\tif (osName.toLowerCase().contains(""mac""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""macosx"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.BORDER);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.COMMAND);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", """");\r\n\t\t\tPROPERTIES.put(""colon"", ';');\r\n\t\t}\r\n\t\telse if (osName.toLowerCase().contains(""win""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""windows"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.NONE);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.CTRL);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", "".exe"");\r\n\t\t\tPROPERTIES.put(""colon"", ';');\r\n\t\t}\r\n\t\telse if (osName.toLowerCase().contains(""lin""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""linux"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.NONE);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.CTRL);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", """");\r\n\t\t\tPROPERTIES.put(""colon"", ':');\r\n\t\t}\r\n\t\t\r\n\t\tsetArchitecture();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set the os.arch value for the {@link #PROPERTIES} variable.\r\n\t */\r\n\tprivate static void setArchitecture()\r\n\t{\r\n\t\tint bitness = 32;\r\n\t\t\r\n\t\tProcessBuilder b = new ProcessBuilder(new String[] { ""res/bitness"" });\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tProcess p = b.start();\r\n\t\t\t\r\n\t\t\tInputStream in = p.getInputStream();\r\n\t\t\t\r\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(in));\r\n\t\t\t\r\n\t\t\tString line = null;\r\n\t\t\t\r\n\t\t\twhile ((line = reader.readLine()) != null)\r\n\t\t\t{\r\n\t\t\t\tbitness = Integer.valueOf(line);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tPROPERTIES.put(""os.arch"", bitness);\r\n\t}\r\n\t\r\n\t/**\r\n\t * The initial starting point of the program. It is only called\r\n\t * whenever the program is started from scratch without a restart.\r\n\t * \r\n\t * @param args The command line arguments. (Unused)\r\n\t */\r\n\tpublic static void main(String args[])\r\n\t{\r\n\t\tstart();\r\n\t}\r\n\t\r\n\t/**\r\n\t * The constructor for this class. Initializes the window that is\r\n\t * used for programming.\r\n\t * \r\n\t * @param display The display to use.\r\n\t */\r\n\tpublic ArrowIDE(final Display display)\r\n\t{\r\n//\t\tSystem.out.println(map.get(""Contacts.Contact.ContactId"")[0].getContents());\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""window.custom""))\r\n\t\t{\r\n\t\t\tcustom = Boolean.valueOf(CONFIG_DATA.get(""window.custom""));\r\n\t\t}\r\n\t\t\r\n\t\tMonitor monitor = DISPLAY.getPrimaryMonitor();\r\n\t\tfinal Rectangle screenBounds = monitor.getBounds();\r\n\t\t\r\n\t\tint height = (int)(monitor.getBounds().height / 1.5f);\r\n\t\tint width  = (int)(monitor.getBounds().width / 1.5f);\r\n\t\t\r\n\t\twindow = new Window(DISPLAY, custom);//, SWT.SHELL_TRIM & (~SWT.RESIZE));\r\n\t\twindow.setSize(width, height);\r\n\t\t\r\n\t\tfinal Rectangle shellBounds = window.getBounds();\r\n\t\t \r\n\t\twindow.setLocation(screenBounds.width / 2 - shellBounds.width / 2, screenBounds.height / 2 - shellBounds.height / 2);\r\n\t\twindow.setTitle(""Arrow IDE"");\r\n\t\t\r\n\t\tPROPERTIES.put(""arrowide.location"", FileUtils.getParentFolder(configLocation));\r\n\t\t\r\n\t\t/**\r\n\t\t * Set up the OpenGL (lwjgl) capabilities for the program.\r\n\t\t */\r\n\t\t{\r\n\t\t\tSystem.setProperty(""org.lwjgl.librarypath"", PROPERTIES.get(""arrowide.location"") + ""/res/native/"" + PROPERTIES.get(""os.name"") + ""/"");\r\n\t\t\t\r\n\t\t\tComposite comp = new Composite(window.getShell(), SWT.NONE);\r\n\t\t\tcomp.setLayout(new FillLayout());\r\n\t\t\t\r\n\t\t\tGLData data = new GLData();\r\n\t\t\tdata.doubleBuffer = true;\r\n\t\t\tfinal GLCanvas canvas = new GLCanvas(comp, SWT.NONE, data);\r\n\t\t\t\r\n\t\t\tcanvas.setCurrent();\r\n\t\t\t\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tGLContext.useContext(canvas);\r\n\t\t\t}\r\n\t\t\tcatch(LWJGLException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""monitor.width"") && CONFIG_DATA.containsKey(""monitor.height""))\r\n\t\t{\r\n\t\t\twidth  = Integer.parseInt(CONFIG_DATA.get(""monitor.width""));\r\n\t\t\theight = Integer.parseInt(CONFIG_DATA.get(""monitor.height""));\r\n\t\t\t\r\n\t\t\tif (width == screenBounds.width && height == screenBounds.height)\r\n\t\t\t{\r\n\t\t\t\tif (CONFIG_DATA.containsKey(""window.width"") && CONFIG_DATA.containsKey(""window.height""))\r\n\t\t\t\t{\r\n\t\t\t\t\twidth  = Integer.parseInt(CONFIG_DATA.get(""window.width""));\r\n\t\t\t\t\theight = Integer.parseInt(CONFIG_DATA.get(""window.height""));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (width > 0 && height > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twindow.setSize(width, height);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (CONFIG_DATA.containsKey(""window.x"") && CONFIG_DATA.containsKey(""window.y""))\r\n\t\t\t\t{\r\n\t\t\t\t\tint x = Integer.parseInt(CONFIG_DATA.get(""window.x""));\r\n\t\t\t\t\tint y = Integer.parseInt(CONFIG_DATA.get(""window.y""));\r\n\t\t\t\t\t\r\n\t\t\t\t\twindow.setLocation(x, y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""monitor.width"", screenBounds.width + """");\r\n\t\tsetConfigDataValue(""monitor.height"", screenBounds.height + """");\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""window.fullscreen""))\r\n\t\t{\r\n\t\t\tboolean fullscreen = Boolean.valueOf(CONFIG_DATA.get(""window.fullscreen""));\r\n\t\t\t\r\n\t\t\twindow.setFullscreen(fullscreen);\r\n\t\t}\r\n\t\t\r\n\t\tif (!window.isFullscreen() && CONFIG_DATA.containsKey(""window.maximized""))\r\n\t\t{\r\n\t\t\tboolean maximized = Boolean.valueOf(CONFIG_DATA.get(""window.maximized""));\r\n\t\t\t\r\n\t\t\twindow.setMaximized(maximized);\r\n\t\t}\r\n\t\t\r\n\t\twindow.setBackground(new Color(display, 225, 225, 225));\r\n\t\t\r\n\t\tif (custom)\r\n\t\t{\r\n\t\t\twindow.setBorderColor(new Color(display, 215, 215, 215));\r\n\t\t\twindow.setBorderSize(3);\r\n\t\t}\r\n\t\t\r\n\t\tdisplay.addFilter(SWT.KeyDown, new Listener()\r\n\t\t{\r\n\t\t\tpublic void handleEvent(Event event)\r\n\t\t\t{\r\n\t\t\t\tif (event.keyCode == SWT.F11)\r\n\t\t\t\t{\r\n\t\t\t\t\twindow.setFullscreen(!window.isFullscreen());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tcontentPanel = window.getContentPanel();\r\n\t\tcontentPanel.setLocation(0, 0);\r\n\t\tcontentPanel.setSize(window.getClientArea().width, window.getClientArea().height);\r\n\t\tcontentPanel.setBackground(window.getBackground());\r\n\t\t\r\n\t\tif (custom)\r\n\t\t{\r\n\t\t\ttitleBar     = new TitleBar(window, 28, SWT.MIN | SWT.MAX | SWT.CLOSE | SWT.CENTER);\r\n\t\t\ttitleBar.setBackground(TITLE_BAR_BACKGROUND);\r\n\t\t\ttitleBar.setForeground(TITLE_BAR_FOREGROUND);\r\n\t\t\t\r\n\t\t\ttitleBarHeight = titleBar.getHeight();\r\n\t\t}\r\n\t\t\r\n//\t\tGridLayout b = new GridLayout();\r\n//\t\tb.makeColumnsEqualWidth = false;\r\n//\t\t\r\n//\t\tshell.setLayout(b);\r\n\t\t\r\n\t\tfileCache     = new HashMap<String, String>();\r\n\t\t\r\n\t\tcodeField     = new CodeField(contentPanel);\r\n\t\tconsoleField  = new ConsoleField(contentPanel);\r\n\t\t\r\n\t\tcodeField.addContentListener(this);\r\n\t\tcodeField.addCodeFieldListener(this);\r\n\t\tcodeField.setBackground(FOCUS_COLOR);\r\n\t\t\r\n\t\tint contentWidth  = (int)(contentPanel.getSize().x / 100f * 80);\r\n\t\tint conHeight     = (int)(contentPanel.getSize().y / 100f * 20);\r\n\t\tint toolbarHeight = (int)(25);\r\n\t\t\r\n\t\tcodeField.setSize(contentWidth, contentPanel.getSize().y - conHeight - toolbarHeight - 16);\r\n\t\tcodeField.setLocation(contentPanel.getSize().x - codeField.getWidth(), toolbarHeight);//contentPanel.getSize().y - codeField.getHeight());\r\n\t\tcodeField.setShowLineNumbers(true);\r\n\t\t\r\n\t\tconsoleField.setSize(contentWidth, conHeight - 5);\r\n\t\tconsoleField.setLocation(codeField.getBounds().x, codeField.getHeight() + codeField.getBounds().y + 5);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconsoleStream = new ConsoleStream(""log.txt"");\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tfolderImage       = new Image(display, new FileInputStream(""res/images/folderimage.png""));\r\n\t\t\tfileImage         = new Image(display, new FileInputStream(""res/images/fileimage.png""));\r\n\t\t\tjavaFileImage     = new Image(display, new FileInputStream(""res/images/javafileimage.png""));\r\n\t\t\tclassFileImage    = new Image(display, new FileInputStream(""res/images/classfileimage.png""));\r\n\t\t\tglslFileImage     = new Image(display, new FileInputStream(""res/images/glslfileimage.png""));\r\n\t\t\ttxtFileImage      = new Image(display, new FileInputStream(""res/images/txtfileimage.png""));\r\n\t\t\trtfFileImage      = new Image(display, new FileInputStream(""res/images/rtffileimage.png""));\r\n\t\t\texeFileImage      = new Image(display, new FileInputStream(""res/images/exefileimage.png""));\r\n\t\t\tasmFileImage      = new Image(display, new FileInputStream(""res/images/asmfileimage.png""));\r\n\t\t\tcppFileImage      = new Image(display, new FileInputStream(""res/images/cppfileimage.png""));\r\n\t\t\thFileImage        = new Image(display, new FileInputStream(""res/images/hfileimage.png""));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttabFileLocations  = new HashMap<Integer, String>();\r\n\t\ttabFileIds        = new HashMap<String, Integer>();\r\n\t\ttabTopPixels      = new HashMap<Integer, Integer>();\r\n\t\ttabSelection      = new HashMap<Integer, Point>();\r\n\t\t\r\n\t\tfileTabs = new TabMenu(contentPanel);\r\n\t\tfileTabs.setBackground(ColorUtils.darken(contentPanel.getBackground(), 20));\r\n\t\tfileTabs.addListener(this);\r\n\t\t\r\n\t\tconsoleTabs = new TabMenu(contentPanel);\r\n\t\tconsoleTabs.setBackground(ColorUtils.darken(contentPanel.getBackground(), 20));\r\n\t\tconsoleTabs.setMaxWidth(codeField.getWidth() + 2);\r\n\t\tconsoleTabs.addListener(this);\r\n\t\t\r\n\t\tprograms = new ArrayList<Program>();\r\n\t\tconsoleTabPrograms = new HashMap<Integer, Program>();\r\n\t\t\r\n\t    fileTabs.setMaxWidth(codeField.getWidth() + 2);\r\n\t\tcodeField.setLocation(codeField.getX(), codeField.getY() + fileTabs.getHeight());\r\n\t\tfileTabs.setLocation(codeField.getX(), 2);\r\n\t\t\r\n\t\tpreferences = new PreferencesDialog(contentPanel);\r\n\t\tpreferences.addDialogPanel(new GeneralPanel(preferences.getContentPanel(), this));\r\n\t\tpreferences.addDialogPanel(new JavaPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new CppPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new AssemblyPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new PythonPanel(preferences.getContentPanel()));\r\n\t\t\r\n\t\tproperties = new PropertiesDialog(contentPanel);\r\n\t\tproperties.addDialogPanel(new JavaPanel(properties.getContentPanel()));\r\n\t\t\r\n\t\tmenubar = new Menubar(contentPanel);\r\n\t\tmenubar.setBackground(TITLE_BAR_BACKGROUND);\r\n\t\tmenubar.setSize(contentPanel.getSize().x, 20);\r\n\t\tmenubar.addMenuHeader(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""New"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Open"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Save"", ""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Save as..."", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Refresh"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Print"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Restart"", ""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Exit"", ""FILE"");\r\n\r\n\t\tmenubar.addMenuSubItem(""Project"", ""FILE>New"");\r\n\t\tmenubar.addMenuSubItem(""Empty File"", ""FILE>New"");\r\n\t\t\r\n\t\tmenubar.addMenuHeader(""EDIT"");\r\n\t\tmenubar.addMenuSubItem(""Preferences"", ""EDIT"");\r\n\r\n\t\tmenubar.addMenuHeader(""PROJECT"");\r\n\t\tmenubar.addMenuSubItem(""Properties"", ""PROJECT"");\r\n\t\t\r\n\t\tmenubar.addListener(new MenubarListener()\r\n\t\t{\r\n\t\t\tpublic void subItemPressed(String subItemId)\r\n\t\t\t{\r\n\t\t\t\tif (subItemId.equals(""FILE>New>Empty File""))\r\n\t\t\t\t{\r\n\t\t\t\t\tnewFile();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>New>Project""))\r\n\t\t\t\t{\r\n\t\t\t\t\tnewProject();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Open""))\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Save""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Save as...""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(null);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Refresh""))\r\n\t\t\t\t{\r\n\t\t\t\t\trefreshFileViewer(false);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Print""))\r\n\t\t\t\t{\r\n\t\t\t\t\tPrintDialog dialog = new PrintDialog(window.getShell(), SWT.NONE);\r\n\t\t\t\t\tdialog.setScope(PrinterData.SELECTION);\r\n\t\t\t\t\t\r\n\t\t\t\t\tPrinterData data = dialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tFontData fd[] = codeField.getFont().getFontData().clone();\r\n\t\t\t\t\tfd[0].setHeight(10);\r\n\t\t\t\t\t\r\n\t\t\t\t\tTextPrinter printer = new TextPrinter(data, codeField.getText(), new Font(display, fd[0]), codeField.getStyles());\r\n\t\t\t\t\tprinter.setMargins(1, 1, 1, 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!printer.print())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tSystem.err.println(""Was not able to print!"");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Restart""))\r\n\t\t\t\t{\r\n\t\t\t\t\trestart();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Exit""))\r\n\t\t\t\t{\r\n\t\t\t\t\texit(window);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""EDIT>Preferences""))\r\n\t\t\t\t{\r\n\t\t\t\t\tpreferences.open();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""PROJECT>Properties""))\r\n\t\t\t\t{\r\n\t\t\t\t\tproperties.open();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\ttoolbar       = new Toolbar(contentPanel);\r\n\t\t\t\r\n\t\t\ttoolbar.setBackground(window.getBackground());\r\n\r\n\t\t\ttoolbar.addToolItem(""Save"", new Image(display, new FileInputStream(""res/images/savebutton.png"")));\r\n\t\t\ttoolbar.addSeparator();\r\n\t\t\ttoolbar.addToolItem(""Compile"", new Image(display, new FileInputStream(""res/images/compilebutton.png"")));\r\n\t\t\ttoolbar.addSeparator();\r\n\t\t\ttoolbar.addToolItem(""Run"", new Image(display, new FileInputStream(""res/images/runbutton.png"")));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttoolbar.addListener(new ToolbarListener()\r\n\t\t{\r\n\t\t\tpublic void toolItemPressed(String toolItemName)\r\n\t\t\t{\r\n\t\t\t\tif (toolItemName.equals(""Save""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t}\r\n\t\t\t\telse if (toolItemName.equals(""Compile""))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (fileLocation == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\topenFile();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (Language.canCompile(FileUtils.getFileType(fileLocation)))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tString outputLocation = FileUtils.getParentFolder(fileLocation) + ""/"";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tnew File(outputLocation).mkdirs();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tLanguage.compile(fileLocation, codeField.getRawText(), outputLocation, consoleStream);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (toolItemName.equals(""Run""))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (fileLocation == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tProgram program = Language.run(codeField.getLanguage(), fileLocation, consoleStream);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (program != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tprograms.add(program);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconsoleTabIds.put(, consoleTabs.addTab(program.getName());\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tupdateLayout();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tLanguage.init();\r\n\t\t\r\n\t\tLanguage.addCompilerListener(new CompilerListener()\r\n\t\t{\r\n\t\t\tpublic void compiled(final String files[], final CompileOutput outputs[], final PrintStream stream, String fileName)\r\n\t\t\t{\r\n\t\t\t\tfinal boolean isInViewer = treeItemLocations.containsKey(fileLocation);\r\n\t\t\t\t\r\n\t\t\t\tif (outputs[0].getResult() == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tdisplay.syncExec(new Runnable()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (stream != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tstream.println(""Compiled successfully."");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (isInViewer)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor (int i = 0; i < files.length; i ++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(files[i]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t{\r\n\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor (int i = 0; i < outputs.length; i++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (outputs[i].getResult() != 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcodeField.addError(outputs[i].getStartIndex(), outputs[i].getEndIndex());\r\n//\t\t\t\t\t\t\t\tSystem.out.print(outputs[i] + ""; "");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tSystem.out.println();\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tcodeField.highlightSyntax();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tfileViewerThreads    = new ArrayList<Thread>();\r\n\t\t\r\n\t\tfileCacheSaved        = new HashMap<String, Boolean>();\r\n\t\ttreeItemLocations     = new HashMap<Integer, String>();\r\n\t\ttreeItemIds           = new HashMap<String, Integer>();\r\n\t\ttreeItemDirectories   = new HashMap<Integer, String>();\r\n\t\t\r\n\t\ttreeMenu              = new TreeMenu(contentPanel);\r\n\t\ttreeMenu.setSize(contentPanel.getSize().x - codeField.getWidth() - 10, codeField.getHeight() + consoleField.getHeight());\r\n\t\ttreeMenu.setLocation(0, codeField.getY());\r\n\t\ttreeMenu.setBackground(NON_FOCUS_COLOR);\r\n\t\t\r\n\t\ttreeMenuSizer = new CompositeSizer(contentPanel, CompositeSizer.VERTICAL);\r\n\t\ttreeMenuSizer.setSize(5, treeMenu.getHeight());\r\n\t\ttreeMenuSizer.setLocation(treeMenu.getLocation().x + treeMenu.getWidth(), treeMenu.getLocation().y);\r\n\t\ttreeMenuSizer.setBackground(new Color(DISPLAY, 100, 100, 100));\r\n\t\ttreeMenuSizer.setForeground(new Color(DISPLAY, 230, 230, 230));\r\n\t\ttreeMenuSizer.setMinimumX(treeMenu.getLocation().x);\r\n\t\ttreeMenuSizer.addSizerListener(new SizerListener()\r\n\t\t{\r\n\t\t\tpublic void sizerMoved(int dx, int dy)\r\n\t\t\t{\r\n\t\t\t\ttreeMenu.setSize(treeMenu.getWidth() + dx, treeMenu.getHeight());\r\n\t\t\t\tcodeField.setSize(codeField.getWidth() - dx, codeField.getHeight());\r\n\t\t\t\tcodeField.setLocation(codeField.getX() + dx, codeField.getY());\r\n\t\t\t\t\r\n\t\t\t\tconsoleField.setSize(codeField.getWidth(), consoleField.getHeight());\r\n\t\t\t\tconsoleField.setLocation(codeField.getX(), consoleField.getLocation().y);\r\n\r\n\t\t\t\tcodeFieldSizer.setSize(codeField.getWidth(), 5);\r\n\t\t\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight());\r\n\t\t\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t\t\t\t\r\n\t\t\t\ttoolbar.setLocation(codeField.getX(), toolbar.getY());\r\n\t\t\t\tfileTabs.setLocation(codeField.getX(), fileTabs.getY());\r\n\t\t\t\tconsoleTabs.setLocation(codeField.getX(), consoleTabs.getY());\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tcodeFieldSizer = new CompositeSizer(contentPanel, CompositeSizer.HORIZONTAL);\r\n\t\tcodeFieldSizer.setSize(codeField.getWidth(), 3);\r\n\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight() + 1);\r\n\t\tcodeFieldSizer.setBackground(new Color(DISPLAY, 100, 100, 100));\r\n\t\tcodeFieldSizer.setForeground(new Color(DISPLAY, 230, 230, 230));\r\n\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t\tcodeFieldSizer.addSizerListener(new SizerListener()\r\n\t\t{\r\n\t\t\tpublic void sizerMoved(int dx, int dy)\r\n\t\t\t{\r\n\t\t\t\tcodeField.setSize(codeField.getWidth(), codeField.getHeight() + dy);\r\n\t\t\t\t\r\n\t\t\t\tconsoleField.setSize(codeField.getWidth(), consoleField.getHeight() - dy);\r\n\t\t\t\tconsoleField.setLocation(codeField.getX(), consoleField.getLocation().y + dy);\r\n\t\t\t\t\r\n\t\t\t\tconsoleTabs.setLocation(codeField.getX(), consoleTabs.getY() + dy);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tMenu m = new Menu(treeMenu);\r\n\t\ttreeMenu.setMenu(m);\r\n\t\t\r\n\t\tfinal MenuItem newFolder = new MenuItem(m, SWT.CASCADE);\r\n\t\tnewFolder.setText(""New Folder"");\r\n\t\t\r\n\t\tfinal MenuItem newFile = new MenuItem(m, SWT.CASCADE);\r\n\t\tnewFile.setText(""New File"");\r\n\t\t\r\n\t\tfinal MenuItem rename = new MenuItem(m, SWT.CASCADE);\r\n\t\trename.setText(""Rename"");\r\n\t\t\r\n\t\tfinal MenuItem delete = new MenuItem(m, SWT.CASCADE);\r\n\t\tdelete.setText(""Delete"");\r\n\t\t\r\n\t\tfinal ArrowIDE thisIDE = this;\r\n\t\t\r\n\t\tSelectionListener menuListener = new SelectionListener()\r\n\t\t{\r\n\t\t\tpublic void widgetDefaultSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tif (e.widget == delete)\r\n\t\t\t\t{\r\n\t\t\t\t\tint id = treeMenu.getSelection();\r\n//\t\t\t\t\t\r\n//\t\t\t\t\tif (treeItems.containsKey(id))\r\n//\t\t\t\t\t{\r\n//\t\t\t\t\t\tSystem.out.println(""is file"");\r\n//\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = treeItemLocations.get(id);\r\n\t\t\t\t\t\r\n\t\t\t\t\tdeleteFile(location);\r\n\r\n\t\t\t\t\tremoveFromFileViewer(location);\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == newFolder)\r\n\t\t\t\t{\r\n\t\t\t\t\tString preLoc = treeItemLocations.get(treeMenu.getSelection());\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (preLoc == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLoc = FileUtils.removeEndingSlashes(CONFIG_DATA.get(""workspace.location"")) + ""/"";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString preLocation = FileUtils.removeEndingSlashes(preLoc);\r\n\r\n\t\t\t\t\tif (FileUtils.isFile(preLocation))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLocation = FileUtils.getParentFolder(preLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tnewFolderDialog = new FileInputDialog(""Enter the folder name:"", ""Folder name:"", true, preLocation + ""/"", false);\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = newFolderDialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (location != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile f = new File(location);\r\n\t\t\t\t\t\tf.mkdirs();\r\n\r\n\t\t\t\t\t\taddToFileViewer(location);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == newFile)\r\n\t\t\t\t{\r\n\t\t\t\t\tString preLoc = treeItemLocations.get(treeMenu.getSelection());\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (preLoc == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLoc = FileUtils.removeEndingSlashes(CONFIG_DATA.get(""workspace.location"")) + ""/"";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString preLocation = FileUtils.removeEndingSlashes(preLoc);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (FileUtils.isFile(preLocation))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLocation = FileUtils.getParentFolder(preLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tnewFileDialog = new FileInputDialog(""Enter the file name:"", ""File name:"", false, preLocation + ""/"", false);\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = newFileDialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (location != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile f = new File(location);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tf.createNewFile();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\topenFile(location);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\taddToFileViewer(location);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (IOException e2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\te2.printStackTrace();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == rename)\r\n\t\t\t\t{\r\n\t\t\t\t\tfinal int selection\t\t= treeMenu.getSelection();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfinal String loc\t\t= treeItemLocations.get(selection);\r\n\t\t\t\t\t\r\n\t\t\t\t\tboolean willContinue\t= false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (fileCache.containsKey(loc))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (!fileCacheSaved.get(loc))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tString result = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tOptionDialog optDialog = new OptionDialog(""Save?"", ""Would you like to save before renaming?"");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tresult = optDialog.open();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (result != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif (result.equals(""yes""))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tsaveFile(loc);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\twillContinue\t= true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if (result.equals(""no""))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (willContinue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trenameFileDialog = new TextInputDialog(""Enter the new name:"", ""New name:"", FileUtils.getFileName(treeItemLocations.get(selection)));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\trenameFileDialog.addDialogFilter(new DialogFilter()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic String filter(String text)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttext = FileUtils.removeEndingSlashes(text.replace('\\\\', '/'));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor (int i = 0; i < text.length(); i ++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (text.charAt(i) == '/')\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\treturn ""The name must be in the same location."";\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tString newLoc\t\t= FileUtils.getParentFolder(loc) + ""/"" + text;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tboolean currentFile\t= text.equals(FileUtils.getFileName(loc));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (currentFile)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn ""The name must be different than the current name."";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tremoveFromFileViewer(loc);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tFile f = new File(loc);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tboolean successful = f.renameTo(new File(newLoc));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (successful)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (fileCache.containsKey(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileCache.put(newLoc, fileCache.remove(loc));\r\n\t\t\t\t\t\t\t\t\t\tfileCacheSaved.put(newLoc, fileCacheSaved.remove(loc));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (tabFileLocations.containsValue(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tint tabId = tabFileIds.remove(loc);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tfileTabs.setTabText(tabId, FileUtils.getFileName(newLoc));\r\n\t\t\t\t\t\t\t\t\t\ttabFileLocations.put(tabId, newLoc);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\ttabFileIds.put(newLoc, tabId);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (tabFileIds.containsKey(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ttabFileIds.put(newLoc, tabFileIds.remove(loc));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (currentFile)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileLocation = newLoc;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tcodeField.setLanguage(Language.getLanguage(fileLocation));\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tcodeField.highlightSyntax();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (loc.equals(fileLocation))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileLocation = newLoc;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tboolean before = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (fileCacheSaved.containsKey(newLoc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tbefore = fileCacheSaved.get(newLoc);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n//\t\t\t\t\t\t\t\t\trefreshFileViewer();\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(newLoc);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tfileCacheSaved.put(newLoc, before);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(loc);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tString result = renameFileDialog.open();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (result != null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tFileUtils.removeEndingSlashes(result.replace('\\\\', '/'));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\twidgetDefaultSelected(e);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tnewFolder.addSelectionListener(menuListener);\r\n\t\tnewFile.addSelectionListener(menuListener);\r\n\t\trename.addSelectionListener(menuListener);\r\n\t\tdelete.addSelectionListener(menuListener);\r\n\t\t\r\n\t\ttreeMenu.addListener(new TreeMenuListener()\r\n\t\t{\r\n\t\t\tpublic void treeItemDoubleClicked(int id)\r\n\t\t\t{\r\n\t\t\t\tif (!treeItemDirectories.containsKey(id))\r\n\t\t\t\t{\r\n\t\t\t\t\tString location = treeItemLocations.get(id);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile(location);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpublic void treeItemRightClicked(int id)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tpublic void treeItemSelected(int id)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\tconsoleStream.addConsoleListener(new ConsoleListener()\r\n\t\t{\r\n\t\t\tpublic void onPrintln(final Object o)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tif (o instanceof String)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsoleField.append((String)o);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tpublic void onPrint(Object o)\r\n\t\t\t{\r\n\t\t\t\tif (o instanceof String)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsoleField.append((String)o);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t    ControlListener shellListener = new ControlListener()\r\n\t\t{\r\n\t\t\tpublic void controlMoved(ControlEvent e)\r\n\t\t\t{\r\n\t\t\t\tsetConfigDataValue(""window.x"", window.getLocation().x + """");\r\n\t\t\t\tsetConfigDataValue(""window.y"", window.getLocation().y + """");\r\n\t\t\t}\r\n\r\n\t\t\t// TODO clean this crap up.\r\n\t\t\tpublic void controlResized(ControlEvent e)\r\n\t\t\t{\r\n\t\t\t\tupdateLayout();\r\n\t\t\t\t\r\n\t\t\t\tif (!window.isMaximized() && !window.isFullscreen())\r\n\t\t\t\t{\r\n\t\t\t\t\tsetConfigDataValue(""window.width"", window.getWidth() + """");\r\n\t\t\t\t\tsetConfigDataValue(""window.height"", window.getHeight() + """");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tsetConfigDataValue(""window.maximized"", window.isMaximized() + """");\r\n\t\t\t\t\r\n\t\t\t\tsetConfigDataValue(""window.fullscreen"", window.isFullscreen() + """");\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\twindow.addControlListener(shellListener);\r\n\t\t\r\n\t\tshellListener.controlResized(null);\r\n\t\t\r\n\t\twindow.addPaintListener(new PaintListener()\r\n\t\t{\r\n\t\t\tpublic void paintControl(PaintEvent e)\r\n\t\t\t{\r\n\t\t\t\te.gc.drawString(codeField.getSelection().x + """", 0, 50);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""last.tabs""))\r\n\t\t{\r\n\t\t\tString lastTabs[] = CONFIG_DATA.get(""last.tabs"").split("";"");\r\n\t\t\t\r\n\t\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < lastTabs.length; i++)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\topenFile(lastTabs[i], false, i == lastTabs.length - 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\tbuilder.append(lastTabs[i] + ';');\r\n\t\t\t\t}\r\n\t\t\t\tcatch (IOException e)\r\n\t\t\t\t{\r\n\t\t\t\t\t// If file wasnt found.. or something else.\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsetConfigDataValue(""last.tabs"", builder.toString());\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Updates the components locations in the frame.\r\n\t */\r\n\tprivate void updateLayout()\r\n\t{\r\n\t\tcontentPanel.setSize(window.getClientArea().width, window.getClientArea().height);\r\n\t\t\r\n\t\tint width     = (int)(contentPanel.getSize().x / 100f * 80);\r\n\t\tint conHeight = (int)(contentPanel.getSize().y / 100f * 20);\r\n\t\t\r\n\t\tmenubar.setSize(contentPanel.getSize().x, menubar.getHeight());\r\n\t\tmenubar.setLocation(0, titleBarHeight);\r\n\t\t\r\n\t\tcodeField.setSize(width, contentPanel.getSize().y - conHeight - toolbar.getHeight() - fileTabs.getY());\r\n\t\tcodeField.setLocation(contentPanel.getSize().x - codeField.getWidth(), fileTabs.getHeight() + fileTabs.getY());\r\n\t\t\r\n\t\ttoolbar.setSize(toolbar.getWidth(), 25);\r\n\t\ttoolbar.setLocation(codeField.getX(), menubar.getY() + menubar.getHeight());\r\n\t\t\r\n\t\tboolean cTabs = programs.size() > 0;\r\n\t\tint cOffset   = cTabs ? consoleTabs.getHeight() : 0;\r\n\t\t\r\n\t\tconsoleField.setSize(width, conHeight - 5 - cOffset);\r\n\t\tconsoleField.setLocation(codeField.getBounds().x, codeField.getHeight() + codeField.getBounds().y + 5 + cOffset);\r\n\t\tSystem.out.println(""!"" + consoleField.getLocation().y);\r\n\t\t\r\n//\t\ttabs.setWidth(codeField.getWidth() + 2);\r\n\t\tfileTabs.setLocation(codeField.getX(), toolbar.getY() + toolbar.getHeight() + 2);\r\n\t\tconsoleTabs.setLocation(consoleField.getLocation().x, consoleField.getLocation().y - cOffset);\r\n\t\tSystem.out.println(consoleTabs.getY());\r\n\t\t\r\n\t\ttreeMenu.setLocation(treeMenu.getLocation().x, codeField.getY());\r\n\t\ttreeMenu.setSize(contentPanel.getSize().x - codeField.getWidth() - 5, consoleField.getLocation().y + consoleField.getHeight() - codeField.getY());\r\n\t\t\r\n\t\ttreeMenuSizer.setSize(5, treeMenu.getHeight());\r\n\t\ttreeMenuSizer.setLocation(treeMenu.getLocation().x + treeMenu.getWidth(), treeMenu.getLocation().y);\r\n\r\n\t\tcodeFieldSizer.setSize(codeField.getWidth(), 5);\r\n\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight());\r\n\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t}\r\n\t\r\n\t/**\r\n\t * The start method that is used to start up the whole ArrowIDE\r\n\t * program. Creates the window and puts the stuff in it.\r\n\t */\r\n\tpublic static void start()\r\n\t{\r\n//\t\tsplash = new Shell(display, SWT.ON_TOP);\r\n//\t\tsplash.setSize(largeIcon.getBounds().width, largeIcon.getBounds().height);\r\n//\t\tsplash.setLocation(screenBounds.width / 2 - splash.getSize().x / 2, screenBounds.height / 2 - splash.getSize().y / 2);\r\n//\t\t\r\n//\t\tLabel splashImage = new Label(splash, SWT.NONE);\r\n//\t\tsplashImage.setSize(splash.getSize());\r\n//\t\tsplashImage.setImage(largeIcon);\r\n\t\t\r\n//\t\tsplash = new SplashScreen(""res/images/iconlarge.png"", 3000);\r\n\t\t\r\n//\t\tsplash.open(3000);\r\n\t\t\r\n\t\tuntitledNumber = 0;\r\n\t\t\r\n\t\tArrowIDE ide = null;\r\n\r\n\t\tconfigLocation       = new File(""arrow.config"").getAbsolutePath().replace('\\\\', '/');\r\n\t\t\r\n\t\tcreateConfigData();\r\n\t\t\r\n\t\tif (workspaceCreated())\r\n\t\t{\r\n\t\t\tide = openIDE();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tchooseWorkspace();\r\n\t\t\t\r\n\t\t\tide = openIDE();\r\n\t\t}\r\n\t\t\r\n//\t\tSystem.out.println(OS.SendMessage(shell.handle, OS.EM_SETSEL, 5, 9));//new TCHAR(0, ""2dasdf"", true)));\r\n\t\t\r\n\t\twindow.setFocus();\r\n\t\twindow.forceActive();\r\n\t\twindow.forceFocus();\r\n\t\twindow.setActive();\r\n\t\t\r\n\t\twhile (!window.isDisposed())\r\n\t\t{\r\n\t\t\tif (!DISPLAY.readAndDispatch())\r\n\t\t\t{\r\n\t\t\t\tide.update();\r\n//\t\t\t\tsplash.update();\r\n\t\t\t\t\r\n\t\t\t\tDISPLAY.sleep();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (!restarting)\r\n\t\t{\r\n\t\t\texit(window);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create a new ArrowIDE and then open it.\r\n\t * \r\n\t * @return The created ArrowIDE object.\r\n\t */\r\n\tpublic static ArrowIDE openIDE()\r\n\t{\r\n\t\tString location = CONFIG_DATA.get(""workspace.location.relative"");\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tlocation = FileUtils.getAbsolutePath(location);\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t\texit(window);\r\n\t\t}\r\n\t\t\r\n\t\tCONFIG_DATA.put(""workspace.location"", location);\r\n\t\t\r\n\t\tArrowIDE ide = new ArrowIDE(DISPLAY);\r\n\t\t\r\n\t\twindow.open();\r\n\t\t\r\n\t\tImage largeIcon = null;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tlargeIcon = new Image(DISPLAY, new FileInputStream(""res/images/iconlarge.png""));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\t\twindow.setIcon(largeIcon);\r\n\t\t\r\n\t\tide.refreshFileViewer(true);\r\n\t\t\r\n\t\treturn ide;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Restarts the program to a fresh state.\r\n\t */\r\n\tpublic static void restart()\r\n\t{\r\n\t\trestarting = true;\r\n\t\t\r\n\t\twindow.dispose();\r\n\t\t\r\n\t\tstart();\r\n\t\t\r\n\t\trestarting = false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * The method that is called right before the exiting of the program.\r\n\t * \r\n\t * @param shell The window to close (The main window).\r\n\t */\r\n\tpublic static void exit(Window shell)\r\n\t{\r\n\t\texiting = true;\r\n\t\t\r\n\t\tif (shell != null)\r\n\t\t{\r\n\t\t\tshell.dispose();\r\n\t\t}\r\n\t\t\r\n\t\tif (fileViewerThreads != null)\r\n\t\t{\r\n\t\t\tfor (int i = fileViewerThreads.size() - 1; i >= 0; i--)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tfileViewerThreads.get(i).join();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (InterruptedException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tDisplay.getDefault().close();\r\n\t\t\r\n\t\tSystem.exit(0);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method used to choose the Workspace location. Sets the value of\r\n\t * the absolute location in the workspace.location key for the {@link #CONFIG_DATA}.\r\n\t */\r\n\tpublic static void chooseWorkspace()\r\n\t{\r\n\t\tDialogFilter filter = new DialogFilter()\r\n\t\t{\r\n\t\t\tpublic String filter(String text)\r\n\t\t\t{\r\n\t\t\t\tFile f = new File(text);\r\n\t\t\t\t\r\n\t\t\t\tif (!f.exists())\r\n\t\t\t\t{\r\n\t\t\t\t\treturn ""The directory must exist."";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tFileBrowseDialog chooseWorkspace = new FileBrowseDialog(""Choose your project workspace folder:"", ""Workspace:"", FileBrowseDialog.DIRECTORY);\r\n\t\tchooseWorkspace.addDialogFilter(filter);\r\n\t\t\r\n\t\tString location = chooseWorkspace.open();\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\texit(window);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""workspace.location.relative"", location);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tsetConfigDataValue(""workspace.location"", FileUtils.getAbsolutePath(location));\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns whether a workspace has been located or created.\r\n\t * \r\n\t * @return Whether the workspace has been located or created.\r\n\t */\r\n\tpublic static boolean workspaceCreated()\r\n\t{\r\n\t\tFile workspaceDirectory = null;\r\n\t\t\r\n\t\tif (!CONFIG_DATA.containsKey(""workspace.location""))\r\n\t\t{\r\n\t\t\tchooseWorkspace();\r\n\t\t}\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tsetConfigDataValue(""workspace.location"", FileUtils.getAbsolutePath(CONFIG_DATA.get(""workspace.location.relative"")));\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tworkspaceDirectory = new File(CONFIG_DATA.get(""workspace.location""));\r\n\t\t\r\n\t\treturn workspaceDirectory.exists();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that appends the given String to the value of the key given.\r\n\t * \r\n\t * @param key\tThe key to append to.\r\n\t * @param value\tThe value to append.\r\n\t */\r\n\tpublic static synchronized void appendConfigDataValue(String key, String value)\r\n\t{\r\n\t\tString prev = """";\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(key))\r\n\t\t{\r\n\t\t\tprev = CONFIG_DATA.get(key);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(key, prev + value);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set a CONFIG_DATA value in the HashMap and the arrow.config file.\r\n\t * If the key is not already in the file, it will add it to the end.\r\n\t * \r\n\t * @param key The key of the property to set.\r\n\t * @param value The value of the property to set.\r\n\t */\r\n\tpublic static synchronized void setConfigDataValue(String key, String value)\r\n\t{\r\n\t\tboolean added = false;\r\n\t\t\r\n\t\tCONFIG_DATA.put(key, value);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tPrintWriter p = new PrintWriter(new FileWriter(configLocation));\r\n\t\t\t\r\n\t\t\tString keys[] = CONFIG_DATA.keySet().toArray(new String[0]);\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < CONFIG_DATA.size(); i ++)\r\n\t\t\t{\r\n\t\t\t\tString lineKey   = null;\r\n\t\t\t\tString lineValue = null;\r\n\t\t\t\t\r\n\t\t\t\tlineKey          = keys[i];\r\n\t\t\t\t\r\n\t\t\t\tif (lineKey.equals(key))\r\n\t\t\t\t{\r\n\t\t\t\t\tlineValue = CONFIG_DATA.get(lineKey);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tlineValue = CONFIG_DATA.get(lineKey);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tp.print(lineKey + ""="" + lineValue + (i == CONFIG_DATA.size() - 1 ? """" : ""\\r\\n""));\r\n\t\t\t}\r\n\t\t\r\n\t\t\tp.close();\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates and initializes the CONFIG_DATA. Puts all of the correct\r\n\t * values into the HashMap.\r\n\t */\r\n\tprivate static void createConfigData()\r\n\t{\r\n\t\tFile file = new File(configLocation);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tConfigReader.read(configLocation, CONFIG_DATA);\r\n\t\t\t\r\n\t\t\tif (!CONFIG_DATA.containsKey(""workspace.location""))\r\n\t\t\t{\r\n\t\t\t\tPrintWriter writer;\r\n\t\t\t\twriter = new PrintWriter(new FileWriter(configLocation));\r\n\t\t\t\t\r\n\t\t\t\twriter.print(""workspace.location="");\r\n\t\t\t\t\r\n\t\t\t\twriter.close();\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that checks to see if the given location is a valid\r\n\t * project. If it is, then load all of the classpath and\r\n\t * project properties into the {@link #PROJECT_PROPERTIES} and\r\n\t * the classpaths into the {@link #PROJECT_CLASSPATHS}.\r\n\t * \r\n\t * @param location The location of the root folder of the project\r\n\t * \t\tto check.\r\n\t */\r\n\tpublic static void checkProject(String location)\r\n\t{\r\n\t\tlocation = FileUtils.removeEndingSlashes(location);\r\n\t\t\r\n\t\tString propsLocation = location + ""/.properties"";\r\n\t\tString cpLocation = location + ""/.classpath"";\r\n\t\t\r\n\t\tFile props = new File(propsLocation);\r\n\t\tFile cp = new File(cpLocation);\r\n\t\t\r\n\t\tif (props.isFile())\r\n\t\t{\r\n\t\t\tif (!PROJECT_PROPERTIES.containsKey(propsLocation))\r\n\t\t\t{\r\n\t\t\t\tHashMap<String, XMLItem[]> map = Reader.read(propsLocation);\r\n\t\t\t\t\r\n\t\t\t\tPROJECT_PROPERTIES.put(propsLocation, map);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (cp.isFile())\r\n\t\t{\r\n\t\t\tif (!PROJECT_CLASSPATHS.containsKey(cpLocation))\r\n\t\t\t{\r\n\t\t\t\tHashMap<String, XMLItem[]> map = Reader.read(cpLocation);\r\n\t\t\t\t\r\n\t\t\t\tPROJECT_CLASSPATHS.put(cpLocation, map);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a Dialog to ask for the project name. Next it creates a\r\n\t * directory/folder for the project and refreshes the file viewer.\r\n\t */\r\n\tpublic void newProject()\r\n\t{\r\n\t\tnewProjectDialog = new FileInputDialog(""Enter the name of your project:"", ""Project name:"", """", true, CONFIG_DATA.get(""workspace.location""), false);\r\n\t\t\r\n\t\tString location  = newProjectDialog.open();\r\n\t\t\r\n\t\tif (location != null)\r\n\t\t{\r\n\t\t\tFile f = new File(location);\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/bin"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/res"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/src"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tf = new File(location + ""/.classpath"");\r\n\t\t\t\tf.createNewFile();\r\n\t\t\t\r\n\t\t\t\tf = new File(location + ""/.properties"");\r\n\t\t\t\tf.createNewFile();\r\n\t\t\t}\r\n\t\t\tcatch (IOException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\r\n\t\t\taddToFileViewer(location);\r\n\t\t\taddToFileViewer(location + ""/bin"");\r\n\t\t\taddToFileViewer(location + ""/res"");\r\n\t\t\taddToFileViewer(location + ""/src"");\r\n\t\t\taddToFileViewer(location + ""/.classpath"");\r\n\t\t\taddToFileViewer(location + ""/.properties"");\r\n\t\t\trefreshFileViewer(location, false);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates new file and saves the old one. Switches to the new file\r\n\t * for editing automatically.\r\n\t */\r\n\tpublic void newFile()\r\n\t{\r\n\t\tcodeField.setText("""");\r\n\t\tcodeField.setLanguage(0);\r\n\t\t\r\n\t\tString location = ""Untitled"" + untitledNumber++;\r\n\t\t\r\n\t\tfileLocation = location;\r\n\t\t\r\n\t\taddTab(location, location);\r\n\t\t\r\n\t\tsetFileSaved(location, false);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new FileDialog at the absolute path of the workspace\r\n\t * location.\r\n\t * \r\n\t * @return The created, unopened FileDialog at the workspace path\r\n\t * \t\tused for opening files.\r\n\t */\r\n\tpublic FileDialog openFileBrowseDialog()\r\n\t{\r\n\t\tString location = null;\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""dialog.location""))\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""dialog.location"");\r\n\t\t\t\r\n\t\t\tif (!new File(location).exists())\r\n\t\t\t{\r\n\t\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t}\r\n\t\t\r\n\t\treturn openFileBrowseDialog(location);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiates a new FileDialog set for all types of files to be\r\n\t * set at the specified location.\r\n\t * \r\n\t * @param relativeLocation The location for the FileDialog to start.\r\n\t * @return The created, unopened FileDialog used for opening files.\r\n\t */\r\n\tpublic FileDialog openFileBrowseDialog(String location)\r\n\t{\r\n\t\tFileDialog dialog = new FileDialog(window.getShell(), SWT.OPEN | SWT.MULTI);\r\n\t\tdialog.setFilterNames(new String[] { ""All Files (*)"" });\r\n\t\tdialog.setFilterExtensions(new String[] { ""*"" });\r\n\t\tdialog.setFilterPath(location);\r\n\t\t\r\n\t\treturn dialog;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Open a file located at the specified location.\r\n\t * \r\n\t * @param location The location of the file to open.\r\n\t */\r\n\tpublic void openFile(String location) throws FileNotFoundException\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\topenFile(location, true, true);\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\tif (e instanceof FileNotFoundException)\r\n\t\t\t{\r\n\t\t\t\tthrow (FileNotFoundException)e;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that opens a file at the specified location and also\r\n\t * takes the option whether or not to cache the save the fileLocation\r\n\t * in the {@link #CONFIG_DATA} for reuse when the IDE is restarted.\r\n\t * \r\n\t * @param\tlocation The location of the file to open.\r\n\t * @param\tcache Whether or not to save the file for use after restart.\r\n\t * @param \tsetLanguage Whether or not to set the language of the codeField.\r\n\t * @throws\tFileNotFoundException Thrown if the file can not be found.\r\n\t * @throws\tIOException Thrown if there was trouble reading or writing.\r\n\t */\r\n\tpublic void openFile(String location, boolean cache, boolean setLanguage) throws FileNotFoundException, IOException\r\n\t{\r\n\t\tlocation = location.replace('\\\\', '/');\r\n\t\t\r\n\t\tboolean alreadyOpen = fileCache.containsKey(location);\r\n\t\t\r\n\t\tif (oldTabId != 0)\r\n\t\t{\r\n\t\t\ttabTopPixels.put(oldTabId, codeField.getTopPixel());\r\n\t\t\ttabSelection.put(oldTabId, codeField.getSelection());\r\n\t\t}\r\n\t\t\r\n\t\tif (alreadyOpen)\r\n\t\t{\r\n\t\t\tcodeField.setText(fileCache.get(location), true, true);\r\n\t\t\t\r\n\t\t\tcodeField.setLanguage(Language.getLanguage(location));\r\n\t\t\t\r\n\t\t\tcodeField.redraw();\r\n\t\t\t\r\n\t\t\tint tabId = tabFileIds.get(location);\r\n\t\t\t\r\n\t\t\tString oldLocation = fileLocation;\r\n\t\t\t\r\n\t\t\tfileLocation = location;\r\n\t\t\t\r\n\t\t\tfileTabs.setSelection(tabId);\r\n\t\t\t\r\n\t\t\tif (!location.equals(oldLocation))\r\n\t\t\t{\r\n\t\t\t\toldTabId = tabId;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tFile file = new File(location);\r\n\t\t\t\r\n\t\t\tif (file.isDirectory())\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tBufferedReader reader = new BufferedReader(new FileReader(file));\r\n\t\t\t\r\n\t\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\t\r\n\t\t\tString line = """";\r\n\t\t\t\r\n\t\t\twhile ((line = reader.readLine()) != null)\r\n\t\t\t{\r\n\t\t\t\tbuilder.append(line + ""\\r\\n"");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treader.close();\r\n\t\t\t\r\n\t\t\tif (builder.length() > 0)\r\n\t\t\t{\r\n\t\t\t\tbuilder.deleteCharAt(builder.length() - 1);\r\n\t\t\t\tbuilder.deleteCharAt(builder.length() - 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString fileContents = builder.toString();\r\n\t\t\t\r\n\t\t\tfileCache.put(location, fileContents);\r\n\t\t\tfileCacheSaved.put(location, true);\r\n\t\t\t\r\n\t\t\tcodeField.setText(fileContents, true);\r\n\t\t\t\r\n\t\t\tcodeField.redraw();\r\n\t\t\t\r\n\t\t\tif (!location.equals(fileLocation))\r\n\t\t\t{\r\n\t\t\t\taddTab(location, cache);\r\n\t\t\t\t\r\n\t\t\t\tif (fileLocation != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tint tabId = tabFileIds.get(location);\r\n\t\t\t\t\t\r\n\t\t\t\t\toldTabId = tabId;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileLocation = location;\r\n\t\t}\r\n\t\t\r\n\t\tif (setLanguage)\r\n\t\t{\r\n\t\t\tcodeField.setLanguage(Language.getLanguage(location));\r\n\t\t}\r\n\t\t\r\n\t\tcodeField.setFocus();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Opens a FileDialog to search for a file to open, then opens\r\n\t * the result.\r\n\t */\r\n\tpublic void openFile() throws FileNotFoundException\r\n\t{\r\n\t\tFileDialog dialog = openFileBrowseDialog();\r\n\t\t\r\n\t\tString location   = dialog.open();\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tlocation           = location.replace('\\\\', '/');\r\n\t\t\r\n\t\tString parent      = FileUtils.getParentFolder(location) + ""/"";\r\n\t\t\r\n\t\tString fileNames[] = dialog.getFileNames();\r\n\t\t\r\n\t\tfor (int i = 0; i < fileNames.length; i ++)\r\n\t\t{\r\n\t\t\topenFile(parent + fileNames[i]);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""dialog.location"", parent);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new FileDialog at the absolute path of the workspace\r\n\t * location.\r\n\t * \r\n\t * @return The created, unopened FileDialog at the workspace path\r\n\t * \t\tused for saving.\r\n\t */\r\n\tpublic FileDialog openSaveDialog()\r\n\t{\r\n\t\tString location = null;\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""dialog.location""))\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""dialog.location"");\r\n\t\t\t\r\n\t\t\tif (!new File(location).exists())\r\n\t\t\t{\r\n\t\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t}\r\n\t\t\r\n\t\treturn openSaveDialog(location);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiates a new FileDialog set for all types of files to be\r\n\t * set at the specified location.\r\n\t * \r\n\t * @param relativeLocation The location for the FileDialog to start.\r\n\t * @return The created, unopened FileDialog used for saving.\r\n\t */\r\n\tpublic FileDialog openSaveDialog(String location)\r\n\t{\r\n\t\tFileDialog dialog = new FileDialog(window.getShell(), SWT.SAVE);\r\n\t\tdialog.setFilterNames(new String[] { ""All Files (*)"" });\r\n\t\tdialog.setFilterExtensions(new String[] { ""*"" });\r\n\t\tdialog.setFilterPath(location);\r\n\t\t\r\n\t\treturn dialog;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Saves a file located at the specified location.\r\n\t * \r\n\t * @param location The location of the file to open.\r\n\t */\r\n\tpublic void saveFile(String location)\r\n\t{\r\n\t\tif (fileLocation == null && location == null)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\topenFile();\r\n\t\t\t}\r\n\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (location != null)\r\n\t\t{\r\n\t\t\tlocation = location.replace('\\\\', '/');\r\n\t\t}\r\n\t\t\r\n\t\tif (location == null || location.startsWith(""Untitled""))\r\n\t\t{\r\n\t\t\tboolean hasTab = tabFileIds.containsKey(location);\r\n\t\t\tint     tabId  = 0;\r\n\t\t\t\r\n\t\t\tif (hasTab)\r\n\t\t\t{\r\n\t\t\t\ttabId = tabFileIds.get(location);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString oldLoc = location;\r\n\t\t\t\r\n\t\t\tFileDialog dialog = openSaveDialog();\r\n\t\t\tlocation = dialog.open();\r\n\t\t\t\r\n\t\t\tif (location != null)\r\n\t\t\t{\r\n\t\t\t\tlocation = location.replace('\\\\', '/');\r\n\t\t\t\t\r\n\t\t\t\tif (hasTab)\r\n\t\t\t\t{\r\n\t\t\t\t\tString fileName = FileUtils.getFileName(location);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttabFileIds.remove(oldLoc);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfileTabs.setTabText(tabId, fileName);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttabFileIds.put(location, tabId);\r\n\t\t\t\t\ttabFileLocations.put(tabId, location);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (fileLocation == null)\r\n\t\t{\r\n\t\t\tfileLocation = """";\r\n\t\t}\r\n\t\t\r\n\t\tboolean saved\t\t= false;\r\n\t\t\r\n\t\tboolean currentFile = location.equals(fileLocation);\r\n\t\r\n\t\tif (fileCacheSaved.containsKey(fileLocation))\r\n\t\t{\r\n\t\t\tsaved = fileCacheSaved.get(fileLocation);\r\n\t\t}\r\n\t\t\r\n\t\tFileUtils.writeFile(location, codeField.getWritableText());\r\n\t\t\r\n\t\tfileLocation\t  = location;\r\n\t\t\r\n\t\tcodeField.setLanguage(Language.getLanguage(fileLocation));\r\n\t\t\r\n\t\tboolean highlight = codeField.getLanguage() == 0;\r\n\t\t//TODO: did if rog et something?\r\n//\t\tSystem.out.println(""done"");\r\n\t\tif (highlight)\r\n\t\t{\r\n\t\t\tcodeField.highlightSyntax();\r\n\t\t}\r\n//\t\tSystem.out.println(""done2"");\r\n\t\t\r\n\t\tif (currentFile)\r\n\t\t{\r\n\t\t\tsetFileSaved(location, true);\r\n\t\t}\r\n\t\t\r\n\t\tboolean isInViewer = treeItemLocations.containsKey(fileLocation);\r\n\t\t\r\n\t\tif (isInViewer)\r\n\t\t{\r\n\t\t\taddToFileViewer(location);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that adds the file at the specified location to file viewer.\r\n\t * Faster than refreshing the whole doggone file viewer.\r\n\t * \r\n\t * @param location The location of the file to add.\r\n\t */\r\n\tpublic void addToFileViewer(String location)\r\n\t{\r\n\t\tif (treeItemLocations.containsValue(location))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tFile file     = new File(location);\r\n\r\n\t\tboolean isDirectory = file.isDirectory();\r\n\t\t\r\n\t\tString name   = FileUtils.getFileName(location);\r\n\t\t\r\n\t\tImage img     = isDirectory ? folderImage : getFileImage(location);\r\n\t\t\r\n\t\tString parentLocation = FileUtils.getParentFolder(location);\r\n\t\t\r\n\t\tint parentId = 0;\r\n\t\t\r\n\t\tif (parentLocation.equals(CONFIG_DATA.get(""workspace.location"")))\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tparentId = treeItemIds.get(parentLocation);\r\n\t\t}\r\n\t\t\r\n\t\tint id        = treeMenu.addItem(parentId, name, img);\r\n\t\t\r\n\t\tif (fileCacheSaved.containsKey(location))\r\n\t\t{\r\n\t\t\tfileCacheSaved.put(location, true);\r\n\t\t}\r\n\r\n\t\ttreeItemLocations.put(id, location);\r\n\t\ttreeItemIds.put(location, id);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to remove the file at the specified location from the file\r\n\t * viewer. Faster than refreshing the whole doggone file viewer.\r\n\t * \r\n\t * @param location The location of the file to remove.\r\n\t */\r\n\tpublic void removeFromFileViewer(String location)\r\n\t{\r\n\t\tint id = treeItemIds.get(location);\r\n\t\t\r\n\t\ttreeItemDirectories.remove(id);\r\n\t\ttreeItemIds.remove(location);\r\n\t\ttreeItemLocations.remove(id);\r\n\t\t\r\n\t\tif (treeMenu.containsItem(id))\r\n\t\t{\r\n\t\t\ttreeMenu.removeItem(id);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Refresh the file viewer to all of the updated file names.\r\n\t * If a file has been added, add it to the\r\n\t * {@link #treeMenu file viewer}.\r\n\t * \r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(boolean ignoreRemove)\r\n\t{\r\n\t\trefreshFileViewer(CONFIG_DATA.get(""workspace.location""), 0, ignoreRemove);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to refresh the files within the directory of the specified\r\n\t * location.\r\n\t * \r\n\t * @param location The location of the root directory to refresh.\r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(String location, boolean ignoreRemove)\r\n\t{\r\n\t\tint parentId = treeItemIds.get(location);\r\n\t\t\r\n\t\trefreshFileViewer(location, parentId, ignoreRemove);\r\n\t}\r\n\r\n\t/**\r\n\t * Method to refresh the files within the directory of the specified\r\n\t * location.\r\n\t * \r\n\t * @param location The location of the root directory to refresh.\r\n\t * @param parentId The id of the TreeMenu item to refresh.\r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(final String location, final int parentId, final boolean ignoreRemove)\r\n\t{\r\n\t\tThread refreshThread = new Thread()\r\n\t\t{\r\n\t\t\tpublic void run()\r\n\t\t\t{\r\n\t\t\t\tFile parent  = new File(location);\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tfindSubFiles(parent, parentId, true);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (IOException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\texit(window);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tString locations[] = treeItemLocations.values().toArray(new String[0]);\r\n\t\t\t\t\r\n\t\t\t\tif (!ignoreRemove)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (int i = 0; i < locations.length; i ++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile file = new File(locations[i]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (!file.exists())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfinal int id = treeItemIds.get(locations[i]);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\ttreeItemIds.remove(locations[i]);\r\n\t\t\t\t\t\t\ttreeItemLocations.remove(id);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (treeMenu.containsItem(id))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ttreeMenu.removeItem(id);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ttreeMenu.alphabetize();\r\n\t\t\t\t\r\n\t\t\t\tfileViewerThreads.remove(this);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tfileViewerThreads.add(refreshThread);\r\n\t\t\r\n\t\trefreshThread.start();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Finds the sub-files of a directory and if they have not been\r\n\t * added, add them to the TreeMenu.\r\n\t * \r\n\t * @param file The directory to search sub-files for.\r\n\t * @param parent The id of the directory TreeMenu item.\r\n\t * @throws IOException \r\n\t */\r\n\tprivate void findSubFiles(File file, final int parent, boolean ignoreRemove) throws IOException\r\n\t{\r\n\t\tif (exiting)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tFile subFiles[] = file.listFiles();\r\n\t\t\r\n\t\tif (subFiles != null)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < subFiles.length; i ++)\r\n\t\t\t{\r\n\t\t\t\tboolean isDirectory = subFiles[i].isDirectory();\r\n\t\t\t\t\r\n\t\t\t\tfinal String orig          = subFiles[i].getCanonicalPath().replace('\\\\', '/');\r\n\t\t\t\tfinal String name          = FileUtils.getFileName(orig);\r\n\t\t\t\t\r\n\t\t\t\tif (name.charAt(0) == '.')\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n//\t\t\t\tString location      = orig;//orig.toLowerCase();\r\n\t\t\t\t\r\n\t\t\t\tint id               = 0;\r\n\t\t\t\t\r\n\t\t\t\tfinal Image img            = isDirectory ? folderImage : getFileImage(orig);\r\n\t\t\t\t\r\n\t\t\t\tboolean alreadyAdded = treeItemIds.containsKey(orig);\r\n\t\t\t\t\r\n\t\t\t\tif (!ignoreRemove)\r\n\t\t\t\t{\r\n\t\t\t\t\talreadyAdded = true;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (treeItemLocations.containsValue(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurId = treeItemIds.get(orig);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tid = curId;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (isDirectory)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfindSubFiles(subFiles[i], id, ignoreRemove);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Set text correctly of renamed files.\r\n\t\t\t\t\telse if (treeItemLocations.containsValue(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid = treeItemIds.get(orig);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttreeMenu.setTreeItemText(id, name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\talreadyAdded = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (!alreadyAdded)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (exiting)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurId = treeMenu.addItem(parent, name, img);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tid = curId;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (isDirectory)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfindSubFiles(subFiles[i], id, ignoreRemove);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttreeItemDirectories.put(id, orig);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (fileCacheSaved.containsKey(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfileCacheSaved.put(orig, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\ttreeItemLocations.put(id, orig);\r\n\t\t\t\t\ttreeItemIds.put(orig, id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that occurs whenever the content\r\n\t * of a TextField is changed. In this case it tells you that\r\n\t * the current file has been changed and needs to be saved.\r\n\t */\r\n\tpublic void contentChanged(ContentEvent event)\r\n\t{\r\n\t\tObject source = event.getSource();\r\n\t\t\r\n\t\tif (source == codeField)\r\n\t\t{\r\n\t\t\tif (fileLocation != null)\r\n\t\t\t{\r\n\t\t\t\tsetFileSaved(fileLocation, false);\r\n\t\t\t\t\r\n\t\t\t\tfinal String code = codeField.getText();\r\n\t\t\t\t\r\n\t\t\t\tnew Thread()\r\n\t\t\t\t{\r\n\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcodeField.clearErrors();\r\n\t\t\t\t\t\tfinal String outputLocation = FileUtils.getParentFolder(fileLocation) + ""/"";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\ttry\r\n//\t\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\t\tconsoleField.setText("""");\r\n//\t\t\t\t\t\t\t\t\t\r\n//\t\t\t\t\t\t\t\t\tLanguage.compile(fileLocation, codeField.getRawText(), outputLocation, consoleStream);\r\n//\t\t\t\t\t\t\t\t}\r\n//\t\t\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n//\t\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n//\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tLanguage.compile(fileLocation, code, outputLocation, null);\r\n\t\t\t\t\t}\r\n\t\t\t\t}.start();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Return the Image associated with the type of file given through\r\n\t * the location parameter.\r\n\t * \r\n\t * @param location The location of the file.\r\n\t * @return The Image associated with the file.\r\n\t */\r\n\tprivate Image getFileImage(String location)\r\n\t{\r\n\t\tImage img = null;\r\n\t\t\r\n\t\tint fileType = FileUtils.getFileType(location);\r\n\t\t\r\n\t\tif (fileType == FileUtils.JAVA)\r\n\t\t{\r\n\t\t\timg = javaFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.CLASS)\r\n\t\t{\r\n\t\t\timg = classFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.GLSL)\r\n\t\t{\r\n\t\t\timg = glslFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.TXT)\r\n\t\t{\r\n\t\t\timg = txtFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.RTF)\r\n\t\t{\r\n\t\t\timg = rtfFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.EXE)\r\n\t\t{\r\n\t\t\timg = exeFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.ASSEMBLY)\r\n\t\t{\r\n\t\t\timg = asmFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.CPP)\r\n\t\t{\r\n\t\t\timg = cppFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.H)\r\n\t\t{\r\n\t\t\timg = hFileImage;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\timg = fileImage;\r\n\t\t}\r\n\t\t\r\n\t\treturn img;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks whether the text returned from the codeField is null, or\r\n\t * if it is an empty String.\r\n\t * \r\n\t * @return Whether the codeField is empty.\r\n\t */\r\n\tpublic boolean isCodeFieldEmpty()\r\n\t{\r\n\t\tString text = codeField.getText();\r\n\t\t\r\n\t\treturn text == null || text.equals("""");\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set the tab and TreeMenu item associated with the file\r\n\t * location to start with a '*' depending if the file is\r\n\t * saved or not.\r\n\t * \r\n\t * @param location The location of the file to set as saved or not.\r\n\t * @param saved Whether the file is saved or not.\r\n\t */\r\n\tpublic void setFileSaved(String location, boolean saved)\r\n\t{\r\n\t\tString locKey\t= location;\r\n\t\t\r\n\t\tString text\t\t= null;\r\n\t\t\r\n\t\tint id\t\t\t= 0;\r\n\t\t\r\n\t\tif (saved)\r\n\t\t{\r\n\t\t\tif (treeItemIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tid = treeItemIds.get(locKey);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (tabFileIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tint tabId\t= tabFileIds.get(locKey);\r\n\t\t\t\t\r\n\t\t\t\ttext\t\t= fileTabs.getTabText(tabId);\r\n\t\t\t}\r\n\t\t\telse if (treeItemLocations.containsValue(locKey))\r\n\t\t\t{\r\n\t\t\t\ttext = treeMenu.getTreeItemText(id);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (text != null && text.startsWith(""*""))\r\n\t\t\t{\r\n\t\t\t\ttext = text.substring(1);\r\n\t\t\t\r\n\t\t\t\tif (treeItemLocations.containsValue(locKey))\r\n\t\t\t\t{\r\n\t\t\t\t\ttreeMenu.setTreeItemText(id, text);\r\n\t\t\t\t}\r\n\t\t\t\tif (tabFileIds.containsKey(locKey))\r\n\t\t\t\t{\r\n\t\t\t\t\tfileTabs.setTabText(tabFileIds.get(locKey), text);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileCacheSaved.put(locKey, true);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tint tabId = tabFileIds.get(locKey);\r\n\t\t\t\r\n\t\t\ttext = fileTabs.getTabText(tabId);\r\n\t\t\t\r\n\t\t\tif (!text.startsWith(""*""))\r\n\t\t\t{\r\n\t\t\t\ttext = ""*"" + text;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (treeItemIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tid = treeItemIds.get(locKey);\r\n\t\t\t\ttreeMenu.setTreeItemText(id, text);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileTabs.setTabText(tabId, text);\r\n\t\t\t\r\n\t\t\tfileCacheSaved.put(locKey, false);\r\n\t\t\t\r\n\t\t\tString fileContents = codeField.getText();\r\n\t\t\t\r\n\t\t\tfileCache.put(locKey, fileContents);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to remove all of the TreeMenu items and clear the\r\n\t * HashMaps.\r\n\t */\r\n\tpublic void removeAllTreeItems()\r\n\t{\r\n\t\ttreeMenu.removeAllItems();\r\n\t\t\r\n\t\ttreeItemLocations.clear();\r\n\t\ttreeItemIds.clear();\r\n\t\ttreeItemDirectories.clear();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add a tab of the file at fileLocation to the TabMenu.\r\n\t * \r\n\t * @param fileLocation The location of the file to represent.\r\n\t */\r\n\tprivate void addTab(String fileLocation)\r\n\t{\r\n\t\taddTab(fileLocation, true);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to add a tab at the specified location.\r\n\t * \r\n\t * @param fileLocation The location of the file that was opened.\r\n\t * @param cache Whether or not to save the tab for later use after\r\n\t * \t\trestart.\r\n\t */\r\n\tprivate void addTab(String fileLocation, boolean cache)\r\n\t{\r\n\t\tString fileName = FileUtils.getFileName(fileLocation);\r\n\t\t\r\n\t\taddTab(fileName, fileLocation, cache);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add a tab of the file with the fileName and location to the TabMenu.\r\n\t * \r\n\t * @param fileName The name of the file to represent.\r\n\t * @param location The location, including the fileName, of the file.\r\n\t */\r\n\tprivate void addTab(String fileName, String location)\r\n\t{\r\n\t\taddTab(fileName, location, true);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to add a tab at the specified location with the tab labeled\r\n\t * with the fileName param.\r\n\t * \r\n\t * @param fileName The String to label the tab with.\r\n\t * @param location The location of the file that was opened.\r\n\t * @param cache Whether or not to save the tab for later use after\r\n\t * \t\trestart.\r\n\t */\r\n\tprivate void addTab(String fileName, final String location, boolean cache)\r\n\t{\r\n\t\tint id = fileTabs.addTab(fileName);\r\n\t\t\r\n\t\tif (oldTabId == 0)\r\n\t\t{\r\n\t\t\toldTabId = id;\r\n\t\t}\r\n\t\t\r\n\t\ttabTopPixels.put(id, 0);\r\n\t\ttabSelection.put(id, new Point(0, 0));\r\n\t\t\r\n\t\ttabFileLocations.put(id, location);\r\n\t\ttabFileIds.put(location, id);\r\n\t\t\r\n\t\tif (cache)\r\n\t\t{\r\n\t\t\tnew Thread()\r\n\t\t\t{\r\n\t\t\t\tpublic void run()\r\n\t\t\t\t{\r\n\t\t\t\t\tappendConfigDataValue(""last.tabs"", location + "";"");\r\n\t\t\t\t}\r\n\t\t\t}.start();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a tab's close icon\r\n\t * is pressed. If the file in the tab is not saved, ask whether to\r\n\t * save it or not.\r\n\t * \r\n\t * @param event The TabMenuEvent sent with the tab close.\r\n\t * @return Whether to close the tab or not.\r\n\t */\r\n\tpublic boolean tabClosing(TabMenuEvent event)\r\n\t{\r\n\t\tint tabId       = event.getTabId();\r\n\t\t\r\n\t\tboolean cancel = false;\r\n\t\t\r\n\t\tif (event.getSource() == fileTabs)\r\n\t\t{\r\n\t\t\tint newId\t\t= fileTabs.getSelected();\r\n\t\t\t\r\n\t\t\tString location = tabFileLocations.get(tabId);\r\n\t\t\tString result\t= null;\r\n\t\r\n\t\t\tboolean askSave\t= false;\r\n\t\t\t\r\n\t\t\tif (fileCacheSaved.containsKey(location))\r\n\t\t\t{\r\n\t\t\t\tif (!fileCacheSaved.get(location))\r\n\t\t\t\t{\r\n\t\t\t\t\taskSave = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif (!isCodeFieldEmpty())\r\n\t\t\t\t{\r\n\t\t\t\t\taskSave = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (askSave)\r\n\t\t\t{\r\n\t\t\t\tOptionDialog saveDialog = new OptionDialog(""Save?"", ""\\"""" + FileUtils.getFileName(location) + ""\\"" has not been saved, would you like to save it?"");\r\n\t\t\t\t\r\n\t\t\t\tresult = saveDialog.open();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!askSave || (result != null && (result.equals(""yes"") || result.equals(""no""))))\r\n\t\t\t{\r\n\t\t\t\tString files = CONFIG_DATA.get(""last.tabs"").replace((tabFileLocations.get(tabId) + ';'), """");\r\n\t\t\t\tsetConfigDataValue(""last.tabs"", files);\r\n\t\t\t\t\r\n\t\t\t\ttabFileLocations.remove(tabId);\r\n\t\t\t\ttabFileIds.remove(location);\r\n\t\t\t\ttabTopPixels.remove(tabId);\r\n\t\t\t\ttabSelection.remove(tabId);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (result != null)\r\n\t\t\t{\r\n\t\t\t\tif (result.equals(""yes""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(location);\r\n\t\t\t\t}\r\n\t\t\t\telse if (result.equals(""no""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsetFileSaved(location, true);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tcancel = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcancel = askSave;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (cancel)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfileCache.remove(location);\r\n\t\t\t\tfileCacheSaved.remove(location);\r\n\t\t\t\t\r\n\t\t\t\tif (tabId == oldTabId)\r\n\t\t\t\t{\r\n\t\t\t\t\toldTabId = newId;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (tabId != newId)\r\n\t\t\t\t{\r\n\t\t\t\t\tString loc = tabFileLocations.get(newId);\r\n\t\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile(loc);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfileLocation = null;\r\n\t\t\t\t\tcodeField.setText("""");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (event.getSource() == consoleTabs)\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn !cancel;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a tab is selected\r\n\t * in a TabMenu. It then opens the file.\r\n\t * \r\n\t * @param event The TabMenuEvent sent with the tab select.\r\n\t */\r\n\tpublic void tabSelected(TabMenuEvent event)\r\n\t{\r\n\t\tint tabId = event.getTabId();\r\n\t\t\r\n\t\tif (event.getSource() == fileTabs)\r\n\t\t{\r\n\t\t\tString location = tabFileLocations.get(tabId);\r\n\t\t\t\r\n\t\t\tif (location.equals(fileLocation))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (location != null)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\topenFile(location);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tcodeField.setSelection(tabSelection.get(tabId));\r\n\t\t\t\tcodeField.setTopPixel(tabTopPixels.get(tabId));\r\n\t\t\t\tcodeField.select();\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (event.getSource() == consoleTabs)\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a key is pressed\r\n\t * in a TextField.\r\n\t * \r\n\t * @param e The CodeFieldEvent that was passed.\r\n\t */\r\n\tpublic void keyPressed(CodeFieldEvent e)\r\n\t{\r\n\t\tif (e.getSource() == codeField)\r\n\t\t{\r\n\t\t\tif (e.getStateMask() == (Integer)PROPERTIES.get(""key.control"") && e.getKeyCode() == 's')\r\n\t\t\t{\r\n\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that deletes the file at the specified location.\r\n\t * \r\n\t * @param location The location of the file to be deleted.\r\n\t * @return Whether the file was successfully deleted or not.\r\n\t */\r\n\tpublic boolean deleteFile(String location)\r\n\t{\r\n\t\tint treeId    = treeItemIds.get(location);\r\n\t\t\r\n\t\ttreeItemLocations.remove(treeId);\r\n\t\ttreeItemDirectories.remove(treeId);\r\n\t\tfileCache.remove(location);\r\n\t\tfileCacheSaved.remove(location);\r\n\t\t\r\n\t\ttreeMenu.removeItem(treeId);\r\n\t\t\r\n\t\tboolean deleted = FileUtils.delete(new File(location));\r\n\t\t\r\n\t\treturn deleted;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to synchronistically update the components of the main\r\n\t * window.\r\n\t */\r\n\tpublic void update()\r\n\t{\r\n\t\t\r\n\t}\r\n}\r\n----------------------------------- SOURCE END -------------------------------------",1364132433480
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1364132433481
error,log,,,"Error in JDT Core during reconcile",1364132433481
error,log,,,"Exception occurred during compilation unit conversion:\r\n----------------------------------- SOURCE BEGIN -------------------------------------\r\npackage net.foxycorndog.arrowide;\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.awt.TextField;\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\nimport java.io.PrintStream;\r\nimport java.net.URLDecoder;\r\n\r\nimport net.foxycorndog.arrowide.color.ColorUtils;\r\nimport net.foxycorndog.arrowide.components.CodeField;\r\nimport net.foxycorndog.arrowide.components.CodeFieldEvent;\r\nimport net.foxycorndog.arrowide.components.CodeFieldListener;\r\nimport net.foxycorndog.arrowide.components.CompositeSizer;\r\nimport net.foxycorndog.arrowide.components.ConsoleField;\r\nimport net.foxycorndog.arrowide.components.ContentEvent;\r\nimport net.foxycorndog.arrowide.components.ContentListener;\r\nimport net.foxycorndog.arrowide.components.SizerListener;\r\nimport net.foxycorndog.arrowide.components.SplashScreen;\r\nimport net.foxycorndog.arrowide.components.TitleBar;\r\nimport net.foxycorndog.arrowide.components.menubar.Menubar;\r\nimport net.foxycorndog.arrowide.components.menubar.MenubarListener;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenu;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenuEvent;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenuListener;\r\nimport net.foxycorndog.arrowide.components.toolbar.Toolbar;\r\nimport net.foxycorndog.arrowide.components.toolbar.ToolbarListener;\r\nimport net.foxycorndog.arrowide.components.treemenu.TreeMenu;\r\nimport net.foxycorndog.arrowide.components.treemenu.TreeMenuListener;\r\nimport net.foxycorndog.arrowide.components.window.Window;\r\nimport net.foxycorndog.arrowide.console.ConsoleListener;\r\nimport net.foxycorndog.arrowide.console.ConsoleStream;\r\nimport net.foxycorndog.arrowide.dialog.Dialog;\r\nimport net.foxycorndog.arrowide.dialog.DialogFilter;\r\nimport net.foxycorndog.arrowide.dialog.FileBrowseDialog;\r\nimport net.foxycorndog.arrowide.dialog.FileInputDialog;\r\nimport net.foxycorndog.arrowide.dialog.OptionDialog;\r\nimport net.foxycorndog.arrowide.dialog.PreferencesDialog;\r\nimport net.foxycorndog.arrowide.dialog.DialogPanel;\r\nimport net.foxycorndog.arrowide.dialog.PropertiesDialog;\r\nimport net.foxycorndog.arrowide.dialog.TextInputDialog;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.AssemblyPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.CppPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.GeneralPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.JavaPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.PythonPanel;\r\nimport net.foxycorndog.arrowide.file.ConfigReader;\r\nimport net.foxycorndog.arrowide.file.FileUtils;\r\nimport net.foxycorndog.arrowide.formatter.Formatter;\r\nimport net.foxycorndog.arrowide.language.CompilerListener;\r\nimport net.foxycorndog.arrowide.language.Keyword;\r\nimport net.foxycorndog.arrowide.language.Language;\r\nimport net.foxycorndog.arrowide.language.CompileOutput;\r\nimport net.foxycorndog.arrowide.language.java.JavaLanguage;\r\nimport net.foxycorndog.arrowide.printer.TextPrinter;\r\nimport net.foxycorndog.arrowide.xml.Reader;\r\nimport net.foxycorndog.arrowide.xml.XMLItem;\r\n\r\nimport org.eclipse.swt.SWT;\r\nimport org.eclipse.swt.events.ControlEvent;\r\nimport org.eclipse.swt.events.ControlListener;\r\nimport org.eclipse.swt.events.DisposeEvent;\r\nimport org.eclipse.swt.events.DisposeListener;\r\nimport org.eclipse.swt.events.KeyEvent;\r\nimport org.eclipse.swt.events.KeyListener;\r\nimport org.eclipse.swt.events.MouseEvent;\r\nimport org.eclipse.swt.events.MouseListener;\r\nimport org.eclipse.swt.events.MouseMoveListener;\r\nimport org.eclipse.swt.events.PaintEvent;\r\nimport org.eclipse.swt.events.PaintListener;\r\nimport org.eclipse.swt.events.SelectionEvent;\r\nimport org.eclipse.swt.events.SelectionListener;\r\nimport org.eclipse.swt.graphics.Color;\r\nimport org.eclipse.swt.graphics.Font;\r\nimport org.eclipse.swt.graphics.FontData;\r\nimport org.eclipse.swt.graphics.GC;\r\nimport org.eclipse.swt.graphics.Image;\r\nimport org.eclipse.swt.graphics.Point;\r\nimport org.eclipse.swt.graphics.Rectangle;\r\nimport org.eclipse.swt.layout.FillLayout;\r\nimport org.eclipse.swt.layout.GridData;\r\nimport org.eclipse.swt.layout.GridLayout;\r\nimport org.eclipse.swt.opengl.GLCanvas;\r\nimport org.eclipse.swt.opengl.GLData;\r\nimport org.eclipse.swt.printing.PrintDialog;\r\nimport org.eclipse.swt.printing.Printer;\r\nimport org.eclipse.swt.printing.PrinterData;\r\nimport org.eclipse.swt.widgets.Button;\r\nimport org.eclipse.swt.widgets.Composite;\r\nimport org.eclipse.swt.widgets.DirectoryDialog;\r\nimport org.eclipse.swt.widgets.Display;\r\nimport org.eclipse.swt.widgets.Event;\r\nimport org.eclipse.swt.widgets.FileDialog;\r\nimport org.eclipse.swt.widgets.Label;\r\nimport org.eclipse.swt.widgets.Listener;\r\nimport org.eclipse.swt.widgets.Menu;\r\nimport org.eclipse.swt.widgets.MenuItem;\r\nimport org.eclipse.swt.widgets.Monitor;\r\nimport org.eclipse.swt.widgets.Shell;\r\nimport org.eclipse.swt.widgets.TabFolder;\r\nimport org.eclipse.swt.widgets.TabItem;\r\nimport org.eclipse.swt.widgets.Text;\r\nimport org.eclipse.swt.widgets.Widget;\r\nimport org.lwjgl.LWJGLException;\r\nimport org.lwjgl.Sys;\r\nimport org.lwjgl.opengl.GLContext;\r\n\r\n/**\r\n * Main class for the ArrowIDE program.\r\n * \r\n * @author\tBraden Steffaniak\r\n * @since\tFeb 13, 2013 at 4:46:00 PM\r\n * @since\tv0.7\r\n * @version\tFeb 13, 2013 at 4:46:00 PM\r\n * @version\tv0.7\r\n */\r\npublic class ArrowIDE implements ContentListener, CodeFieldListener, TabMenuListener\r\n{\r\n\tprivate boolean\t\t\t\t\t\t\t\tfilesNeedRefresh;\r\n\tprivate boolean\t\t\t\t\t\t\t\tcustom;\r\n\t\r\n\tprivate int\t\t\t\t\t\t\t\t\tcurId;\r\n\tprivate int\t\t\t\t\t\t\t\t\ttitleBarHeight;\r\n\tprivate int\t\t\t\t\t\t\t\t\toldTabId;\r\n\r\n\tprivate CodeField\t\t\t\t\t\t\tcodeField;\r\n\r\n\tprivate ConsoleField\t\t\t\t\t\tconsoleField;\r\n\r\n\tprivate String\t\t\t\t\t\t\t\tfileLocation;\r\n\r\n\tprivate Image\t\t\t\t\t\t\t\tfolderImage, fileImage,\r\n\t\t\tjavaFileImage, classFileImage, glslFileImage, txtFileImage,\r\n\t\t\trtfFileImage, exeFileImage, asmFileImage, cppFileImage, hFileImage;\r\n\r\n\tprivate PropertiesDialog\t\t\t\t\tproperties;\r\n\tprivate PreferencesDialog\t\t\t\t\tpreferences;\r\n\r\n\tprivate Composite\t\t\t\t\t\t\tcontentPanel;\r\n\t\r\n\tprivate Menubar\t\t\t\t\t\t\t\tmenubar;\r\n\r\n\tprivate TitleBar\t\t\t\t\t\t\ttitleBar;\r\n\t\r\n\tprivate Toolbar\t\t\t\t\t\t\t\ttoolbar;\r\n\r\n\tprivate TreeMenu\t\t\t\t\t\t\ttreeMenu;\r\n\t\r\n\tprivate CompositeSizer\t\t\t\t\t\ttreeMenuSizer, codeFieldSizer;\r\n\r\n\tprivate TabMenu\t\t\t\t\t\t\t\tfileTabs, consoleTabs;\r\n\r\n\tprivate ConsoleStream\t\t\t\t\t\tconsoleStream;\r\n\r\n\tprivate Dialog\t\t\t\t\t\t\t\tnewFolderDialog, newFileDialog,\r\n\t\t\tnewProjectDialog;\r\n\tprivate TextInputDialog\t\t\t\t\t\trenameFileDialog;\r\n\r\n\tprivate HashMap<Integer, String>\t\t\ttreeItemLocations;\r\n\tprivate HashMap<String, Integer>\t\t\ttreeItemIds;\r\n\tprivate HashMap<Integer, String>\t\t\ttreeItemDirectories;\r\n\tprivate HashMap<String, String>\t\t\t\tfileCache;\r\n\tprivate HashMap<String, Boolean>\t\t\tfileCacheSaved;\r\n\tprivate HashMap<Integer, String>\t\t\ttabFileLocations;\r\n\tprivate HashMap<String, Integer>\t\t\ttabFileIds;\r\n\tprivate HashMap<Integer, Integer>\t\t\ttabTopPixels;\r\n\tprivate HashMap<Integer, Point>\t\t\t\ttabSelection;\r\n//\tprivate HashMap<, Integer>\t\t\t\t\tconsoleTabIds;\r\n\tprivate HashMap<Integer, Program>\t\t\t\t\tconsoleTabPrograms;\r\n\t\r\n\tprivate ArrayList<Program>\t\t\t\t\tprograms;\r\n\r\n\tprivate static boolean\t\t\t\t\t\trestarting;\r\n\tprivate static boolean\t\t\t\t\t\texiting;\r\n\t\r\n\tprivate static int\t\t\t\t\t\t\tuntitledNumber;\r\n\t\r\n\tprivate static Window\t\t\t\t\t\twindow;\r\n\t\r\n\tprivate static SplashScreen\t\t\t\t\tsplash;\r\n\r\n\tprivate static String\t\t\t\t\t\tconfigLocation;\r\n\r\n\tpublic static final Display\t\t\t\t\tDISPLAY;\r\n\r\n\tpublic static final Color\t\t\t\t\tTITLE_BAR_BACKGROUND, TITLE_BAR_FOREGROUND, FOCUS_COLOR, NON_FOCUS_COLOR;\r\n\t\r\n\tpublic static final HashMap<String, String>\tCONFIG_DATA;\r\n\t\r\n\tpublic static final HashMap<String, HashMap<String, XMLItem[]>>\tPROJECT_PROPERTIES;\r\n\tpublic static final HashMap<String, HashMap<String, XMLItem[]>>\tPROJECT_CLASSPATHS;\r\n\t// public static final HashMap<Integer, String> CONFIG_LINE_NUMBER_DATA;\r\n\t// public static final HashMap<String, Integer> CONFIG_LINE_NUMBERS;\r\n\r\n\tpublic static final HashMap<String, Object>\tPROPERTIES;\r\n\t\r\n\tprivate static ArrayList<Thread>\t\t\tfileViewerThreads;\r\n\t\r\n\tprivate class Efficient\r\n\t{\r\n\t\tprivate int i;\r\n\t\t\r\n\t\tprivate String s;\r\n\t\t\r\n\t\tpublic Efficient(String s, int i)\r\n\t\t{\r\n\t\t\tthis.s = s;\r\n\t\t\tthis.i = i;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiate the {@link #DISPLAY display}, and the color palette.\r\n\t */\r\n\tstatic\r\n\t{\r\n\t\tDISPLAY = new Display();\r\n\t\t\r\n\t\tTITLE_BAR_BACKGROUND = new Color(DISPLAY, 240, 240, 240);\r\n\t\tTITLE_BAR_FOREGROUND = TITLE_BAR_BACKGROUND;\r\n\t\t\r\n\t\tFOCUS_COLOR = new Color(DISPLAY, 255, 255, 255);\r\n\t\tNON_FOCUS_COLOR = ColorUtils.lighten(TITLE_BAR_BACKGROUND, 10);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize the CONFIG_DATA HashMaps and set the os properties\r\n\t * in the PROPERTIES HashMap.\r\n\t */\r\n\tstatic\r\n\t{\r\n\t\tCONFIG_DATA             = new HashMap<String, String>();\r\n\t\t\r\n\t\tPROJECT_PROPERTIES      = new HashMap<String, HashMap<String, XMLItem[]>>();\r\n\t\tPROJECT_CLASSPATHS      = new HashMap<String, HashMap<String, XMLItem[]>>();\r\n//\t\tCONFIG_LINE_NUMBER_DATA = new HashMap<Integer, String>();\r\n//\t\tCONFIG_LINE_NUMBERS     = new HashMap<String, Integer>();\r\n\t\t\r\n\t\tPROPERTIES              = new HashMap<String, Object>();\r\n\t\t\r\n\t\tString osName = System.getProperty(""os.name"");\r\n\t\t\r\n\t\tif (osName.toLowerCase().contains(""mac""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""macosx"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.BORDER);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.COMMAND);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", """");\r\n\t\t\tPROPERTIES.put(""colon"", ';');\r\n\t\t}\r\n\t\telse if (osName.toLowerCase().contains(""win""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""windows"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.NONE);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.CTRL);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", "".exe"");\r\n\t\t\tPROPERTIES.put(""colon"", ';');\r\n\t\t}\r\n\t\telse if (osName.toLowerCase().contains(""lin""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""linux"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.NONE);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.CTRL);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", """");\r\n\t\t\tPROPERTIES.put(""colon"", ':');\r\n\t\t}\r\n\t\t\r\n\t\tsetArchitecture();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set the os.arch value for the {@link #PROPERTIES} variable.\r\n\t */\r\n\tprivate static void setArchitecture()\r\n\t{\r\n\t\tint bitness = 32;\r\n\t\t\r\n\t\tProcessBuilder b = new ProcessBuilder(new String[] { ""res/bitness"" });\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tProcess p = b.start();\r\n\t\t\t\r\n\t\t\tInputStream in = p.getInputStream();\r\n\t\t\t\r\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(in));\r\n\t\t\t\r\n\t\t\tString line = null;\r\n\t\t\t\r\n\t\t\twhile ((line = reader.readLine()) != null)\r\n\t\t\t{\r\n\t\t\t\tbitness = Integer.valueOf(line);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tPROPERTIES.put(""os.arch"", bitness);\r\n\t}\r\n\t\r\n\t/**\r\n\t * The initial starting point of the program. It is only called\r\n\t * whenever the program is started from scratch without a restart.\r\n\t * \r\n\t * @param args The command line arguments. (Unused)\r\n\t */\r\n\tpublic static void main(String args[])\r\n\t{\r\n\t\tstart();\r\n\t}\r\n\t\r\n\t/**\r\n\t * The constructor for this class. Initializes the window that is\r\n\t * used for programming.\r\n\t * \r\n\t * @param display The display to use.\r\n\t */\r\n\tpublic ArrowIDE(final Display display)\r\n\t{\r\n//\t\tSystem.out.println(map.get(""Contacts.Contact.ContactId"")[0].getContents());\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""window.custom""))\r\n\t\t{\r\n\t\t\tcustom = Boolean.valueOf(CONFIG_DATA.get(""window.custom""));\r\n\t\t}\r\n\t\t\r\n\t\tMonitor monitor = DISPLAY.getPrimaryMonitor();\r\n\t\tfinal Rectangle screenBounds = monitor.getBounds();\r\n\t\t\r\n\t\tint height = (int)(monitor.getBounds().height / 1.5f);\r\n\t\tint width  = (int)(monitor.getBounds().width / 1.5f);\r\n\t\t\r\n\t\twindow = new Window(DISPLAY, custom);//, SWT.SHELL_TRIM & (~SWT.RESIZE));\r\n\t\twindow.setSize(width, height);\r\n\t\t\r\n\t\tfinal Rectangle shellBounds = window.getBounds();\r\n\t\t \r\n\t\twindow.setLocation(screenBounds.width / 2 - shellBounds.width / 2, screenBounds.height / 2 - shellBounds.height / 2);\r\n\t\twindow.setTitle(""Arrow IDE"");\r\n\t\t\r\n\t\tPROPERTIES.put(""arrowide.location"", FileUtils.getParentFolder(configLocation));\r\n\t\t\r\n\t\t/**\r\n\t\t * Set up the OpenGL (lwjgl) capabilities for the program.\r\n\t\t */\r\n\t\t{\r\n\t\t\tSystem.setProperty(""org.lwjgl.librarypath"", PROPERTIES.get(""arrowide.location"") + ""/res/native/"" + PROPERTIES.get(""os.name"") + ""/"");\r\n\t\t\t\r\n\t\t\tComposite comp = new Composite(window.getShell(), SWT.NONE);\r\n\t\t\tcomp.setLayout(new FillLayout());\r\n\t\t\t\r\n\t\t\tGLData data = new GLData();\r\n\t\t\tdata.doubleBuffer = true;\r\n\t\t\tfinal GLCanvas canvas = new GLCanvas(comp, SWT.NONE, data);\r\n\t\t\t\r\n\t\t\tcanvas.setCurrent();\r\n\t\t\t\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tGLContext.useContext(canvas);\r\n\t\t\t}\r\n\t\t\tcatch(LWJGLException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""monitor.width"") && CONFIG_DATA.containsKey(""monitor.height""))\r\n\t\t{\r\n\t\t\twidth  = Integer.parseInt(CONFIG_DATA.get(""monitor.width""));\r\n\t\t\theight = Integer.parseInt(CONFIG_DATA.get(""monitor.height""));\r\n\t\t\t\r\n\t\t\tif (width == screenBounds.width && height == screenBounds.height)\r\n\t\t\t{\r\n\t\t\t\tif (CONFIG_DATA.containsKey(""window.width"") && CONFIG_DATA.containsKey(""window.height""))\r\n\t\t\t\t{\r\n\t\t\t\t\twidth  = Integer.parseInt(CONFIG_DATA.get(""window.width""));\r\n\t\t\t\t\theight = Integer.parseInt(CONFIG_DATA.get(""window.height""));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (width > 0 && height > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twindow.setSize(width, height);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (CONFIG_DATA.containsKey(""window.x"") && CONFIG_DATA.containsKey(""window.y""))\r\n\t\t\t\t{\r\n\t\t\t\t\tint x = Integer.parseInt(CONFIG_DATA.get(""window.x""));\r\n\t\t\t\t\tint y = Integer.parseInt(CONFIG_DATA.get(""window.y""));\r\n\t\t\t\t\t\r\n\t\t\t\t\twindow.setLocation(x, y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""monitor.width"", screenBounds.width + """");\r\n\t\tsetConfigDataValue(""monitor.height"", screenBounds.height + """");\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""window.fullscreen""))\r\n\t\t{\r\n\t\t\tboolean fullscreen = Boolean.valueOf(CONFIG_DATA.get(""window.fullscreen""));\r\n\t\t\t\r\n\t\t\twindow.setFullscreen(fullscreen);\r\n\t\t}\r\n\t\t\r\n\t\tif (!window.isFullscreen() && CONFIG_DATA.containsKey(""window.maximized""))\r\n\t\t{\r\n\t\t\tboolean maximized = Boolean.valueOf(CONFIG_DATA.get(""window.maximized""));\r\n\t\t\t\r\n\t\t\twindow.setMaximized(maximized);\r\n\t\t}\r\n\t\t\r\n\t\twindow.setBackground(new Color(display, 225, 225, 225));\r\n\t\t\r\n\t\tif (custom)\r\n\t\t{\r\n\t\t\twindow.setBorderColor(new Color(display, 215, 215, 215));\r\n\t\t\twindow.setBorderSize(3);\r\n\t\t}\r\n\t\t\r\n\t\tdisplay.addFilter(SWT.KeyDown, new Listener()\r\n\t\t{\r\n\t\t\tpublic void handleEvent(Event event)\r\n\t\t\t{\r\n\t\t\t\tif (event.keyCode == SWT.F11)\r\n\t\t\t\t{\r\n\t\t\t\t\twindow.setFullscreen(!window.isFullscreen());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tcontentPanel = window.getContentPanel();\r\n\t\tcontentPanel.setLocation(0, 0);\r\n\t\tcontentPanel.setSize(window.getClientArea().width, window.getClientArea().height);\r\n\t\tcontentPanel.setBackground(window.getBackground());\r\n\t\t\r\n\t\tif (custom)\r\n\t\t{\r\n\t\t\ttitleBar     = new TitleBar(window, 28, SWT.MIN | SWT.MAX | SWT.CLOSE | SWT.CENTER);\r\n\t\t\ttitleBar.setBackground(TITLE_BAR_BACKGROUND);\r\n\t\t\ttitleBar.setForeground(TITLE_BAR_FOREGROUND);\r\n\t\t\t\r\n\t\t\ttitleBarHeight = titleBar.getHeight();\r\n\t\t}\r\n\t\t\r\n//\t\tGridLayout b = new GridLayout();\r\n//\t\tb.makeColumnsEqualWidth = false;\r\n//\t\t\r\n//\t\tshell.setLayout(b);\r\n\t\t\r\n\t\tfileCache     = new HashMap<String, String>();\r\n\t\t\r\n\t\tcodeField     = new CodeField(contentPanel);\r\n\t\tconsoleField  = new ConsoleField(contentPanel);\r\n\t\t\r\n\t\tcodeField.addContentListener(this);\r\n\t\tcodeField.addCodeFieldListener(this);\r\n\t\tcodeField.setBackground(FOCUS_COLOR);\r\n\t\t\r\n\t\tint contentWidth  = (int)(contentPanel.getSize().x / 100f * 80);\r\n\t\tint conHeight     = (int)(contentPanel.getSize().y / 100f * 20);\r\n\t\tint toolbarHeight = (int)(25);\r\n\t\t\r\n\t\tcodeField.setSize(contentWidth, contentPanel.getSize().y - conHeight - toolbarHeight - 16);\r\n\t\tcodeField.setLocation(contentPanel.getSize().x - codeField.getWidth(), toolbarHeight);//contentPanel.getSize().y - codeField.getHeight());\r\n\t\tcodeField.setShowLineNumbers(true);\r\n\t\t\r\n\t\tconsoleField.setSize(contentWidth, conHeight - 5);\r\n\t\tconsoleField.setLocation(codeField.getBounds().x, codeField.getHeight() + codeField.getBounds().y + 5);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconsoleStream = new ConsoleStream(""log.txt"");\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tfolderImage       = new Image(display, new FileInputStream(""res/images/folderimage.png""));\r\n\t\t\tfileImage         = new Image(display, new FileInputStream(""res/images/fileimage.png""));\r\n\t\t\tjavaFileImage     = new Image(display, new FileInputStream(""res/images/javafileimage.png""));\r\n\t\t\tclassFileImage    = new Image(display, new FileInputStream(""res/images/classfileimage.png""));\r\n\t\t\tglslFileImage     = new Image(display, new FileInputStream(""res/images/glslfileimage.png""));\r\n\t\t\ttxtFileImage      = new Image(display, new FileInputStream(""res/images/txtfileimage.png""));\r\n\t\t\trtfFileImage      = new Image(display, new FileInputStream(""res/images/rtffileimage.png""));\r\n\t\t\texeFileImage      = new Image(display, new FileInputStream(""res/images/exefileimage.png""));\r\n\t\t\tasmFileImage      = new Image(display, new FileInputStream(""res/images/asmfileimage.png""));\r\n\t\t\tcppFileImage      = new Image(display, new FileInputStream(""res/images/cppfileimage.png""));\r\n\t\t\thFileImage        = new Image(display, new FileInputStream(""res/images/hfileimage.png""));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttabFileLocations  = new HashMap<Integer, String>();\r\n\t\ttabFileIds        = new HashMap<String, Integer>();\r\n\t\ttabTopPixels      = new HashMap<Integer, Integer>();\r\n\t\ttabSelection      = new HashMap<Integer, Point>();\r\n\t\t\r\n\t\tfileTabs = new TabMenu(contentPanel);\r\n\t\tfileTabs.setBackground(ColorUtils.darken(contentPanel.getBackground(), 20));\r\n\t\tfileTabs.addListener(this);\r\n\t\t\r\n\t\tconsoleTabs = new TabMenu(contentPanel);\r\n\t\tconsoleTabs.setBackground(ColorUtils.darken(contentPanel.getBackground(), 20));\r\n\t\tconsoleTabs.setMaxWidth(codeField.getWidth() + 2);\r\n\t\tconsoleTabs.addListener(this);\r\n\t\t\r\n\t\tprograms = new ArrayList<Program>();\r\n\t\tconsoleTabPrograms = new HashMap<Integer, Program>();\r\n\t\t\r\n\t    fileTabs.setMaxWidth(codeField.getWidth() + 2);\r\n\t\tcodeField.setLocation(codeField.getX(), codeField.getY() + fileTabs.getHeight());\r\n\t\tfileTabs.setLocation(codeField.getX(), 2);\r\n\t\t\r\n\t\tpreferences = new PreferencesDialog(contentPanel);\r\n\t\tpreferences.addDialogPanel(new GeneralPanel(preferences.getContentPanel(), this));\r\n\t\tpreferences.addDialogPanel(new JavaPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new CppPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new AssemblyPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new PythonPanel(preferences.getContentPanel()));\r\n\t\t\r\n\t\tproperties = new PropertiesDialog(contentPanel);\r\n\t\tproperties.addDialogPanel(new JavaPanel(properties.getContentPanel()));\r\n\t\t\r\n\t\tmenubar = new Menubar(contentPanel);\r\n\t\tmenubar.setBackground(TITLE_BAR_BACKGROUND);\r\n\t\tmenubar.setSize(contentPanel.getSize().x, 20);\r\n\t\tmenubar.addMenuHeader(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""New"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Open"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Save"", ""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Save as..."", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Refresh"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Print"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Restart"", ""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Exit"", ""FILE"");\r\n\r\n\t\tmenubar.addMenuSubItem(""Project"", ""FILE>New"");\r\n\t\tmenubar.addMenuSubItem(""Empty File"", ""FILE>New"");\r\n\t\t\r\n\t\tmenubar.addMenuHeader(""EDIT"");\r\n\t\tmenubar.addMenuSubItem(""Preferences"", ""EDIT"");\r\n\r\n\t\tmenubar.addMenuHeader(""PROJECT"");\r\n\t\tmenubar.addMenuSubItem(""Properties"", ""PROJECT"");\r\n\t\t\r\n\t\tmenubar.addListener(new MenubarListener()\r\n\t\t{\r\n\t\t\tpublic void subItemPressed(String subItemId)\r\n\t\t\t{\r\n\t\t\t\tif (subItemId.equals(""FILE>New>Empty File""))\r\n\t\t\t\t{\r\n\t\t\t\t\tnewFile();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>New>Project""))\r\n\t\t\t\t{\r\n\t\t\t\t\tnewProject();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Open""))\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Save""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Save as...""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(null);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Refresh""))\r\n\t\t\t\t{\r\n\t\t\t\t\trefreshFileViewer(false);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Print""))\r\n\t\t\t\t{\r\n\t\t\t\t\tPrintDialog dialog = new PrintDialog(window.getShell(), SWT.NONE);\r\n\t\t\t\t\tdialog.setScope(PrinterData.SELECTION);\r\n\t\t\t\t\t\r\n\t\t\t\t\tPrinterData data = dialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tFontData fd[] = codeField.getFont().getFontData().clone();\r\n\t\t\t\t\tfd[0].setHeight(10);\r\n\t\t\t\t\t\r\n\t\t\t\t\tTextPrinter printer = new TextPrinter(data, codeField.getText(), new Font(display, fd[0]), codeField.getStyles());\r\n\t\t\t\t\tprinter.setMargins(1, 1, 1, 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!printer.print())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tSystem.err.println(""Was not able to print!"");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Restart""))\r\n\t\t\t\t{\r\n\t\t\t\t\trestart();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Exit""))\r\n\t\t\t\t{\r\n\t\t\t\t\texit(window);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""EDIT>Preferences""))\r\n\t\t\t\t{\r\n\t\t\t\t\tpreferences.open();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""PROJECT>Properties""))\r\n\t\t\t\t{\r\n\t\t\t\t\tproperties.open();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\ttoolbar       = new Toolbar(contentPanel);\r\n\t\t\t\r\n\t\t\ttoolbar.setBackground(window.getBackground());\r\n\r\n\t\t\ttoolbar.addToolItem(""Save"", new Image(display, new FileInputStream(""res/images/savebutton.png"")));\r\n\t\t\ttoolbar.addSeparator();\r\n\t\t\ttoolbar.addToolItem(""Compile"", new Image(display, new FileInputStream(""res/images/compilebutton.png"")));\r\n\t\t\ttoolbar.addSeparator();\r\n\t\t\ttoolbar.addToolItem(""Run"", new Image(display, new FileInputStream(""res/images/runbutton.png"")));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttoolbar.addListener(new ToolbarListener()\r\n\t\t{\r\n\t\t\tpublic void toolItemPressed(String toolItemName)\r\n\t\t\t{\r\n\t\t\t\tif (toolItemName.equals(""Save""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t}\r\n\t\t\t\telse if (toolItemName.equals(""Compile""))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (fileLocation == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\topenFile();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (Language.canCompile(FileUtils.getFileType(fileLocation)))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tString outputLocation = FileUtils.getParentFolder(fileLocation) + ""/"";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tnew File(outputLocation).mkdirs();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tLanguage.compile(fileLocation, codeField.getRawText(), outputLocation, consoleStream);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (toolItemName.equals(""Run""))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (fileLocation == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tProgram program = Language.run(codeField.getLanguage(), fileLocation, consoleStream);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (program != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tprograms.add(program);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconsoleTabIds.put(, consoleTabs.addTab(program.getName());\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tupdateLayout();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tLanguage.init();\r\n\t\t\r\n\t\tLanguage.addCompilerListener(new CompilerListener()\r\n\t\t{\r\n\t\t\tpublic void compiled(final String files[], final CompileOutput outputs[], final PrintStream stream, String fileName)\r\n\t\t\t{\r\n\t\t\t\tfinal boolean isInViewer = treeItemLocations.containsKey(fileLocation);\r\n\t\t\t\t\r\n\t\t\t\tif (outputs[0].getResult() == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tdisplay.syncExec(new Runnable()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (stream != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tstream.println(""Compiled successfully."");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (isInViewer)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor (int i = 0; i < files.length; i ++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(files[i]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t{\r\n\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor (int i = 0; i < outputs.length; i++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (outputs[i].getResult() != 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcodeField.addError(outputs[i].getStartIndex(), outputs[i].getEndIndex());\r\n//\t\t\t\t\t\t\t\tSystem.out.print(outputs[i] + ""; "");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tSystem.out.println();\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tcodeField.highlightSyntax();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tfileViewerThreads    = new ArrayList<Thread>();\r\n\t\t\r\n\t\tfileCacheSaved        = new HashMap<String, Boolean>();\r\n\t\ttreeItemLocations     = new HashMap<Integer, String>();\r\n\t\ttreeItemIds           = new HashMap<String, Integer>();\r\n\t\ttreeItemDirectories   = new HashMap<Integer, String>();\r\n\t\t\r\n\t\ttreeMenu              = new TreeMenu(contentPanel);\r\n\t\ttreeMenu.setSize(contentPanel.getSize().x - codeField.getWidth() - 10, codeField.getHeight() + consoleField.getHeight());\r\n\t\ttreeMenu.setLocation(0, codeField.getY());\r\n\t\ttreeMenu.setBackground(NON_FOCUS_COLOR);\r\n\t\t\r\n\t\ttreeMenuSizer = new CompositeSizer(contentPanel, CompositeSizer.VERTICAL);\r\n\t\ttreeMenuSizer.setSize(5, treeMenu.getHeight());\r\n\t\ttreeMenuSizer.setLocation(treeMenu.getLocation().x + treeMenu.getWidth(), treeMenu.getLocation().y);\r\n\t\ttreeMenuSizer.setBackground(new Color(DISPLAY, 100, 100, 100));\r\n\t\ttreeMenuSizer.setForeground(new Color(DISPLAY, 230, 230, 230));\r\n\t\ttreeMenuSizer.setMinimumX(treeMenu.getLocation().x);\r\n\t\ttreeMenuSizer.addSizerListener(new SizerListener()\r\n\t\t{\r\n\t\t\tpublic void sizerMoved(int dx, int dy)\r\n\t\t\t{\r\n\t\t\t\ttreeMenu.setSize(treeMenu.getWidth() + dx, treeMenu.getHeight());\r\n\t\t\t\tcodeField.setSize(codeField.getWidth() - dx, codeField.getHeight());\r\n\t\t\t\tcodeField.setLocation(codeField.getX() + dx, codeField.getY());\r\n\t\t\t\t\r\n\t\t\t\tconsoleField.setSize(codeField.getWidth(), consoleField.getHeight());\r\n\t\t\t\tconsoleField.setLocation(codeField.getX(), consoleField.getLocation().y);\r\n\r\n\t\t\t\tcodeFieldSizer.setSize(codeField.getWidth(), 5);\r\n\t\t\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight());\r\n\t\t\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t\t\t\t\r\n\t\t\t\ttoolbar.setLocation(codeField.getX(), toolbar.getY());\r\n\t\t\t\tfileTabs.setLocation(codeField.getX(), fileTabs.getY());\r\n\t\t\t\tconsoleTabs.setLocation(codeField.getX(), consoleTabs.getY());\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tcodeFieldSizer = new CompositeSizer(contentPanel, CompositeSizer.HORIZONTAL);\r\n\t\tcodeFieldSizer.setSize(codeField.getWidth(), 3);\r\n\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight() + 1);\r\n\t\tcodeFieldSizer.setBackground(new Color(DISPLAY, 100, 100, 100));\r\n\t\tcodeFieldSizer.setForeground(new Color(DISPLAY, 230, 230, 230));\r\n\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t\tcodeFieldSizer.addSizerListener(new SizerListener()\r\n\t\t{\r\n\t\t\tpublic void sizerMoved(int dx, int dy)\r\n\t\t\t{\r\n\t\t\t\tcodeField.setSize(codeField.getWidth(), codeField.getHeight() + dy);\r\n\t\t\t\t\r\n\t\t\t\tconsoleField.setSize(codeField.getWidth(), consoleField.getHeight() - dy);\r\n\t\t\t\tconsoleField.setLocation(codeField.getX(), consoleField.getLocation().y + dy);\r\n\t\t\t\t\r\n\t\t\t\tconsoleTabs.setLocation(codeField.getX(), consoleTabs.getY() + dy);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tMenu m = new Menu(treeMenu);\r\n\t\ttreeMenu.setMenu(m);\r\n\t\t\r\n\t\tfinal MenuItem newFolder = new MenuItem(m, SWT.CASCADE);\r\n\t\tnewFolder.setText(""New Folder"");\r\n\t\t\r\n\t\tfinal MenuItem newFile = new MenuItem(m, SWT.CASCADE);\r\n\t\tnewFile.setText(""New File"");\r\n\t\t\r\n\t\tfinal MenuItem rename = new MenuItem(m, SWT.CASCADE);\r\n\t\trename.setText(""Rename"");\r\n\t\t\r\n\t\tfinal MenuItem delete = new MenuItem(m, SWT.CASCADE);\r\n\t\tdelete.setText(""Delete"");\r\n\t\t\r\n\t\tfinal ArrowIDE thisIDE = this;\r\n\t\t\r\n\t\tSelectionListener menuListener = new SelectionListener()\r\n\t\t{\r\n\t\t\tpublic void widgetDefaultSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tif (e.widget == delete)\r\n\t\t\t\t{\r\n\t\t\t\t\tint id = treeMenu.getSelection();\r\n//\t\t\t\t\t\r\n//\t\t\t\t\tif (treeItems.containsKey(id))\r\n//\t\t\t\t\t{\r\n//\t\t\t\t\t\tSystem.out.println(""is file"");\r\n//\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = treeItemLocations.get(id);\r\n\t\t\t\t\t\r\n\t\t\t\t\tdeleteFile(location);\r\n\r\n\t\t\t\t\tremoveFromFileViewer(location);\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == newFolder)\r\n\t\t\t\t{\r\n\t\t\t\t\tString preLoc = treeItemLocations.get(treeMenu.getSelection());\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (preLoc == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLoc = FileUtils.removeEndingSlashes(CONFIG_DATA.get(""workspace.location"")) + ""/"";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString preLocation = FileUtils.removeEndingSlashes(preLoc);\r\n\r\n\t\t\t\t\tif (FileUtils.isFile(preLocation))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLocation = FileUtils.getParentFolder(preLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tnewFolderDialog = new FileInputDialog(""Enter the folder name:"", ""Folder name:"", true, preLocation + ""/"", false);\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = newFolderDialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (location != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile f = new File(location);\r\n\t\t\t\t\t\tf.mkdirs();\r\n\r\n\t\t\t\t\t\taddToFileViewer(location);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == newFile)\r\n\t\t\t\t{\r\n\t\t\t\t\tString preLoc = treeItemLocations.get(treeMenu.getSelection());\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (preLoc == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLoc = FileUtils.removeEndingSlashes(CONFIG_DATA.get(""workspace.location"")) + ""/"";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString preLocation = FileUtils.removeEndingSlashes(preLoc);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (FileUtils.isFile(preLocation))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLocation = FileUtils.getParentFolder(preLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tnewFileDialog = new FileInputDialog(""Enter the file name:"", ""File name:"", false, preLocation + ""/"", false);\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = newFileDialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (location != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile f = new File(location);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tf.createNewFile();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\topenFile(location);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\taddToFileViewer(location);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (IOException e2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\te2.printStackTrace();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == rename)\r\n\t\t\t\t{\r\n\t\t\t\t\tfinal int selection\t\t= treeMenu.getSelection();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfinal String loc\t\t= treeItemLocations.get(selection);\r\n\t\t\t\t\t\r\n\t\t\t\t\tboolean willContinue\t= false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (fileCache.containsKey(loc))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (!fileCacheSaved.get(loc))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tString result = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tOptionDialog optDialog = new OptionDialog(""Save?"", ""Would you like to save before renaming?"");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tresult = optDialog.open();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (result != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif (result.equals(""yes""))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tsaveFile(loc);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\twillContinue\t= true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if (result.equals(""no""))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (willContinue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trenameFileDialog = new TextInputDialog(""Enter the new name:"", ""New name:"", FileUtils.getFileName(treeItemLocations.get(selection)));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\trenameFileDialog.addDialogFilter(new DialogFilter()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic String filter(String text)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttext = FileUtils.removeEndingSlashes(text.replace('\\\\', '/'));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor (int i = 0; i < text.length(); i ++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (text.charAt(i) == '/')\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\treturn ""The name must be in the same location."";\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tString newLoc\t\t= FileUtils.getParentFolder(loc) + ""/"" + text;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tboolean currentFile\t= text.equals(FileUtils.getFileName(loc));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (currentFile)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn ""The name must be different than the current name."";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tremoveFromFileViewer(loc);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tFile f = new File(loc);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tboolean successful = f.renameTo(new File(newLoc));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (successful)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (fileCache.containsKey(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileCache.put(newLoc, fileCache.remove(loc));\r\n\t\t\t\t\t\t\t\t\t\tfileCacheSaved.put(newLoc, fileCacheSaved.remove(loc));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (tabFileLocations.containsValue(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tint tabId = tabFileIds.remove(loc);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tfileTabs.setTabText(tabId, FileUtils.getFileName(newLoc));\r\n\t\t\t\t\t\t\t\t\t\ttabFileLocations.put(tabId, newLoc);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\ttabFileIds.put(newLoc, tabId);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (tabFileIds.containsKey(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ttabFileIds.put(newLoc, tabFileIds.remove(loc));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (currentFile)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileLocation = newLoc;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tcodeField.setLanguage(Language.getLanguage(fileLocation));\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tcodeField.highlightSyntax();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (loc.equals(fileLocation))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileLocation = newLoc;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tboolean before = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (fileCacheSaved.containsKey(newLoc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tbefore = fileCacheSaved.get(newLoc);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n//\t\t\t\t\t\t\t\t\trefreshFileViewer();\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(newLoc);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tfileCacheSaved.put(newLoc, before);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(loc);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tString result = renameFileDialog.open();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (result != null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tFileUtils.removeEndingSlashes(result.replace('\\\\', '/'));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\twidgetDefaultSelected(e);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tnewFolder.addSelectionListener(menuListener);\r\n\t\tnewFile.addSelectionListener(menuListener);\r\n\t\trename.addSelectionListener(menuListener);\r\n\t\tdelete.addSelectionListener(menuListener);\r\n\t\t\r\n\t\ttreeMenu.addListener(new TreeMenuListener()\r\n\t\t{\r\n\t\t\tpublic void treeItemDoubleClicked(int id)\r\n\t\t\t{\r\n\t\t\t\tif (!treeItemDirectories.containsKey(id))\r\n\t\t\t\t{\r\n\t\t\t\t\tString location = treeItemLocations.get(id);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile(location);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpublic void treeItemRightClicked(int id)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tpublic void treeItemSelected(int id)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\tconsoleStream.addConsoleListener(new ConsoleListener()\r\n\t\t{\r\n\t\t\tpublic void onPrintln(final Object o)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tif (o instanceof String)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsoleField.append((String)o);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tpublic void onPrint(Object o)\r\n\t\t\t{\r\n\t\t\t\tif (o instanceof String)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsoleField.append((String)o);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t    ControlListener shellListener = new ControlListener()\r\n\t\t{\r\n\t\t\tpublic void controlMoved(ControlEvent e)\r\n\t\t\t{\r\n\t\t\t\tsetConfigDataValue(""window.x"", window.getLocation().x + """");\r\n\t\t\t\tsetConfigDataValue(""window.y"", window.getLocation().y + """");\r\n\t\t\t}\r\n\r\n\t\t\t// TODO clean this crap up.\r\n\t\t\tpublic void controlResized(ControlEvent e)\r\n\t\t\t{\r\n\t\t\t\tupdateLayout();\r\n\t\t\t\t\r\n\t\t\t\tif (!window.isMaximized() && !window.isFullscreen())\r\n\t\t\t\t{\r\n\t\t\t\t\tsetConfigDataValue(""window.width"", window.getWidth() + """");\r\n\t\t\t\t\tsetConfigDataValue(""window.height"", window.getHeight() + """");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tsetConfigDataValue(""window.maximized"", window.isMaximized() + """");\r\n\t\t\t\t\r\n\t\t\t\tsetConfigDataValue(""window.fullscreen"", window.isFullscreen() + """");\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\twindow.addControlListener(shellListener);\r\n\t\t\r\n\t\tshellListener.controlResized(null);\r\n\t\t\r\n\t\twindow.addPaintListener(new PaintListener()\r\n\t\t{\r\n\t\t\tpublic void paintControl(PaintEvent e)\r\n\t\t\t{\r\n\t\t\t\te.gc.drawString(codeField.getSelection().x + """", 0, 50);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""last.tabs""))\r\n\t\t{\r\n\t\t\tString lastTabs[] = CONFIG_DATA.get(""last.tabs"").split("";"");\r\n\t\t\t\r\n\t\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < lastTabs.length; i++)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\topenFile(lastTabs[i], false, i == lastTabs.length - 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\tbuilder.append(lastTabs[i] + ';');\r\n\t\t\t\t}\r\n\t\t\t\tcatch (IOException e)\r\n\t\t\t\t{\r\n\t\t\t\t\t// If file wasnt found.. or something else.\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsetConfigDataValue(""last.tabs"", builder.toString());\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Updates the components locations in the frame.\r\n\t */\r\n\tprivate void updateLayout()\r\n\t{\r\n\t\tcontentPanel.setSize(window.getClientArea().width, window.getClientArea().height);\r\n\t\t\r\n\t\tint width     = (int)(contentPanel.getSize().x / 100f * 80);\r\n\t\tint conHeight = (int)(contentPanel.getSize().y / 100f * 20);\r\n\t\t\r\n\t\tmenubar.setSize(contentPanel.getSize().x, menubar.getHeight());\r\n\t\tmenubar.setLocation(0, titleBarHeight);\r\n\t\t\r\n\t\tcodeField.setSize(width, contentPanel.getSize().y - conHeight - toolbar.getHeight() - fileTabs.getY());\r\n\t\tcodeField.setLocation(contentPanel.getSize().x - codeField.getWidth(), fileTabs.getHeight() + fileTabs.getY());\r\n\t\t\r\n\t\ttoolbar.setSize(toolbar.getWidth(), 25);\r\n\t\ttoolbar.setLocation(codeField.getX(), menubar.getY() + menubar.getHeight());\r\n\t\t\r\n\t\tboolean cTabs = programs.size() > 0;\r\n\t\tint cOffset   = cTabs ? consoleTabs.getHeight() : 0;\r\n\t\t\r\n\t\tconsoleField.setSize(width, conHeight - 5 - cOffset);\r\n\t\tconsoleField.setLocation(codeField.getBounds().x, codeField.getHeight() + codeField.getBounds().y + 5 + cOffset);\r\n\t\tSystem.out.println(""!"" + consoleField.getLocation().y);\r\n\t\t\r\n//\t\ttabs.setWidth(codeField.getWidth() + 2);\r\n\t\tfileTabs.setLocation(codeField.getX(), toolbar.getY() + toolbar.getHeight() + 2);\r\n\t\tconsoleTabs.setLocation(consoleField.getLocation().x, consoleField.getLocation().y - cOffset);\r\n\t\tSystem.out.println(consoleTabs.getY());\r\n\t\t\r\n\t\ttreeMenu.setLocation(treeMenu.getLocation().x, codeField.getY());\r\n\t\ttreeMenu.setSize(contentPanel.getSize().x - codeField.getWidth() - 5, consoleField.getLocation().y + consoleField.getHeight() - codeField.getY());\r\n\t\t\r\n\t\ttreeMenuSizer.setSize(5, treeMenu.getHeight());\r\n\t\ttreeMenuSizer.setLocation(treeMenu.getLocation().x + treeMenu.getWidth(), treeMenu.getLocation().y);\r\n\r\n\t\tcodeFieldSizer.setSize(codeField.getWidth(), 5);\r\n\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight());\r\n\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t}\r\n\t\r\n\t/**\r\n\t * The start method that is used to start up the whole ArrowIDE\r\n\t * program. Creates the window and puts the stuff in it.\r\n\t */\r\n\tpublic static void start()\r\n\t{\r\n//\t\tsplash = new Shell(display, SWT.ON_TOP);\r\n//\t\tsplash.setSize(largeIcon.getBounds().width, largeIcon.getBounds().height);\r\n//\t\tsplash.setLocation(screenBounds.width / 2 - splash.getSize().x / 2, screenBounds.height / 2 - splash.getSize().y / 2);\r\n//\t\t\r\n//\t\tLabel splashImage = new Label(splash, SWT.NONE);\r\n//\t\tsplashImage.setSize(splash.getSize());\r\n//\t\tsplashImage.setImage(largeIcon);\r\n\t\t\r\n//\t\tsplash = new SplashScreen(""res/images/iconlarge.png"", 3000);\r\n\t\t\r\n//\t\tsplash.open(3000);\r\n\t\t\r\n\t\tuntitledNumber = 0;\r\n\t\t\r\n\t\tArrowIDE ide = null;\r\n\r\n\t\tconfigLocation       = new File(""arrow.config"").getAbsolutePath().replace('\\\\', '/');\r\n\t\t\r\n\t\tcreateConfigData();\r\n\t\t\r\n\t\tif (workspaceCreated())\r\n\t\t{\r\n\t\t\tide = openIDE();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tchooseWorkspace();\r\n\t\t\t\r\n\t\t\tide = openIDE();\r\n\t\t}\r\n\t\t\r\n//\t\tSystem.out.println(OS.SendMessage(shell.handle, OS.EM_SETSEL, 5, 9));//new TCHAR(0, ""2dasdf"", true)));\r\n\t\t\r\n\t\twindow.setFocus();\r\n\t\twindow.forceActive();\r\n\t\twindow.forceFocus();\r\n\t\twindow.setActive();\r\n\t\t\r\n\t\twhile (!window.isDisposed())\r\n\t\t{\r\n\t\t\tif (!DISPLAY.readAndDispatch())\r\n\t\t\t{\r\n\t\t\t\tide.update();\r\n//\t\t\t\tsplash.update();\r\n\t\t\t\t\r\n\t\t\t\tDISPLAY.sleep();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (!restarting)\r\n\t\t{\r\n\t\t\texit(window);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create a new ArrowIDE and then open it.\r\n\t * \r\n\t * @return The created ArrowIDE object.\r\n\t */\r\n\tpublic static ArrowIDE openIDE()\r\n\t{\r\n\t\tString location = CONFIG_DATA.get(""workspace.location.relative"");\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tlocation = FileUtils.getAbsolutePath(location);\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t\texit(window);\r\n\t\t}\r\n\t\t\r\n\t\tCONFIG_DATA.put(""workspace.location"", location);\r\n\t\t\r\n\t\tArrowIDE ide = new ArrowIDE(DISPLAY);\r\n\t\t\r\n\t\twindow.open();\r\n\t\t\r\n\t\tImage largeIcon = null;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tlargeIcon = new Image(DISPLAY, new FileInputStream(""res/images/iconlarge.png""));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\t\twindow.setIcon(largeIcon);\r\n\t\t\r\n\t\tide.refreshFileViewer(true);\r\n\t\t\r\n\t\treturn ide;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Restarts the program to a fresh state.\r\n\t */\r\n\tpublic static void restart()\r\n\t{\r\n\t\trestarting = true;\r\n\t\t\r\n\t\twindow.dispose();\r\n\t\t\r\n\t\tstart();\r\n\t\t\r\n\t\trestarting = false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * The method that is called right before the exiting of the program.\r\n\t * \r\n\t * @param shell The window to close (The main window).\r\n\t */\r\n\tpublic static void exit(Window shell)\r\n\t{\r\n\t\texiting = true;\r\n\t\t\r\n\t\tif (shell != null)\r\n\t\t{\r\n\t\t\tshell.dispose();\r\n\t\t}\r\n\t\t\r\n\t\tif (fileViewerThreads != null)\r\n\t\t{\r\n\t\t\tfor (int i = fileViewerThreads.size() - 1; i >= 0; i--)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tfileViewerThreads.get(i).join();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (InterruptedException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tDisplay.getDefault().close();\r\n\t\t\r\n\t\tSystem.exit(0);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method used to choose the Workspace location. Sets the value of\r\n\t * the absolute location in the workspace.location key for the {@link #CONFIG_DATA}.\r\n\t */\r\n\tpublic static void chooseWorkspace()\r\n\t{\r\n\t\tDialogFilter filter = new DialogFilter()\r\n\t\t{\r\n\t\t\tpublic String filter(String text)\r\n\t\t\t{\r\n\t\t\t\tFile f = new File(text);\r\n\t\t\t\t\r\n\t\t\t\tif (!f.exists())\r\n\t\t\t\t{\r\n\t\t\t\t\treturn ""The directory must exist."";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tFileBrowseDialog chooseWorkspace = new FileBrowseDialog(""Choose your project workspace folder:"", ""Workspace:"", FileBrowseDialog.DIRECTORY);\r\n\t\tchooseWorkspace.addDialogFilter(filter);\r\n\t\t\r\n\t\tString location = chooseWorkspace.open();\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\texit(window);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""workspace.location.relative"", location);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tsetConfigDataValue(""workspace.location"", FileUtils.getAbsolutePath(location));\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns whether a workspace has been located or created.\r\n\t * \r\n\t * @return Whether the workspace has been located or created.\r\n\t */\r\n\tpublic static boolean workspaceCreated()\r\n\t{\r\n\t\tFile workspaceDirectory = null;\r\n\t\t\r\n\t\tif (!CONFIG_DATA.containsKey(""workspace.location""))\r\n\t\t{\r\n\t\t\tchooseWorkspace();\r\n\t\t}\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tsetConfigDataValue(""workspace.location"", FileUtils.getAbsolutePath(CONFIG_DATA.get(""workspace.location.relative"")));\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tworkspaceDirectory = new File(CONFIG_DATA.get(""workspace.location""));\r\n\t\t\r\n\t\treturn workspaceDirectory.exists();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that appends the given String to the value of the key given.\r\n\t * \r\n\t * @param key\tThe key to append to.\r\n\t * @param value\tThe value to append.\r\n\t */\r\n\tpublic static synchronized void appendConfigDataValue(String key, String value)\r\n\t{\r\n\t\tString prev = """";\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(key))\r\n\t\t{\r\n\t\t\tprev = CONFIG_DATA.get(key);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(key, prev + value);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set a CONFIG_DATA value in the HashMap and the arrow.config file.\r\n\t * If the key is not already in the file, it will add it to the end.\r\n\t * \r\n\t * @param key The key of the property to set.\r\n\t * @param value The value of the property to set.\r\n\t */\r\n\tpublic static synchronized void setConfigDataValue(String key, String value)\r\n\t{\r\n\t\tboolean added = false;\r\n\t\t\r\n\t\tCONFIG_DATA.put(key, value);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tPrintWriter p = new PrintWriter(new FileWriter(configLocation));\r\n\t\t\t\r\n\t\t\tString keys[] = CONFIG_DATA.keySet().toArray(new String[0]);\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < CONFIG_DATA.size(); i ++)\r\n\t\t\t{\r\n\t\t\t\tString lineKey   = null;\r\n\t\t\t\tString lineValue = null;\r\n\t\t\t\t\r\n\t\t\t\tlineKey          = keys[i];\r\n\t\t\t\t\r\n\t\t\t\tif (lineKey.equals(key))\r\n\t\t\t\t{\r\n\t\t\t\t\tlineValue = CONFIG_DATA.get(lineKey);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tlineValue = CONFIG_DATA.get(lineKey);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tp.print(lineKey + ""="" + lineValue + (i == CONFIG_DATA.size() - 1 ? """" : ""\\r\\n""));\r\n\t\t\t}\r\n\t\t\r\n\t\t\tp.close();\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates and initializes the CONFIG_DATA. Puts all of the correct\r\n\t * values into the HashMap.\r\n\t */\r\n\tprivate static void createConfigData()\r\n\t{\r\n\t\tFile file = new File(configLocation);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tConfigReader.read(configLocation, CONFIG_DATA);\r\n\t\t\t\r\n\t\t\tif (!CONFIG_DATA.containsKey(""workspace.location""))\r\n\t\t\t{\r\n\t\t\t\tPrintWriter writer;\r\n\t\t\t\twriter = new PrintWriter(new FileWriter(configLocation));\r\n\t\t\t\t\r\n\t\t\t\twriter.print(""workspace.location="");\r\n\t\t\t\t\r\n\t\t\t\twriter.close();\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that checks to see if the given location is a valid\r\n\t * project. If it is, then load all of the classpath and\r\n\t * project properties into the {@link #PROJECT_PROPERTIES} and\r\n\t * the classpaths into the {@link #PROJECT_CLASSPATHS}.\r\n\t * \r\n\t * @param location The location of the root folder of the project\r\n\t * \t\tto check.\r\n\t */\r\n\tpublic static void checkProject(String location)\r\n\t{\r\n\t\tlocation = FileUtils.removeEndingSlashes(location);\r\n\t\t\r\n\t\tString propsLocation = location + ""/.properties"";\r\n\t\tString cpLocation = location + ""/.classpath"";\r\n\t\t\r\n\t\tFile props = new File(propsLocation);\r\n\t\tFile cp = new File(cpLocation);\r\n\t\t\r\n\t\tif (props.isFile())\r\n\t\t{\r\n\t\t\tif (!PROJECT_PROPERTIES.containsKey(propsLocation))\r\n\t\t\t{\r\n\t\t\t\tHashMap<String, XMLItem[]> map = Reader.read(propsLocation);\r\n\t\t\t\t\r\n\t\t\t\tPROJECT_PROPERTIES.put(propsLocation, map);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (cp.isFile())\r\n\t\t{\r\n\t\t\tif (!PROJECT_CLASSPATHS.containsKey(cpLocation))\r\n\t\t\t{\r\n\t\t\t\tHashMap<String, XMLItem[]> map = Reader.read(cpLocation);\r\n\t\t\t\t\r\n\t\t\t\tPROJECT_CLASSPATHS.put(cpLocation, map);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a Dialog to ask for the project name. Next it creates a\r\n\t * directory/folder for the project and refreshes the file viewer.\r\n\t */\r\n\tpublic void newProject()\r\n\t{\r\n\t\tnewProjectDialog = new FileInputDialog(""Enter the name of your project:"", ""Project name:"", """", true, CONFIG_DATA.get(""workspace.location""), false);\r\n\t\t\r\n\t\tString location  = newProjectDialog.open();\r\n\t\t\r\n\t\tif (location != null)\r\n\t\t{\r\n\t\t\tFile f = new File(location);\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/bin"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/res"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/src"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tf = new File(location + ""/.classpath"");\r\n\t\t\t\tf.createNewFile();\r\n\t\t\t\r\n\t\t\t\tf = new File(location + ""/.properties"");\r\n\t\t\t\tf.createNewFile();\r\n\t\t\t}\r\n\t\t\tcatch (IOException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\r\n\t\t\taddToFileViewer(location);\r\n\t\t\taddToFileViewer(location + ""/bin"");\r\n\t\t\taddToFileViewer(location + ""/res"");\r\n\t\t\taddToFileViewer(location + ""/src"");\r\n\t\t\taddToFileViewer(location + ""/.classpath"");\r\n\t\t\taddToFileViewer(location + ""/.properties"");\r\n\t\t\trefreshFileViewer(location, false);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates new file and saves the old one. Switches to the new file\r\n\t * for editing automatically.\r\n\t */\r\n\tpublic void newFile()\r\n\t{\r\n\t\tcodeField.setText("""");\r\n\t\tcodeField.setLanguage(0);\r\n\t\t\r\n\t\tString location = ""Untitled"" + untitledNumber++;\r\n\t\t\r\n\t\tfileLocation = location;\r\n\t\t\r\n\t\taddTab(location, location);\r\n\t\t\r\n\t\tsetFileSaved(location, false);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new FileDialog at the absolute path of the workspace\r\n\t * location.\r\n\t * \r\n\t * @return The created, unopened FileDialog at the workspace path\r\n\t * \t\tused for opening files.\r\n\t */\r\n\tpublic FileDialog openFileBrowseDialog()\r\n\t{\r\n\t\tString location = null;\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""dialog.location""))\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""dialog.location"");\r\n\t\t\t\r\n\t\t\tif (!new File(location).exists())\r\n\t\t\t{\r\n\t\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t}\r\n\t\t\r\n\t\treturn openFileBrowseDialog(location);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiates a new FileDialog set for all types of files to be\r\n\t * set at the specified location.\r\n\t * \r\n\t * @param relativeLocation The location for the FileDialog to start.\r\n\t * @return The created, unopened FileDialog used for opening files.\r\n\t */\r\n\tpublic FileDialog openFileBrowseDialog(String location)\r\n\t{\r\n\t\tFileDialog dialog = new FileDialog(window.getShell(), SWT.OPEN | SWT.MULTI);\r\n\t\tdialog.setFilterNames(new String[] { ""All Files (*)"" });\r\n\t\tdialog.setFilterExtensions(new String[] { ""*"" });\r\n\t\tdialog.setFilterPath(location);\r\n\t\t\r\n\t\treturn dialog;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Open a file located at the specified location.\r\n\t * \r\n\t * @param location The location of the file to open.\r\n\t */\r\n\tpublic void openFile(String location) throws FileNotFoundException\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\topenFile(location, true, true);\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\tif (e instanceof FileNotFoundException)\r\n\t\t\t{\r\n\t\t\t\tthrow (FileNotFoundException)e;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that opens a file at the specified location and also\r\n\t * takes the option whether or not to cache the save the fileLocation\r\n\t * in the {@link #CONFIG_DATA} for reuse when the IDE is restarted.\r\n\t * \r\n\t * @param\tlocation The location of the file to open.\r\n\t * @param\tcache Whether or not to save the file for use after restart.\r\n\t * @param \tsetLanguage Whether or not to set the language of the codeField.\r\n\t * @throws\tFileNotFoundException Thrown if the file can not be found.\r\n\t * @throws\tIOException Thrown if there was trouble reading or writing.\r\n\t */\r\n\tpublic void openFile(String location, boolean cache, boolean setLanguage) throws FileNotFoundException, IOException\r\n\t{\r\n\t\tlocation = location.replace('\\\\', '/');\r\n\t\t\r\n\t\tboolean alreadyOpen = fileCache.containsKey(location);\r\n\t\t\r\n\t\tif (oldTabId != 0)\r\n\t\t{\r\n\t\t\ttabTopPixels.put(oldTabId, codeField.getTopPixel());\r\n\t\t\ttabSelection.put(oldTabId, codeField.getSelection());\r\n\t\t}\r\n\t\t\r\n\t\tif (alreadyOpen)\r\n\t\t{\r\n\t\t\tcodeField.setText(fileCache.get(location), true, true);\r\n\t\t\t\r\n\t\t\tcodeField.setLanguage(Language.getLanguage(location));\r\n\t\t\t\r\n\t\t\tcodeField.redraw();\r\n\t\t\t\r\n\t\t\tint tabId = tabFileIds.get(location);\r\n\t\t\t\r\n\t\t\tString oldLocation = fileLocation;\r\n\t\t\t\r\n\t\t\tfileLocation = location;\r\n\t\t\t\r\n\t\t\tfileTabs.setSelection(tabId);\r\n\t\t\t\r\n\t\t\tif (!location.equals(oldLocation))\r\n\t\t\t{\r\n\t\t\t\toldTabId = tabId;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tFile file = new File(location);\r\n\t\t\t\r\n\t\t\tif (file.isDirectory())\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tBufferedReader reader = new BufferedReader(new FileReader(file));\r\n\t\t\t\r\n\t\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\t\r\n\t\t\tString line = """";\r\n\t\t\t\r\n\t\t\twhile ((line = reader.readLine()) != null)\r\n\t\t\t{\r\n\t\t\t\tbuilder.append(line + ""\\r\\n"");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treader.close();\r\n\t\t\t\r\n\t\t\tif (builder.length() > 0)\r\n\t\t\t{\r\n\t\t\t\tbuilder.deleteCharAt(builder.length() - 1);\r\n\t\t\t\tbuilder.deleteCharAt(builder.length() - 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString fileContents = builder.toString();\r\n\t\t\t\r\n\t\t\tfileCache.put(location, fileContents);\r\n\t\t\tfileCacheSaved.put(location, true);\r\n\t\t\t\r\n\t\t\tcodeField.setText(fileContents, true);\r\n\t\t\t\r\n\t\t\tcodeField.redraw();\r\n\t\t\t\r\n\t\t\tif (!location.equals(fileLocation))\r\n\t\t\t{\r\n\t\t\t\taddTab(location, cache);\r\n\t\t\t\t\r\n\t\t\t\tif (fileLocation != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tint tabId = tabFileIds.get(location);\r\n\t\t\t\t\t\r\n\t\t\t\t\toldTabId = tabId;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileLocation = location;\r\n\t\t}\r\n\t\t\r\n\t\tif (setLanguage)\r\n\t\t{\r\n\t\t\tcodeField.setLanguage(Language.getLanguage(location));\r\n\t\t}\r\n\t\t\r\n\t\tcodeField.setFocus();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Opens a FileDialog to search for a file to open, then opens\r\n\t * the result.\r\n\t */\r\n\tpublic void openFile() throws FileNotFoundException\r\n\t{\r\n\t\tFileDialog dialog = openFileBrowseDialog();\r\n\t\t\r\n\t\tString location   = dialog.open();\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tlocation           = location.replace('\\\\', '/');\r\n\t\t\r\n\t\tString parent      = FileUtils.getParentFolder(location) + ""/"";\r\n\t\t\r\n\t\tString fileNames[] = dialog.getFileNames();\r\n\t\t\r\n\t\tfor (int i = 0; i < fileNames.length; i ++)\r\n\t\t{\r\n\t\t\topenFile(parent + fileNames[i]);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""dialog.location"", parent);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new FileDialog at the absolute path of the workspace\r\n\t * location.\r\n\t * \r\n\t * @return The created, unopened FileDialog at the workspace path\r\n\t * \t\tused for saving.\r\n\t */\r\n\tpublic FileDialog openSaveDialog()\r\n\t{\r\n\t\tString location = null;\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""dialog.location""))\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""dialog.location"");\r\n\t\t\t\r\n\t\t\tif (!new File(location).exists())\r\n\t\t\t{\r\n\t\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t}\r\n\t\t\r\n\t\treturn openSaveDialog(location);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiates a new FileDialog set for all types of files to be\r\n\t * set at the specified location.\r\n\t * \r\n\t * @param relativeLocation The location for the FileDialog to start.\r\n\t * @return The created, unopened FileDialog used for saving.\r\n\t */\r\n\tpublic FileDialog openSaveDialog(String location)\r\n\t{\r\n\t\tFileDialog dialog = new FileDialog(window.getShell(), SWT.SAVE);\r\n\t\tdialog.setFilterNames(new String[] { ""All Files (*)"" });\r\n\t\tdialog.setFilterExtensions(new String[] { ""*"" });\r\n\t\tdialog.setFilterPath(location);\r\n\t\t\r\n\t\treturn dialog;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Saves a file located at the specified location.\r\n\t * \r\n\t * @param location The location of the file to open.\r\n\t */\r\n\tpublic void saveFile(String location)\r\n\t{\r\n\t\tif (fileLocation == null && location == null)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\topenFile();\r\n\t\t\t}\r\n\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (location != null)\r\n\t\t{\r\n\t\t\tlocation = location.replace('\\\\', '/');\r\n\t\t}\r\n\t\t\r\n\t\tif (location == null || location.startsWith(""Untitled""))\r\n\t\t{\r\n\t\t\tboolean hasTab = tabFileIds.containsKey(location);\r\n\t\t\tint     tabId  = 0;\r\n\t\t\t\r\n\t\t\tif (hasTab)\r\n\t\t\t{\r\n\t\t\t\ttabId = tabFileIds.get(location);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString oldLoc = location;\r\n\t\t\t\r\n\t\t\tFileDialog dialog = openSaveDialog();\r\n\t\t\tlocation = dialog.open();\r\n\t\t\t\r\n\t\t\tif (location != null)\r\n\t\t\t{\r\n\t\t\t\tlocation = location.replace('\\\\', '/');\r\n\t\t\t\t\r\n\t\t\t\tif (hasTab)\r\n\t\t\t\t{\r\n\t\t\t\t\tString fileName = FileUtils.getFileName(location);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttabFileIds.remove(oldLoc);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfileTabs.setTabText(tabId, fileName);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttabFileIds.put(location, tabId);\r\n\t\t\t\t\ttabFileLocations.put(tabId, location);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (fileLocation == null)\r\n\t\t{\r\n\t\t\tfileLocation = """";\r\n\t\t}\r\n\t\t\r\n\t\tboolean saved\t\t= false;\r\n\t\t\r\n\t\tboolean currentFile = location.equals(fileLocation);\r\n\t\r\n\t\tif (fileCacheSaved.containsKey(fileLocation))\r\n\t\t{\r\n\t\t\tsaved = fileCacheSaved.get(fileLocation);\r\n\t\t}\r\n\t\t\r\n\t\tFileUtils.writeFile(location, codeField.getWritableText());\r\n\t\t\r\n\t\tfileLocation\t  = location;\r\n\t\t\r\n\t\tcodeField.setLanguage(Language.getLanguage(fileLocation));\r\n\t\t\r\n\t\tboolean highlight = codeField.getLanguage() == 0;\r\n\t\t//TODO: did if rog et something?\r\n//\t\tSystem.out.println(""done"");\r\n\t\tif (highlight)\r\n\t\t{\r\n\t\t\tcodeField.highlightSyntax();\r\n\t\t}\r\n//\t\tSystem.out.println(""done2"");\r\n\t\t\r\n\t\tif (currentFile)\r\n\t\t{\r\n\t\t\tsetFileSaved(location, true);\r\n\t\t}\r\n\t\t\r\n\t\tboolean isInViewer = treeItemLocations.containsKey(fileLocation);\r\n\t\t\r\n\t\tif (isInViewer)\r\n\t\t{\r\n\t\t\taddToFileViewer(location);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that adds the file at the specified location to file viewer.\r\n\t * Faster than refreshing the whole doggone file viewer.\r\n\t * \r\n\t * @param location The location of the file to add.\r\n\t */\r\n\tpublic void addToFileViewer(String location)\r\n\t{\r\n\t\tif (treeItemLocations.containsValue(location))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tFile file     = new File(location);\r\n\r\n\t\tboolean isDirectory = file.isDirectory();\r\n\t\t\r\n\t\tString name   = FileUtils.getFileName(location);\r\n\t\t\r\n\t\tImage img     = isDirectory ? folderImage : getFileImage(location);\r\n\t\t\r\n\t\tString parentLocation = FileUtils.getParentFolder(location);\r\n\t\t\r\n\t\tint parentId = 0;\r\n\t\t\r\n\t\tif (parentLocation.equals(CONFIG_DATA.get(""workspace.location"")))\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tparentId = treeItemIds.get(parentLocation);\r\n\t\t}\r\n\t\t\r\n\t\tint id        = treeMenu.addItem(parentId, name, img);\r\n\t\t\r\n\t\tif (fileCacheSaved.containsKey(location))\r\n\t\t{\r\n\t\t\tfileCacheSaved.put(location, true);\r\n\t\t}\r\n\r\n\t\ttreeItemLocations.put(id, location);\r\n\t\ttreeItemIds.put(location, id);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to remove the file at the specified location from the file\r\n\t * viewer. Faster than refreshing the whole doggone file viewer.\r\n\t * \r\n\t * @param location The location of the file to remove.\r\n\t */\r\n\tpublic void removeFromFileViewer(String location)\r\n\t{\r\n\t\tint id = treeItemIds.get(location);\r\n\t\t\r\n\t\ttreeItemDirectories.remove(id);\r\n\t\ttreeItemIds.remove(location);\r\n\t\ttreeItemLocations.remove(id);\r\n\t\t\r\n\t\tif (treeMenu.containsItem(id))\r\n\t\t{\r\n\t\t\ttreeMenu.removeItem(id);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Refresh the file viewer to all of the updated file names.\r\n\t * If a file has been added, add it to the\r\n\t * {@link #treeMenu file viewer}.\r\n\t * \r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(boolean ignoreRemove)\r\n\t{\r\n\t\trefreshFileViewer(CONFIG_DATA.get(""workspace.location""), 0, ignoreRemove);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to refresh the files within the directory of the specified\r\n\t * location.\r\n\t * \r\n\t * @param location The location of the root directory to refresh.\r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(String location, boolean ignoreRemove)\r\n\t{\r\n\t\tint parentId = treeItemIds.get(location);\r\n\t\t\r\n\t\trefreshFileViewer(location, parentId, ignoreRemove);\r\n\t}\r\n\r\n\t/**\r\n\t * Method to refresh the files within the directory of the specified\r\n\t * location.\r\n\t * \r\n\t * @param location The location of the root directory to refresh.\r\n\t * @param parentId The id of the TreeMenu item to refresh.\r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(final String location, final int parentId, final boolean ignoreRemove)\r\n\t{\r\n\t\tThread refreshThread = new Thread()\r\n\t\t{\r\n\t\t\tpublic void run()\r\n\t\t\t{\r\n\t\t\t\tFile parent  = new File(location);\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tfindSubFiles(parent, parentId, true);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (IOException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\texit(window);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tString locations[] = treeItemLocations.values().toArray(new String[0]);\r\n\t\t\t\t\r\n\t\t\t\tif (!ignoreRemove)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (int i = 0; i < locations.length; i ++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile file = new File(locations[i]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (!file.exists())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfinal int id = treeItemIds.get(locations[i]);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\ttreeItemIds.remove(locations[i]);\r\n\t\t\t\t\t\t\ttreeItemLocations.remove(id);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (treeMenu.containsItem(id))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ttreeMenu.removeItem(id);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ttreeMenu.alphabetize();\r\n\t\t\t\t\r\n\t\t\t\tfileViewerThreads.remove(this);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tfileViewerThreads.add(refreshThread);\r\n\t\t\r\n\t\trefreshThread.start();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Finds the sub-files of a directory and if they have not been\r\n\t * added, add them to the TreeMenu.\r\n\t * \r\n\t * @param file The directory to search sub-files for.\r\n\t * @param parent The id of the directory TreeMenu item.\r\n\t * @throws IOException \r\n\t */\r\n\tprivate void findSubFiles(File file, final int parent, boolean ignoreRemove) throws IOException\r\n\t{\r\n\t\tif (exiting)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tFile subFiles[] = file.listFiles();\r\n\t\t\r\n\t\tif (subFiles != null)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < subFiles.length; i ++)\r\n\t\t\t{\r\n\t\t\t\tboolean isDirectory = subFiles[i].isDirectory();\r\n\t\t\t\t\r\n\t\t\t\tfinal String orig          = subFiles[i].getCanonicalPath().replace('\\\\', '/');\r\n\t\t\t\tfinal String name          = FileUtils.getFileName(orig);\r\n\t\t\t\t\r\n\t\t\t\tif (name.charAt(0) == '.')\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n//\t\t\t\tString location      = orig;//orig.toLowerCase();\r\n\t\t\t\t\r\n\t\t\t\tint id               = 0;\r\n\t\t\t\t\r\n\t\t\t\tfinal Image img            = isDirectory ? folderImage : getFileImage(orig);\r\n\t\t\t\t\r\n\t\t\t\tboolean alreadyAdded = treeItemIds.containsKey(orig);\r\n\t\t\t\t\r\n\t\t\t\tif (!ignoreRemove)\r\n\t\t\t\t{\r\n\t\t\t\t\talreadyAdded = true;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (treeItemLocations.containsValue(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurId = treeItemIds.get(orig);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tid = curId;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (isDirectory)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfindSubFiles(subFiles[i], id, ignoreRemove);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Set text correctly of renamed files.\r\n\t\t\t\t\telse if (treeItemLocations.containsValue(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid = treeItemIds.get(orig);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttreeMenu.setTreeItemText(id, name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\talreadyAdded = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (!alreadyAdded)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (exiting)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurId = treeMenu.addItem(parent, name, img);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tid = curId;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (isDirectory)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfindSubFiles(subFiles[i], id, ignoreRemove);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttreeItemDirectories.put(id, orig);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (fileCacheSaved.containsKey(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfileCacheSaved.put(orig, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\ttreeItemLocations.put(id, orig);\r\n\t\t\t\t\ttreeItemIds.put(orig, id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that occurs whenever the content\r\n\t * of a TextField is changed. In this case it tells you that\r\n\t * the current file has been changed and needs to be saved.\r\n\t */\r\n\tpublic void contentChanged(ContentEvent event)\r\n\t{\r\n\t\tObject source = event.getSource();\r\n\t\t\r\n\t\tif (source == codeField)\r\n\t\t{\r\n\t\t\tif (fileLocation != null)\r\n\t\t\t{\r\n\t\t\t\tsetFileSaved(fileLocation, false);\r\n\t\t\t\t\r\n\t\t\t\tfinal String code = codeField.getText();\r\n\t\t\t\t\r\n\t\t\t\tnew Thread()\r\n\t\t\t\t{\r\n\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcodeField.clearErrors();\r\n\t\t\t\t\t\tfinal String outputLocation = FileUtils.getParentFolder(fileLocation) + ""/"";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\ttry\r\n//\t\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\t\tconsoleField.setText("""");\r\n//\t\t\t\t\t\t\t\t\t\r\n//\t\t\t\t\t\t\t\t\tLanguage.compile(fileLocation, codeField.getRawText(), outputLocation, consoleStream);\r\n//\t\t\t\t\t\t\t\t}\r\n//\t\t\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n//\t\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n//\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tLanguage.compile(fileLocation, code, outputLocation, null);\r\n\t\t\t\t\t}\r\n\t\t\t\t}.start();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Return the Image associated with the type of file given through\r\n\t * the location parameter.\r\n\t * \r\n\t * @param location The location of the file.\r\n\t * @return The Image associated with the file.\r\n\t */\r\n\tprivate Image getFileImage(String location)\r\n\t{\r\n\t\tImage img = null;\r\n\t\t\r\n\t\tint fileType = FileUtils.getFileType(location);\r\n\t\t\r\n\t\tif (fileType == FileUtils.JAVA)\r\n\t\t{\r\n\t\t\timg = javaFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.CLASS)\r\n\t\t{\r\n\t\t\timg = classFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.GLSL)\r\n\t\t{\r\n\t\t\timg = glslFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.TXT)\r\n\t\t{\r\n\t\t\timg = txtFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.RTF)\r\n\t\t{\r\n\t\t\timg = rtfFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.EXE)\r\n\t\t{\r\n\t\t\timg = exeFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.ASSEMBLY)\r\n\t\t{\r\n\t\t\timg = asmFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.CPP)\r\n\t\t{\r\n\t\t\timg = cppFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.H)\r\n\t\t{\r\n\t\t\timg = hFileImage;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\timg = fileImage;\r\n\t\t}\r\n\t\t\r\n\t\treturn img;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks whether the text returned from the codeField is null, or\r\n\t * if it is an empty String.\r\n\t * \r\n\t * @return Whether the codeField is empty.\r\n\t */\r\n\tpublic boolean isCodeFieldEmpty()\r\n\t{\r\n\t\tString text = codeField.getText();\r\n\t\t\r\n\t\treturn text == null || text.equals("""");\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set the tab and TreeMenu item associated with the file\r\n\t * location to start with a '*' depending if the file is\r\n\t * saved or not.\r\n\t * \r\n\t * @param location The location of the file to set as saved or not.\r\n\t * @param saved Whether the file is saved or not.\r\n\t */\r\n\tpublic void setFileSaved(String location, boolean saved)\r\n\t{\r\n\t\tString locKey\t= location;\r\n\t\t\r\n\t\tString text\t\t= null;\r\n\t\t\r\n\t\tint id\t\t\t= 0;\r\n\t\t\r\n\t\tif (saved)\r\n\t\t{\r\n\t\t\tif (treeItemIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tid = treeItemIds.get(locKey);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (tabFileIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tint tabId\t= tabFileIds.get(locKey);\r\n\t\t\t\t\r\n\t\t\t\ttext\t\t= fileTabs.getTabText(tabId);\r\n\t\t\t}\r\n\t\t\telse if (treeItemLocations.containsValue(locKey))\r\n\t\t\t{\r\n\t\t\t\ttext = treeMenu.getTreeItemText(id);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (text != null && text.startsWith(""*""))\r\n\t\t\t{\r\n\t\t\t\ttext = text.substring(1);\r\n\t\t\t\r\n\t\t\t\tif (treeItemLocations.containsValue(locKey))\r\n\t\t\t\t{\r\n\t\t\t\t\ttreeMenu.setTreeItemText(id, text);\r\n\t\t\t\t}\r\n\t\t\t\tif (tabFileIds.containsKey(locKey))\r\n\t\t\t\t{\r\n\t\t\t\t\tfileTabs.setTabText(tabFileIds.get(locKey), text);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileCacheSaved.put(locKey, true);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tint tabId = tabFileIds.get(locKey);\r\n\t\t\t\r\n\t\t\ttext = fileTabs.getTabText(tabId);\r\n\t\t\t\r\n\t\t\tif (!text.startsWith(""*""))\r\n\t\t\t{\r\n\t\t\t\ttext = ""*"" + text;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (treeItemIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tid = treeItemIds.get(locKey);\r\n\t\t\t\ttreeMenu.setTreeItemText(id, text);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileTabs.setTabText(tabId, text);\r\n\t\t\t\r\n\t\t\tfileCacheSaved.put(locKey, false);\r\n\t\t\t\r\n\t\t\tString fileContents = codeField.getText();\r\n\t\t\t\r\n\t\t\tfileCache.put(locKey, fileContents);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to remove all of the TreeMenu items and clear the\r\n\t * HashMaps.\r\n\t */\r\n\tpublic void removeAllTreeItems()\r\n\t{\r\n\t\ttreeMenu.removeAllItems();\r\n\t\t\r\n\t\ttreeItemLocations.clear();\r\n\t\ttreeItemIds.clear();\r\n\t\ttreeItemDirectories.clear();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add a tab of the file at fileLocation to the TabMenu.\r\n\t * \r\n\t * @param fileLocation The location of the file to represent.\r\n\t */\r\n\tprivate void addTab(String fileLocation)\r\n\t{\r\n\t\taddTab(fileLocation, true);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to add a tab at the specified location.\r\n\t * \r\n\t * @param fileLocation The location of the file that was opened.\r\n\t * @param cache Whether or not to save the tab for later use after\r\n\t * \t\trestart.\r\n\t */\r\n\tprivate void addTab(String fileLocation, boolean cache)\r\n\t{\r\n\t\tString fileName = FileUtils.getFileName(fileLocation);\r\n\t\t\r\n\t\taddTab(fileName, fileLocation, cache);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add a tab of the file with the fileName and location to the TabMenu.\r\n\t * \r\n\t * @param fileName The name of the file to represent.\r\n\t * @param location The location, including the fileName, of the file.\r\n\t */\r\n\tprivate void addTab(String fileName, String location)\r\n\t{\r\n\t\taddTab(fileName, location, true);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to add a tab at the specified location with the tab labeled\r\n\t * with the fileName param.\r\n\t * \r\n\t * @param fileName The String to label the tab with.\r\n\t * @param location The location of the file that was opened.\r\n\t * @param cache Whether or not to save the tab for later use after\r\n\t * \t\trestart.\r\n\t */\r\n\tprivate void addTab(String fileName, final String location, boolean cache)\r\n\t{\r\n\t\tint id = fileTabs.addTab(fileName);\r\n\t\t\r\n\t\tif (oldTabId == 0)\r\n\t\t{\r\n\t\t\toldTabId = id;\r\n\t\t}\r\n\t\t\r\n\t\ttabTopPixels.put(id, 0);\r\n\t\ttabSelection.put(id, new Point(0, 0));\r\n\t\t\r\n\t\ttabFileLocations.put(id, location);\r\n\t\ttabFileIds.put(location, id);\r\n\t\t\r\n\t\tif (cache)\r\n\t\t{\r\n\t\t\tnew Thread()\r\n\t\t\t{\r\n\t\t\t\tpublic void run()\r\n\t\t\t\t{\r\n\t\t\t\t\tappendConfigDataValue(""last.tabs"", location + "";"");\r\n\t\t\t\t}\r\n\t\t\t}.start();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a tab's close icon\r\n\t * is pressed. If the file in the tab is not saved, ask whether to\r\n\t * save it or not.\r\n\t * \r\n\t * @param event The TabMenuEvent sent with the tab close.\r\n\t * @return Whether to close the tab or not.\r\n\t */\r\n\tpublic boolean tabClosing(TabMenuEvent event)\r\n\t{\r\n\t\tint tabId       = event.getTabId();\r\n\t\t\r\n\t\tboolean cancel = false;\r\n\t\t\r\n\t\tif (event.getSource() == fileTabs)\r\n\t\t{\r\n\t\t\tint newId\t\t= fileTabs.getSelected();\r\n\t\t\t\r\n\t\t\tString location = tabFileLocations.get(tabId);\r\n\t\t\tString result\t= null;\r\n\t\r\n\t\t\tboolean askSave\t= false;\r\n\t\t\t\r\n\t\t\tif (fileCacheSaved.containsKey(location))\r\n\t\t\t{\r\n\t\t\t\tif (!fileCacheSaved.get(location))\r\n\t\t\t\t{\r\n\t\t\t\t\taskSave = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif (!isCodeFieldEmpty())\r\n\t\t\t\t{\r\n\t\t\t\t\taskSave = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (askSave)\r\n\t\t\t{\r\n\t\t\t\tOptionDialog saveDialog = new OptionDialog(""Save?"", ""\\"""" + FileUtils.getFileName(location) + ""\\"" has not been saved, would you like to save it?"");\r\n\t\t\t\t\r\n\t\t\t\tresult = saveDialog.open();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!askSave || (result != null && (result.equals(""yes"") || result.equals(""no""))))\r\n\t\t\t{\r\n\t\t\t\tString files = CONFIG_DATA.get(""last.tabs"").replace((tabFileLocations.get(tabId) + ';'), """");\r\n\t\t\t\tsetConfigDataValue(""last.tabs"", files);\r\n\t\t\t\t\r\n\t\t\t\ttabFileLocations.remove(tabId);\r\n\t\t\t\ttabFileIds.remove(location);\r\n\t\t\t\ttabTopPixels.remove(tabId);\r\n\t\t\t\ttabSelection.remove(tabId);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (result != null)\r\n\t\t\t{\r\n\t\t\t\tif (result.equals(""yes""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(location);\r\n\t\t\t\t}\r\n\t\t\t\telse if (result.equals(""no""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsetFileSaved(location, true);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tcancel = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcancel = askSave;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (cancel)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfileCache.remove(location);\r\n\t\t\t\tfileCacheSaved.remove(location);\r\n\t\t\t\t\r\n\t\t\t\tif (tabId == oldTabId)\r\n\t\t\t\t{\r\n\t\t\t\t\toldTabId = newId;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (tabId != newId)\r\n\t\t\t\t{\r\n\t\t\t\t\tString loc = tabFileLocations.get(newId);\r\n\t\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile(loc);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfileLocation = null;\r\n\t\t\t\t\tcodeField.setText("""");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (event.getSource() == consoleTabs)\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn !cancel;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a tab is selected\r\n\t * in a TabMenu. It then opens the file.\r\n\t * \r\n\t * @param event The TabMenuEvent sent with the tab select.\r\n\t */\r\n\tpublic void tabSelected(TabMenuEvent event)\r\n\t{\r\n\t\tint tabId = event.getTabId();\r\n\t\t\r\n\t\tif (event.getSource() == fileTabs)\r\n\t\t{\r\n\t\t\tString location = tabFileLocations.get(tabId);\r\n\t\t\t\r\n\t\t\tif (location.equals(fileLocation))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (location != null)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\topenFile(location);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tcodeField.setSelection(tabSelection.get(tabId));\r\n\t\t\t\tcodeField.setTopPixel(tabTopPixels.get(tabId));\r\n\t\t\t\tcodeField.select();\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (event.getSource() == consoleTabs)\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a key is pressed\r\n\t * in a TextField.\r\n\t * \r\n\t * @param e The CodeFieldEvent that was passed.\r\n\t */\r\n\tpublic void keyPressed(CodeFieldEvent e)\r\n\t{\r\n\t\tif (e.getSource() == codeField)\r\n\t\t{\r\n\t\t\tif (e.getStateMask() == (Integer)PROPERTIES.get(""key.control"") && e.getKeyCode() == 's')\r\n\t\t\t{\r\n\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that deletes the file at the specified location.\r\n\t * \r\n\t * @param location The location of the file to be deleted.\r\n\t * @return Whether the file was successfully deleted or not.\r\n\t */\r\n\tpublic boolean deleteFile(String location)\r\n\t{\r\n\t\tint treeId    = treeItemIds.get(location);\r\n\t\t\r\n\t\ttreeItemLocations.remove(treeId);\r\n\t\ttreeItemDirectories.remove(treeId);\r\n\t\tfileCache.remove(location);\r\n\t\tfileCacheSaved.remove(location);\r\n\t\t\r\n\t\ttreeMenu.removeItem(treeId);\r\n\t\t\r\n\t\tboolean deleted = FileUtils.delete(new File(location));\r\n\t\t\r\n\t\treturn deleted;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to synchronistically update the components of the main\r\n\t * window.\r\n\t */\r\n\tpublic void update()\r\n\t{\r\n\t\t\r\n\t}\r\n}\r\n----------------------------------- SOURCE END -------------------------------------",1364132434101
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1364132434102
error,log,,,"Error in JDT Core during AST creation",1364132434102
error,log,,,"Exception occurred during compilation unit conversion:\r\n----------------------------------- SOURCE BEGIN -------------------------------------\r\npackage net.foxycorndog.arrowide;\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.awt.TextField;\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\nimport java.io.PrintStream;\r\nimport java.net.URLDecoder;\r\n\r\nimport net.foxycorndog.arrowide.color.ColorUtils;\r\nimport net.foxycorndog.arrowide.components.CodeField;\r\nimport net.foxycorndog.arrowide.components.CodeFieldEvent;\r\nimport net.foxycorndog.arrowide.components.CodeFieldListener;\r\nimport net.foxycorndog.arrowide.components.CompositeSizer;\r\nimport net.foxycorndog.arrowide.components.ConsoleField;\r\nimport net.foxycorndog.arrowide.components.ContentEvent;\r\nimport net.foxycorndog.arrowide.components.ContentListener;\r\nimport net.foxycorndog.arrowide.components.SizerListener;\r\nimport net.foxycorndog.arrowide.components.SplashScreen;\r\nimport net.foxycorndog.arrowide.components.TitleBar;\r\nimport net.foxycorndog.arrowide.components.menubar.Menubar;\r\nimport net.foxycorndog.arrowide.components.menubar.MenubarListener;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenu;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenuEvent;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenuListener;\r\nimport net.foxycorndog.arrowide.components.toolbar.Toolbar;\r\nimport net.foxycorndog.arrowide.components.toolbar.ToolbarListener;\r\nimport net.foxycorndog.arrowide.components.treemenu.TreeMenu;\r\nimport net.foxycorndog.arrowide.components.treemenu.TreeMenuListener;\r\nimport net.foxycorndog.arrowide.components.window.Window;\r\nimport net.foxycorndog.arrowide.console.ConsoleListener;\r\nimport net.foxycorndog.arrowide.console.ConsoleStream;\r\nimport net.foxycorndog.arrowide.dialog.Dialog;\r\nimport net.foxycorndog.arrowide.dialog.DialogFilter;\r\nimport net.foxycorndog.arrowide.dialog.FileBrowseDialog;\r\nimport net.foxycorndog.arrowide.dialog.FileInputDialog;\r\nimport net.foxycorndog.arrowide.dialog.OptionDialog;\r\nimport net.foxycorndog.arrowide.dialog.PreferencesDialog;\r\nimport net.foxycorndog.arrowide.dialog.DialogPanel;\r\nimport net.foxycorndog.arrowide.dialog.PropertiesDialog;\r\nimport net.foxycorndog.arrowide.dialog.TextInputDialog;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.AssemblyPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.CppPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.GeneralPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.JavaPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.PythonPanel;\r\nimport net.foxycorndog.arrowide.file.ConfigReader;\r\nimport net.foxycorndog.arrowide.file.FileUtils;\r\nimport net.foxycorndog.arrowide.formatter.Formatter;\r\nimport net.foxycorndog.arrowide.language.CompilerListener;\r\nimport net.foxycorndog.arrowide.language.Keyword;\r\nimport net.foxycorndog.arrowide.language.Language;\r\nimport net.foxycorndog.arrowide.language.CompileOutput;\r\nimport net.foxycorndog.arrowide.language.java.JavaLanguage;\r\nimport net.foxycorndog.arrowide.printer.TextPrinter;\r\nimport net.foxycorndog.arrowide.xml.Reader;\r\nimport net.foxycorndog.arrowide.xml.XMLItem;\r\n\r\nimport org.eclipse.swt.SWT;\r\nimport org.eclipse.swt.events.ControlEvent;\r\nimport org.eclipse.swt.events.ControlListener;\r\nimport org.eclipse.swt.events.DisposeEvent;\r\nimport org.eclipse.swt.events.DisposeListener;\r\nimport org.eclipse.swt.events.KeyEvent;\r\nimport org.eclipse.swt.events.KeyListener;\r\nimport org.eclipse.swt.events.MouseEvent;\r\nimport org.eclipse.swt.events.MouseListener;\r\nimport org.eclipse.swt.events.MouseMoveListener;\r\nimport org.eclipse.swt.events.PaintEvent;\r\nimport org.eclipse.swt.events.PaintListener;\r\nimport org.eclipse.swt.events.SelectionEvent;\r\nimport org.eclipse.swt.events.SelectionListener;\r\nimport org.eclipse.swt.graphics.Color;\r\nimport org.eclipse.swt.graphics.Font;\r\nimport org.eclipse.swt.graphics.FontData;\r\nimport org.eclipse.swt.graphics.GC;\r\nimport org.eclipse.swt.graphics.Image;\r\nimport org.eclipse.swt.graphics.Point;\r\nimport org.eclipse.swt.graphics.Rectangle;\r\nimport org.eclipse.swt.layout.FillLayout;\r\nimport org.eclipse.swt.layout.GridData;\r\nimport org.eclipse.swt.layout.GridLayout;\r\nimport org.eclipse.swt.opengl.GLCanvas;\r\nimport org.eclipse.swt.opengl.GLData;\r\nimport org.eclipse.swt.printing.PrintDialog;\r\nimport org.eclipse.swt.printing.Printer;\r\nimport org.eclipse.swt.printing.PrinterData;\r\nimport org.eclipse.swt.widgets.Button;\r\nimport org.eclipse.swt.widgets.Composite;\r\nimport org.eclipse.swt.widgets.DirectoryDialog;\r\nimport org.eclipse.swt.widgets.Display;\r\nimport org.eclipse.swt.widgets.Event;\r\nimport org.eclipse.swt.widgets.FileDialog;\r\nimport org.eclipse.swt.widgets.Label;\r\nimport org.eclipse.swt.widgets.Listener;\r\nimport org.eclipse.swt.widgets.Menu;\r\nimport org.eclipse.swt.widgets.MenuItem;\r\nimport org.eclipse.swt.widgets.Monitor;\r\nimport org.eclipse.swt.widgets.Shell;\r\nimport org.eclipse.swt.widgets.TabFolder;\r\nimport org.eclipse.swt.widgets.TabItem;\r\nimport org.eclipse.swt.widgets.Text;\r\nimport org.eclipse.swt.widgets.Widget;\r\nimport org.lwjgl.LWJGLException;\r\nimport org.lwjgl.Sys;\r\nimport org.lwjgl.opengl.GLContext;\r\n\r\n/**\r\n * Main class for the ArrowIDE program.\r\n * \r\n * @author\tBraden Steffaniak\r\n * @since\tFeb 13, 2013 at 4:46:00 PM\r\n * @since\tv0.7\r\n * @version\tFeb 13, 2013 at 4:46:00 PM\r\n * @version\tv0.7\r\n */\r\npublic class ArrowIDE implements ContentListener, CodeFieldListener, TabMenuListener\r\n{\r\n\tprivate boolean\t\t\t\t\t\t\t\tfilesNeedRefresh;\r\n\tprivate boolean\t\t\t\t\t\t\t\tcustom;\r\n\t\r\n\tprivate int\t\t\t\t\t\t\t\t\tcurId;\r\n\tprivate int\t\t\t\t\t\t\t\t\ttitleBarHeight;\r\n\tprivate int\t\t\t\t\t\t\t\t\toldTabId;\r\n\r\n\tprivate CodeField\t\t\t\t\t\t\tcodeField;\r\n\r\n\tprivate ConsoleField\t\t\t\t\t\tconsoleField;\r\n\r\n\tprivate String\t\t\t\t\t\t\t\tfileLocation;\r\n\r\n\tprivate Image\t\t\t\t\t\t\t\tfolderImage, fileImage,\r\n\t\t\tjavaFileImage, classFileImage, glslFileImage, txtFileImage,\r\n\t\t\trtfFileImage, exeFileImage, asmFileImage, cppFileImage, hFileImage;\r\n\r\n\tprivate PropertiesDialog\t\t\t\t\tproperties;\r\n\tprivate PreferencesDialog\t\t\t\t\tpreferences;\r\n\r\n\tprivate Composite\t\t\t\t\t\t\tcontentPanel;\r\n\t\r\n\tprivate Menubar\t\t\t\t\t\t\t\tmenubar;\r\n\r\n\tprivate TitleBar\t\t\t\t\t\t\ttitleBar;\r\n\t\r\n\tprivate Toolbar\t\t\t\t\t\t\t\ttoolbar;\r\n\r\n\tprivate TreeMenu\t\t\t\t\t\t\ttreeMenu;\r\n\t\r\n\tprivate CompositeSizer\t\t\t\t\t\ttreeMenuSizer, codeFieldSizer;\r\n\r\n\tprivate TabMenu\t\t\t\t\t\t\t\tfileTabs, consoleTabs;\r\n\r\n\tprivate ConsoleStream\t\t\t\t\t\tconsoleStream;\r\n\r\n\tprivate Dialog\t\t\t\t\t\t\t\tnewFolderDialog, newFileDialog,\r\n\t\t\tnewProjectDialog;\r\n\tprivate TextInputDialog\t\t\t\t\t\trenameFileDialog;\r\n\r\n\tprivate HashMap<Integer, String>\t\t\ttreeItemLocations;\r\n\tprivate HashMap<String, Integer>\t\t\ttreeItemIds;\r\n\tprivate HashMap<Integer, String>\t\t\ttreeItemDirectories;\r\n\tprivate HashMap<String, String>\t\t\t\tfileCache;\r\n\tprivate HashMap<String, Boolean>\t\t\tfileCacheSaved;\r\n\tprivate HashMap<Integer, String>\t\t\ttabFileLocations;\r\n\tprivate HashMap<String, Integer>\t\t\ttabFileIds;\r\n\tprivate HashMap<Integer, Integer>\t\t\ttabTopPixels;\r\n\tprivate HashMap<Integer, Point>\t\t\t\ttabSelection;\r\n//\tprivate HashMap<, Integer>\t\t\t\t\tconsoleTabIds;\r\n\tprivate HashMap<Integer, Program>\t\t\t\t\tconsoleTabPrograms;\r\n\t\r\n\tprivate ArrayList<Program>\t\t\t\t\tprograms;\r\n\r\n\tprivate static boolean\t\t\t\t\t\trestarting;\r\n\tprivate static boolean\t\t\t\t\t\texiting;\r\n\t\r\n\tprivate static int\t\t\t\t\t\t\tuntitledNumber;\r\n\t\r\n\tprivate static Window\t\t\t\t\t\twindow;\r\n\t\r\n\tprivate static SplashScreen\t\t\t\t\tsplash;\r\n\r\n\tprivate static String\t\t\t\t\t\tconfigLocation;\r\n\r\n\tpublic static final Display\t\t\t\t\tDISPLAY;\r\n\r\n\tpublic static final Color\t\t\t\t\tTITLE_BAR_BACKGROUND, TITLE_BAR_FOREGROUND, FOCUS_COLOR, NON_FOCUS_COLOR;\r\n\t\r\n\tpublic static final HashMap<String, String>\tCONFIG_DATA;\r\n\t\r\n\tpublic static final HashMap<String, HashMap<String, XMLItem[]>>\tPROJECT_PROPERTIES;\r\n\tpublic static final HashMap<String, HashMap<String, XMLItem[]>>\tPROJECT_CLASSPATHS;\r\n\t// public static final HashMap<Integer, String> CONFIG_LINE_NUMBER_DATA;\r\n\t// public static final HashMap<String, Integer> CONFIG_LINE_NUMBERS;\r\n\r\n\tpublic static final HashMap<String, Object>\tPROPERTIES;\r\n\t\r\n\tprivate static ArrayList<Thread>\t\t\tfileViewerThreads;\r\n\t\r\n\tprivate class Efficient\r\n\t{\r\n\t\tprivate int i;\r\n\t\t\r\n\t\tprivate String s;\r\n\t\t\r\n\t\tpublic Efficient(String s, int i)\r\n\t\t{\r\n\t\t\tthis.s = s;\r\n\t\t\tthis.i = i;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiate the {@link #DISPLAY display}, and the color palette.\r\n\t */\r\n\tstatic\r\n\t{\r\n\t\tDISPLAY = new Display();\r\n\t\t\r\n\t\tTITLE_BAR_BACKGROUND = new Color(DISPLAY, 240, 240, 240);\r\n\t\tTITLE_BAR_FOREGROUND = TITLE_BAR_BACKGROUND;\r\n\t\t\r\n\t\tFOCUS_COLOR = new Color(DISPLAY, 255, 255, 255);\r\n\t\tNON_FOCUS_COLOR = ColorUtils.lighten(TITLE_BAR_BACKGROUND, 10);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize the CONFIG_DATA HashMaps and set the os properties\r\n\t * in the PROPERTIES HashMap.\r\n\t */\r\n\tstatic\r\n\t{\r\n\t\tCONFIG_DATA             = new HashMap<String, String>();\r\n\t\t\r\n\t\tPROJECT_PROPERTIES      = new HashMap<String, HashMap<String, XMLItem[]>>();\r\n\t\tPROJECT_CLASSPATHS      = new HashMap<String, HashMap<String, XMLItem[]>>();\r\n//\t\tCONFIG_LINE_NUMBER_DATA = new HashMap<Integer, String>();\r\n//\t\tCONFIG_LINE_NUMBERS     = new HashMap<String, Integer>();\r\n\t\t\r\n\t\tPROPERTIES              = new HashMap<String, Object>();\r\n\t\t\r\n\t\tString osName = System.getProperty(""os.name"");\r\n\t\t\r\n\t\tif (osName.toLowerCase().contains(""mac""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""macosx"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.BORDER);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.COMMAND);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", """");\r\n\t\t\tPROPERTIES.put(""colon"", ';');\r\n\t\t}\r\n\t\telse if (osName.toLowerCase().contains(""win""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""windows"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.NONE);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.CTRL);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", "".exe"");\r\n\t\t\tPROPERTIES.put(""colon"", ';');\r\n\t\t}\r\n\t\telse if (osName.toLowerCase().contains(""lin""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""linux"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.NONE);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.CTRL);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", """");\r\n\t\t\tPROPERTIES.put(""colon"", ':');\r\n\t\t}\r\n\t\t\r\n\t\tsetArchitecture();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set the os.arch value for the {@link #PROPERTIES} variable.\r\n\t */\r\n\tprivate static void setArchitecture()\r\n\t{\r\n\t\tint bitness = 32;\r\n\t\t\r\n\t\tProcessBuilder b = new ProcessBuilder(new String[] { ""res/bitness"" });\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tProcess p = b.start();\r\n\t\t\t\r\n\t\t\tInputStream in = p.getInputStream();\r\n\t\t\t\r\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(in));\r\n\t\t\t\r\n\t\t\tString line = null;\r\n\t\t\t\r\n\t\t\twhile ((line = reader.readLine()) != null)\r\n\t\t\t{\r\n\t\t\t\tbitness = Integer.valueOf(line);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tPROPERTIES.put(""os.arch"", bitness);\r\n\t}\r\n\t\r\n\t/**\r\n\t * The initial starting point of the program. It is only called\r\n\t * whenever the program is started from scratch without a restart.\r\n\t * \r\n\t * @param args The command line arguments. (Unused)\r\n\t */\r\n\tpublic static void main(String args[])\r\n\t{\r\n\t\tstart();\r\n\t}\r\n\t\r\n\t/**\r\n\t * The constructor for this class. Initializes the window that is\r\n\t * used for programming.\r\n\t * \r\n\t * @param display The display to use.\r\n\t */\r\n\tpublic ArrowIDE(final Display display)\r\n\t{\r\n//\t\tSystem.out.println(map.get(""Contacts.Contact.ContactId"")[0].getContents());\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""window.custom""))\r\n\t\t{\r\n\t\t\tcustom = Boolean.valueOf(CONFIG_DATA.get(""window.custom""));\r\n\t\t}\r\n\t\t\r\n\t\tMonitor monitor = DISPLAY.getPrimaryMonitor();\r\n\t\tfinal Rectangle screenBounds = monitor.getBounds();\r\n\t\t\r\n\t\tint height = (int)(monitor.getBounds().height / 1.5f);\r\n\t\tint width  = (int)(monitor.getBounds().width / 1.5f);\r\n\t\t\r\n\t\twindow = new Window(DISPLAY, custom);//, SWT.SHELL_TRIM & (~SWT.RESIZE));\r\n\t\twindow.setSize(width, height);\r\n\t\t\r\n\t\tfinal Rectangle shellBounds = window.getBounds();\r\n\t\t \r\n\t\twindow.setLocation(screenBounds.width / 2 - shellBounds.width / 2, screenBounds.height / 2 - shellBounds.height / 2);\r\n\t\twindow.setTitle(""Arrow IDE"");\r\n\t\t\r\n\t\tPROPERTIES.put(""arrowide.location"", FileUtils.getParentFolder(configLocation));\r\n\t\t\r\n\t\t/**\r\n\t\t * Set up the OpenGL (lwjgl) capabilities for the program.\r\n\t\t */\r\n\t\t{\r\n\t\t\tSystem.setProperty(""org.lwjgl.librarypath"", PROPERTIES.get(""arrowide.location"") + ""/res/native/"" + PROPERTIES.get(""os.name"") + ""/"");\r\n\t\t\t\r\n\t\t\tComposite comp = new Composite(window.getShell(), SWT.NONE);\r\n\t\t\tcomp.setLayout(new FillLayout());\r\n\t\t\t\r\n\t\t\tGLData data = new GLData();\r\n\t\t\tdata.doubleBuffer = true;\r\n\t\t\tfinal GLCanvas canvas = new GLCanvas(comp, SWT.NONE, data);\r\n\t\t\t\r\n\t\t\tcanvas.setCurrent();\r\n\t\t\t\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tGLContext.useContext(canvas);\r\n\t\t\t}\r\n\t\t\tcatch(LWJGLException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""monitor.width"") && CONFIG_DATA.containsKey(""monitor.height""))\r\n\t\t{\r\n\t\t\twidth  = Integer.parseInt(CONFIG_DATA.get(""monitor.width""));\r\n\t\t\theight = Integer.parseInt(CONFIG_DATA.get(""monitor.height""));\r\n\t\t\t\r\n\t\t\tif (width == screenBounds.width && height == screenBounds.height)\r\n\t\t\t{\r\n\t\t\t\tif (CONFIG_DATA.containsKey(""window.width"") && CONFIG_DATA.containsKey(""window.height""))\r\n\t\t\t\t{\r\n\t\t\t\t\twidth  = Integer.parseInt(CONFIG_DATA.get(""window.width""));\r\n\t\t\t\t\theight = Integer.parseInt(CONFIG_DATA.get(""window.height""));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (width > 0 && height > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twindow.setSize(width, height);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (CONFIG_DATA.containsKey(""window.x"") && CONFIG_DATA.containsKey(""window.y""))\r\n\t\t\t\t{\r\n\t\t\t\t\tint x = Integer.parseInt(CONFIG_DATA.get(""window.x""));\r\n\t\t\t\t\tint y = Integer.parseInt(CONFIG_DATA.get(""window.y""));\r\n\t\t\t\t\t\r\n\t\t\t\t\twindow.setLocation(x, y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""monitor.width"", screenBounds.width + """");\r\n\t\tsetConfigDataValue(""monitor.height"", screenBounds.height + """");\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""window.fullscreen""))\r\n\t\t{\r\n\t\t\tboolean fullscreen = Boolean.valueOf(CONFIG_DATA.get(""window.fullscreen""));\r\n\t\t\t\r\n\t\t\twindow.setFullscreen(fullscreen);\r\n\t\t}\r\n\t\t\r\n\t\tif (!window.isFullscreen() && CONFIG_DATA.containsKey(""window.maximized""))\r\n\t\t{\r\n\t\t\tboolean maximized = Boolean.valueOf(CONFIG_DATA.get(""window.maximized""));\r\n\t\t\t\r\n\t\t\twindow.setMaximized(maximized);\r\n\t\t}\r\n\t\t\r\n\t\twindow.setBackground(new Color(display, 225, 225, 225));\r\n\t\t\r\n\t\tif (custom)\r\n\t\t{\r\n\t\t\twindow.setBorderColor(new Color(display, 215, 215, 215));\r\n\t\t\twindow.setBorderSize(3);\r\n\t\t}\r\n\t\t\r\n\t\tdisplay.addFilter(SWT.KeyDown, new Listener()\r\n\t\t{\r\n\t\t\tpublic void handleEvent(Event event)\r\n\t\t\t{\r\n\t\t\t\tif (event.keyCode == SWT.F11)\r\n\t\t\t\t{\r\n\t\t\t\t\twindow.setFullscreen(!window.isFullscreen());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tcontentPanel = window.getContentPanel();\r\n\t\tcontentPanel.setLocation(0, 0);\r\n\t\tcontentPanel.setSize(window.getClientArea().width, window.getClientArea().height);\r\n\t\tcontentPanel.setBackground(window.getBackground());\r\n\t\t\r\n\t\tif (custom)\r\n\t\t{\r\n\t\t\ttitleBar     = new TitleBar(window, 28, SWT.MIN | SWT.MAX | SWT.CLOSE | SWT.CENTER);\r\n\t\t\ttitleBar.setBackground(TITLE_BAR_BACKGROUND);\r\n\t\t\ttitleBar.setForeground(TITLE_BAR_FOREGROUND);\r\n\t\t\t\r\n\t\t\ttitleBarHeight = titleBar.getHeight();\r\n\t\t}\r\n\t\t\r\n//\t\tGridLayout b = new GridLayout();\r\n//\t\tb.makeColumnsEqualWidth = false;\r\n//\t\t\r\n//\t\tshell.setLayout(b);\r\n\t\t\r\n\t\tfileCache     = new HashMap<String, String>();\r\n\t\t\r\n\t\tcodeField     = new CodeField(contentPanel);\r\n\t\tconsoleField  = new ConsoleField(contentPanel);\r\n\t\t\r\n\t\tcodeField.addContentListener(this);\r\n\t\tcodeField.addCodeFieldListener(this);\r\n\t\tcodeField.setBackground(FOCUS_COLOR);\r\n\t\t\r\n\t\tint contentWidth  = (int)(contentPanel.getSize().x / 100f * 80);\r\n\t\tint conHeight     = (int)(contentPanel.getSize().y / 100f * 20);\r\n\t\tint toolbarHeight = (int)(25);\r\n\t\t\r\n\t\tcodeField.setSize(contentWidth, contentPanel.getSize().y - conHeight - toolbarHeight - 16);\r\n\t\tcodeField.setLocation(contentPanel.getSize().x - codeField.getWidth(), toolbarHeight);//contentPanel.getSize().y - codeField.getHeight());\r\n\t\tcodeField.setShowLineNumbers(true);\r\n\t\t\r\n\t\tconsoleField.setSize(contentWidth, conHeight - 5);\r\n\t\tconsoleField.setLocation(codeField.getBounds().x, codeField.getHeight() + codeField.getBounds().y + 5);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconsoleStream = new ConsoleStream(""log.txt"");\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tfolderImage       = new Image(display, new FileInputStream(""res/images/folderimage.png""));\r\n\t\t\tfileImage         = new Image(display, new FileInputStream(""res/images/fileimage.png""));\r\n\t\t\tjavaFileImage     = new Image(display, new FileInputStream(""res/images/javafileimage.png""));\r\n\t\t\tclassFileImage    = new Image(display, new FileInputStream(""res/images/classfileimage.png""));\r\n\t\t\tglslFileImage     = new Image(display, new FileInputStream(""res/images/glslfileimage.png""));\r\n\t\t\ttxtFileImage      = new Image(display, new FileInputStream(""res/images/txtfileimage.png""));\r\n\t\t\trtfFileImage      = new Image(display, new FileInputStream(""res/images/rtffileimage.png""));\r\n\t\t\texeFileImage      = new Image(display, new FileInputStream(""res/images/exefileimage.png""));\r\n\t\t\tasmFileImage      = new Image(display, new FileInputStream(""res/images/asmfileimage.png""));\r\n\t\t\tcppFileImage      = new Image(display, new FileInputStream(""res/images/cppfileimage.png""));\r\n\t\t\thFileImage        = new Image(display, new FileInputStream(""res/images/hfileimage.png""));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttabFileLocations  = new HashMap<Integer, String>();\r\n\t\ttabFileIds        = new HashMap<String, Integer>();\r\n\t\ttabTopPixels      = new HashMap<Integer, Integer>();\r\n\t\ttabSelection      = new HashMap<Integer, Point>();\r\n\t\t\r\n\t\tfileTabs = new TabMenu(contentPanel);\r\n\t\tfileTabs.setBackground(ColorUtils.darken(contentPanel.getBackground(), 20));\r\n\t\tfileTabs.addListener(this);\r\n\t\t\r\n\t\tconsoleTabs = new TabMenu(contentPanel);\r\n\t\tconsoleTabs.setBackground(ColorUtils.darken(contentPanel.getBackground(), 20));\r\n\t\tconsoleTabs.setMaxWidth(codeField.getWidth() + 2);\r\n\t\tconsoleTabs.addListener(this);\r\n\t\t\r\n\t\tprograms = new ArrayList<Program>();\r\n\t\tconsoleTabPrograms = new HashMap<Integer, Program>();\r\n\t\t\r\n\t    fileTabs.setMaxWidth(codeField.getWidth() + 2);\r\n\t\tcodeField.setLocation(codeField.getX(), codeField.getY() + fileTabs.getHeight());\r\n\t\tfileTabs.setLocation(codeField.getX(), 2);\r\n\t\t\r\n\t\tpreferences = new PreferencesDialog(contentPanel);\r\n\t\tpreferences.addDialogPanel(new GeneralPanel(preferences.getContentPanel(), this));\r\n\t\tpreferences.addDialogPanel(new JavaPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new CppPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new AssemblyPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new PythonPanel(preferences.getContentPanel()));\r\n\t\t\r\n\t\tproperties = new PropertiesDialog(contentPanel);\r\n\t\tproperties.addDialogPanel(new JavaPanel(properties.getContentPanel()));\r\n\t\t\r\n\t\tmenubar = new Menubar(contentPanel);\r\n\t\tmenubar.setBackground(TITLE_BAR_BACKGROUND);\r\n\t\tmenubar.setSize(contentPanel.getSize().x, 20);\r\n\t\tmenubar.addMenuHeader(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""New"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Open"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Save"", ""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Save as..."", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Refresh"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Print"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Restart"", ""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Exit"", ""FILE"");\r\n\r\n\t\tmenubar.addMenuSubItem(""Project"", ""FILE>New"");\r\n\t\tmenubar.addMenuSubItem(""Empty File"", ""FILE>New"");\r\n\t\t\r\n\t\tmenubar.addMenuHeader(""EDIT"");\r\n\t\tmenubar.addMenuSubItem(""Preferences"", ""EDIT"");\r\n\r\n\t\tmenubar.addMenuHeader(""PROJECT"");\r\n\t\tmenubar.addMenuSubItem(""Properties"", ""PROJECT"");\r\n\t\t\r\n\t\tmenubar.addListener(new MenubarListener()\r\n\t\t{\r\n\t\t\tpublic void subItemPressed(String subItemId)\r\n\t\t\t{\r\n\t\t\t\tif (subItemId.equals(""FILE>New>Empty File""))\r\n\t\t\t\t{\r\n\t\t\t\t\tnewFile();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>New>Project""))\r\n\t\t\t\t{\r\n\t\t\t\t\tnewProject();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Open""))\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Save""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Save as...""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(null);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Refresh""))\r\n\t\t\t\t{\r\n\t\t\t\t\trefreshFileViewer(false);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Print""))\r\n\t\t\t\t{\r\n\t\t\t\t\tPrintDialog dialog = new PrintDialog(window.getShell(), SWT.NONE);\r\n\t\t\t\t\tdialog.setScope(PrinterData.SELECTION);\r\n\t\t\t\t\t\r\n\t\t\t\t\tPrinterData data = dialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tFontData fd[] = codeField.getFont().getFontData().clone();\r\n\t\t\t\t\tfd[0].setHeight(10);\r\n\t\t\t\t\t\r\n\t\t\t\t\tTextPrinter printer = new TextPrinter(data, codeField.getText(), new Font(display, fd[0]), codeField.getStyles());\r\n\t\t\t\t\tprinter.setMargins(1, 1, 1, 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!printer.print())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tSystem.err.println(""Was not able to print!"");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Restart""))\r\n\t\t\t\t{\r\n\t\t\t\t\trestart();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Exit""))\r\n\t\t\t\t{\r\n\t\t\t\t\texit(window);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""EDIT>Preferences""))\r\n\t\t\t\t{\r\n\t\t\t\t\tpreferences.open();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""PROJECT>Properties""))\r\n\t\t\t\t{\r\n\t\t\t\t\tproperties.open();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\ttoolbar       = new Toolbar(contentPanel);\r\n\t\t\t\r\n\t\t\ttoolbar.setBackground(window.getBackground());\r\n\r\n\t\t\ttoolbar.addToolItem(""Save"", new Image(display, new FileInputStream(""res/images/savebutton.png"")));\r\n\t\t\ttoolbar.addSeparator();\r\n\t\t\ttoolbar.addToolItem(""Compile"", new Image(display, new FileInputStream(""res/images/compilebutton.png"")));\r\n\t\t\ttoolbar.addSeparator();\r\n\t\t\ttoolbar.addToolItem(""Run"", new Image(display, new FileInputStream(""res/images/runbutton.png"")));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttoolbar.addListener(new ToolbarListener()\r\n\t\t{\r\n\t\t\tpublic void toolItemPressed(String toolItemName)\r\n\t\t\t{\r\n\t\t\t\tif (toolItemName.equals(""Save""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t}\r\n\t\t\t\telse if (toolItemName.equals(""Compile""))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (fileLocation == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\topenFile();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (Language.canCompile(FileUtils.getFileType(fileLocation)))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tString outputLocation = FileUtils.getParentFolder(fileLocation) + ""/"";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tnew File(outputLocation).mkdirs();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tLanguage.compile(fileLocation, codeField.getRawText(), outputLocation, consoleStream);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (toolItemName.equals(""Run""))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (fileLocation == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tProgram program = Language.run(codeField.getLanguage(), fileLocation, consoleStream);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (program != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tprograms.add(program);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconsoleTabIds.put(, consoleTabs.addTab(program.getName());\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tupdateLayout();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tLanguage.init();\r\n\t\t\r\n\t\tLanguage.addCompilerListener(new CompilerListener()\r\n\t\t{\r\n\t\t\tpublic void compiled(final String files[], final CompileOutput outputs[], final PrintStream stream, String fileName)\r\n\t\t\t{\r\n\t\t\t\tfinal boolean isInViewer = treeItemLocations.containsKey(fileLocation);\r\n\t\t\t\t\r\n\t\t\t\tif (outputs[0].getResult() == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tdisplay.syncExec(new Runnable()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (stream != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tstream.println(""Compiled successfully."");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (isInViewer)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor (int i = 0; i < files.length; i ++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(files[i]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t{\r\n\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor (int i = 0; i < outputs.length; i++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (outputs[i].getResult() != 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcodeField.addError(outputs[i].getStartIndex(), outputs[i].getEndIndex());\r\n//\t\t\t\t\t\t\t\tSystem.out.print(outputs[i] + ""; "");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tSystem.out.println();\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tcodeField.highlightSyntax();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tfileViewerThreads    = new ArrayList<Thread>();\r\n\t\t\r\n\t\tfileCacheSaved        = new HashMap<String, Boolean>();\r\n\t\ttreeItemLocations     = new HashMap<Integer, String>();\r\n\t\ttreeItemIds           = new HashMap<String, Integer>();\r\n\t\ttreeItemDirectories   = new HashMap<Integer, String>();\r\n\t\t\r\n\t\ttreeMenu              = new TreeMenu(contentPanel);\r\n\t\ttreeMenu.setSize(contentPanel.getSize().x - codeField.getWidth() - 10, codeField.getHeight() + consoleField.getHeight());\r\n\t\ttreeMenu.setLocation(0, codeField.getY());\r\n\t\ttreeMenu.setBackground(NON_FOCUS_COLOR);\r\n\t\t\r\n\t\ttreeMenuSizer = new CompositeSizer(contentPanel, CompositeSizer.VERTICAL);\r\n\t\ttreeMenuSizer.setSize(5, treeMenu.getHeight());\r\n\t\ttreeMenuSizer.setLocation(treeMenu.getLocation().x + treeMenu.getWidth(), treeMenu.getLocation().y);\r\n\t\ttreeMenuSizer.setBackground(new Color(DISPLAY, 100, 100, 100));\r\n\t\ttreeMenuSizer.setForeground(new Color(DISPLAY, 230, 230, 230));\r\n\t\ttreeMenuSizer.setMinimumX(treeMenu.getLocation().x);\r\n\t\ttreeMenuSizer.addSizerListener(new SizerListener()\r\n\t\t{\r\n\t\t\tpublic void sizerMoved(int dx, int dy)\r\n\t\t\t{\r\n\t\t\t\ttreeMenu.setSize(treeMenu.getWidth() + dx, treeMenu.getHeight());\r\n\t\t\t\tcodeField.setSize(codeField.getWidth() - dx, codeField.getHeight());\r\n\t\t\t\tcodeField.setLocation(codeField.getX() + dx, codeField.getY());\r\n\t\t\t\t\r\n\t\t\t\tconsoleField.setSize(codeField.getWidth(), consoleField.getHeight());\r\n\t\t\t\tconsoleField.setLocation(codeField.getX(), consoleField.getLocation().y);\r\n\r\n\t\t\t\tcodeFieldSizer.setSize(codeField.getWidth(), 5);\r\n\t\t\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight());\r\n\t\t\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t\t\t\t\r\n\t\t\t\ttoolbar.setLocation(codeField.getX(), toolbar.getY());\r\n\t\t\t\tfileTabs.setLocation(codeField.getX(), fileTabs.getY());\r\n\t\t\t\tconsoleTabs.setLocation(codeField.getX(), consoleTabs.getY());\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tcodeFieldSizer = new CompositeSizer(contentPanel, CompositeSizer.HORIZONTAL);\r\n\t\tcodeFieldSizer.setSize(codeField.getWidth(), 3);\r\n\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight() + 1);\r\n\t\tcodeFieldSizer.setBackground(new Color(DISPLAY, 100, 100, 100));\r\n\t\tcodeFieldSizer.setForeground(new Color(DISPLAY, 230, 230, 230));\r\n\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t\tcodeFieldSizer.addSizerListener(new SizerListener()\r\n\t\t{\r\n\t\t\tpublic void sizerMoved(int dx, int dy)\r\n\t\t\t{\r\n\t\t\t\tcodeField.setSize(codeField.getWidth(), codeField.getHeight() + dy);\r\n\t\t\t\t\r\n\t\t\t\tconsoleField.setSize(codeField.getWidth(), consoleField.getHeight() - dy);\r\n\t\t\t\tconsoleField.setLocation(codeField.getX(), consoleField.getLocation().y + dy);\r\n\t\t\t\t\r\n\t\t\t\tconsoleTabs.setLocation(codeField.getX(), consoleTabs.getY() + dy);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tMenu m = new Menu(treeMenu);\r\n\t\ttreeMenu.setMenu(m);\r\n\t\t\r\n\t\tfinal MenuItem newFolder = new MenuItem(m, SWT.CASCADE);\r\n\t\tnewFolder.setText(""New Folder"");\r\n\t\t\r\n\t\tfinal MenuItem newFile = new MenuItem(m, SWT.CASCADE);\r\n\t\tnewFile.setText(""New File"");\r\n\t\t\r\n\t\tfinal MenuItem rename = new MenuItem(m, SWT.CASCADE);\r\n\t\trename.setText(""Rename"");\r\n\t\t\r\n\t\tfinal MenuItem delete = new MenuItem(m, SWT.CASCADE);\r\n\t\tdelete.setText(""Delete"");\r\n\t\t\r\n\t\tfinal ArrowIDE thisIDE = this;\r\n\t\t\r\n\t\tSelectionListener menuListener = new SelectionListener()\r\n\t\t{\r\n\t\t\tpublic void widgetDefaultSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tif (e.widget == delete)\r\n\t\t\t\t{\r\n\t\t\t\t\tint id = treeMenu.getSelection();\r\n//\t\t\t\t\t\r\n//\t\t\t\t\tif (treeItems.containsKey(id))\r\n//\t\t\t\t\t{\r\n//\t\t\t\t\t\tSystem.out.println(""is file"");\r\n//\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = treeItemLocations.get(id);\r\n\t\t\t\t\t\r\n\t\t\t\t\tdeleteFile(location);\r\n\r\n\t\t\t\t\tremoveFromFileViewer(location);\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == newFolder)\r\n\t\t\t\t{\r\n\t\t\t\t\tString preLoc = treeItemLocations.get(treeMenu.getSelection());\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (preLoc == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLoc = FileUtils.removeEndingSlashes(CONFIG_DATA.get(""workspace.location"")) + ""/"";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString preLocation = FileUtils.removeEndingSlashes(preLoc);\r\n\r\n\t\t\t\t\tif (FileUtils.isFile(preLocation))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLocation = FileUtils.getParentFolder(preLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tnewFolderDialog = new FileInputDialog(""Enter the folder name:"", ""Folder name:"", true, preLocation + ""/"", false);\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = newFolderDialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (location != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile f = new File(location);\r\n\t\t\t\t\t\tf.mkdirs();\r\n\r\n\t\t\t\t\t\taddToFileViewer(location);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == newFile)\r\n\t\t\t\t{\r\n\t\t\t\t\tString preLoc = treeItemLocations.get(treeMenu.getSelection());\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (preLoc == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLoc = FileUtils.removeEndingSlashes(CONFIG_DATA.get(""workspace.location"")) + ""/"";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString preLocation = FileUtils.removeEndingSlashes(preLoc);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (FileUtils.isFile(preLocation))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLocation = FileUtils.getParentFolder(preLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tnewFileDialog = new FileInputDialog(""Enter the file name:"", ""File name:"", false, preLocation + ""/"", false);\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = newFileDialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (location != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile f = new File(location);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tf.createNewFile();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\topenFile(location);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\taddToFileViewer(location);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (IOException e2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\te2.printStackTrace();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == rename)\r\n\t\t\t\t{\r\n\t\t\t\t\tfinal int selection\t\t= treeMenu.getSelection();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfinal String loc\t\t= treeItemLocations.get(selection);\r\n\t\t\t\t\t\r\n\t\t\t\t\tboolean willContinue\t= false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (fileCache.containsKey(loc))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (!fileCacheSaved.get(loc))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tString result = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tOptionDialog optDialog = new OptionDialog(""Save?"", ""Would you like to save before renaming?"");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tresult = optDialog.open();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (result != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif (result.equals(""yes""))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tsaveFile(loc);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\twillContinue\t= true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if (result.equals(""no""))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (willContinue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trenameFileDialog = new TextInputDialog(""Enter the new name:"", ""New name:"", FileUtils.getFileName(treeItemLocations.get(selection)));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\trenameFileDialog.addDialogFilter(new DialogFilter()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic String filter(String text)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttext = FileUtils.removeEndingSlashes(text.replace('\\\\', '/'));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor (int i = 0; i < text.length(); i ++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (text.charAt(i) == '/')\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\treturn ""The name must be in the same location."";\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tString newLoc\t\t= FileUtils.getParentFolder(loc) + ""/"" + text;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tboolean currentFile\t= text.equals(FileUtils.getFileName(loc));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (currentFile)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn ""The name must be different than the current name."";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tremoveFromFileViewer(loc);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tFile f = new File(loc);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tboolean successful = f.renameTo(new File(newLoc));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (successful)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (fileCache.containsKey(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileCache.put(newLoc, fileCache.remove(loc));\r\n\t\t\t\t\t\t\t\t\t\tfileCacheSaved.put(newLoc, fileCacheSaved.remove(loc));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (tabFileLocations.containsValue(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tint tabId = tabFileIds.remove(loc);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tfileTabs.setTabText(tabId, FileUtils.getFileName(newLoc));\r\n\t\t\t\t\t\t\t\t\t\ttabFileLocations.put(tabId, newLoc);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\ttabFileIds.put(newLoc, tabId);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (tabFileIds.containsKey(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ttabFileIds.put(newLoc, tabFileIds.remove(loc));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (currentFile)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileLocation = newLoc;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tcodeField.setLanguage(Language.getLanguage(fileLocation));\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tcodeField.highlightSyntax();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (loc.equals(fileLocation))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileLocation = newLoc;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tboolean before = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (fileCacheSaved.containsKey(newLoc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tbefore = fileCacheSaved.get(newLoc);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n//\t\t\t\t\t\t\t\t\trefreshFileViewer();\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(newLoc);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tfileCacheSaved.put(newLoc, before);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(loc);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tString result = renameFileDialog.open();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (result != null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tFileUtils.removeEndingSlashes(result.replace('\\\\', '/'));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\twidgetDefaultSelected(e);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tnewFolder.addSelectionListener(menuListener);\r\n\t\tnewFile.addSelectionListener(menuListener);\r\n\t\trename.addSelectionListener(menuListener);\r\n\t\tdelete.addSelectionListener(menuListener);\r\n\t\t\r\n\t\ttreeMenu.addListener(new TreeMenuListener()\r\n\t\t{\r\n\t\t\tpublic void treeItemDoubleClicked(int id)\r\n\t\t\t{\r\n\t\t\t\tif (!treeItemDirectories.containsKey(id))\r\n\t\t\t\t{\r\n\t\t\t\t\tString location = treeItemLocations.get(id);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile(location);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpublic void treeItemRightClicked(int id)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tpublic void treeItemSelected(int id)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\tconsoleStream.addConsoleListener(new ConsoleListener()\r\n\t\t{\r\n\t\t\tpublic void onPrintln(final Object o)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tif (o instanceof String)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsoleField.append((String)o);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tpublic void onPrint(Object o)\r\n\t\t\t{\r\n\t\t\t\tif (o instanceof String)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsoleField.append((String)o);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t    ControlListener shellListener = new ControlListener()\r\n\t\t{\r\n\t\t\tpublic void controlMoved(ControlEvent e)\r\n\t\t\t{\r\n\t\t\t\tsetConfigDataValue(""window.x"", window.getLocation().x + """");\r\n\t\t\t\tsetConfigDataValue(""window.y"", window.getLocation().y + """");\r\n\t\t\t}\r\n\r\n\t\t\t// TODO clean this crap up.\r\n\t\t\tpublic void controlResized(ControlEvent e)\r\n\t\t\t{\r\n\t\t\t\tupdateLayout();\r\n\t\t\t\t\r\n\t\t\t\tif (!window.isMaximized() && !window.isFullscreen())\r\n\t\t\t\t{\r\n\t\t\t\t\tsetConfigDataValue(""window.width"", window.getWidth() + """");\r\n\t\t\t\t\tsetConfigDataValue(""window.height"", window.getHeight() + """");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tsetConfigDataValue(""window.maximized"", window.isMaximized() + """");\r\n\t\t\t\t\r\n\t\t\t\tsetConfigDataValue(""window.fullscreen"", window.isFullscreen() + """");\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\twindow.addControlListener(shellListener);\r\n\t\t\r\n\t\tshellListener.controlResized(null);\r\n\t\t\r\n\t\twindow.addPaintListener(new PaintListener()\r\n\t\t{\r\n\t\t\tpublic void paintControl(PaintEvent e)\r\n\t\t\t{\r\n\t\t\t\te.gc.drawString(codeField.getSelection().x + """", 0, 50);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""last.tabs""))\r\n\t\t{\r\n\t\t\tString lastTabs[] = CONFIG_DATA.get(""last.tabs"").split("";"");\r\n\t\t\t\r\n\t\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < lastTabs.length; i++)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\topenFile(lastTabs[i], false, i == lastTabs.length - 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\tbuilder.append(lastTabs[i] + ';');\r\n\t\t\t\t}\r\n\t\t\t\tcatch (IOException e)\r\n\t\t\t\t{\r\n\t\t\t\t\t// If file wasnt found.. or something else.\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsetConfigDataValue(""last.tabs"", builder.toString());\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Updates the components locations in the frame.\r\n\t */\r\n\tprivate void updateLayout()\r\n\t{\r\n\t\tcontentPanel.setSize(window.getClientArea().width, window.getClientArea().height);\r\n\t\t\r\n\t\tint width     = (int)(contentPanel.getSize().x / 100f * 80);\r\n\t\tint conHeight = (int)(contentPanel.getSize().y / 100f * 20);\r\n\t\t\r\n\t\tmenubar.setSize(contentPanel.getSize().x, menubar.getHeight());\r\n\t\tmenubar.setLocation(0, titleBarHeight);\r\n\t\t\r\n\t\tcodeField.setSize(width, contentPanel.getSize().y - conHeight - toolbar.getHeight() - fileTabs.getY());\r\n\t\tcodeField.setLocation(contentPanel.getSize().x - codeField.getWidth(), fileTabs.getHeight() + fileTabs.getY());\r\n\t\t\r\n\t\ttoolbar.setSize(toolbar.getWidth(), 25);\r\n\t\ttoolbar.setLocation(codeField.getX(), menubar.getY() + menubar.getHeight());\r\n\t\t\r\n\t\tboolean cTabs = programs.size() > 0;\r\n\t\tint cOffset   = cTabs ? consoleTabs.getHeight() : 0;\r\n\t\t\r\n\t\tconsoleField.setSize(width, conHeight - 5 - cOffset);\r\n\t\tconsoleField.setLocation(codeField.getBounds().x, codeField.getHeight() + codeField.getBounds().y + 5 + cOffset);\r\n\t\tSystem.out.println(""!"" + consoleField.getLocation().y);\r\n\t\t\r\n//\t\ttabs.setWidth(codeField.getWidth() + 2);\r\n\t\tfileTabs.setLocation(codeField.getX(), toolbar.getY() + toolbar.getHeight() + 2);\r\n\t\tconsoleTabs.setLocation(consoleField.getLocation().x, consoleField.getLocation().y - cOffset);\r\n\t\tSystem.out.println(consoleTabs.getY());\r\n\t\t\r\n\t\ttreeMenu.setLocation(treeMenu.getLocation().x, codeField.getY());\r\n\t\ttreeMenu.setSize(contentPanel.getSize().x - codeField.getWidth() - 5, consoleField.getLocation().y + consoleField.getHeight() - codeField.getY());\r\n\t\t\r\n\t\ttreeMenuSizer.setSize(5, treeMenu.getHeight());\r\n\t\ttreeMenuSizer.setLocation(treeMenu.getLocation().x + treeMenu.getWidth(), treeMenu.getLocation().y);\r\n\r\n\t\tcodeFieldSizer.setSize(codeField.getWidth(), 5);\r\n\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight());\r\n\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t}\r\n\t\r\n\t/**\r\n\t * The start method that is used to start up the whole ArrowIDE\r\n\t * program. Creates the window and puts the stuff in it.\r\n\t */\r\n\tpublic static void start()\r\n\t{\r\n//\t\tsplash = new Shell(display, SWT.ON_TOP);\r\n//\t\tsplash.setSize(largeIcon.getBounds().width, largeIcon.getBounds().height);\r\n//\t\tsplash.setLocation(screenBounds.width / 2 - splash.getSize().x / 2, screenBounds.height / 2 - splash.getSize().y / 2);\r\n//\t\t\r\n//\t\tLabel splashImage = new Label(splash, SWT.NONE);\r\n//\t\tsplashImage.setSize(splash.getSize());\r\n//\t\tsplashImage.setImage(largeIcon);\r\n\t\t\r\n//\t\tsplash = new SplashScreen(""res/images/iconlarge.png"", 3000);\r\n\t\t\r\n//\t\tsplash.open(3000);\r\n\t\t\r\n\t\tuntitledNumber = 0;\r\n\t\t\r\n\t\tArrowIDE ide = null;\r\n\r\n\t\tconfigLocation       = new File(""arrow.config"").getAbsolutePath().replace('\\\\', '/');\r\n\t\t\r\n\t\tcreateConfigData();\r\n\t\t\r\n\t\tif (workspaceCreated())\r\n\t\t{\r\n\t\t\tide = openIDE();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tchooseWorkspace();\r\n\t\t\t\r\n\t\t\tide = openIDE();\r\n\t\t}\r\n\t\t\r\n//\t\tSystem.out.println(OS.SendMessage(shell.handle, OS.EM_SETSEL, 5, 9));//new TCHAR(0, ""2dasdf"", true)));\r\n\t\t\r\n\t\twindow.setFocus();\r\n\t\twindow.forceActive();\r\n\t\twindow.forceFocus();\r\n\t\twindow.setActive();\r\n\t\t\r\n\t\twhile (!window.isDisposed())\r\n\t\t{\r\n\t\t\tif (!DISPLAY.readAndDispatch())\r\n\t\t\t{\r\n\t\t\t\tide.update();\r\n//\t\t\t\tsplash.update();\r\n\t\t\t\t\r\n\t\t\t\tDISPLAY.sleep();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (!restarting)\r\n\t\t{\r\n\t\t\texit(window);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create a new ArrowIDE and then open it.\r\n\t * \r\n\t * @return The created ArrowIDE object.\r\n\t */\r\n\tpublic static ArrowIDE openIDE()\r\n\t{\r\n\t\tString location = CONFIG_DATA.get(""workspace.location.relative"");\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tlocation = FileUtils.getAbsolutePath(location);\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t\texit(window);\r\n\t\t}\r\n\t\t\r\n\t\tCONFIG_DATA.put(""workspace.location"", location);\r\n\t\t\r\n\t\tArrowIDE ide = new ArrowIDE(DISPLAY);\r\n\t\t\r\n\t\twindow.open();\r\n\t\t\r\n\t\tImage largeIcon = null;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tlargeIcon = new Image(DISPLAY, new FileInputStream(""res/images/iconlarge.png""));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\t\twindow.setIcon(largeIcon);\r\n\t\t\r\n\t\tide.refreshFileViewer(true);\r\n\t\t\r\n\t\treturn ide;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Restarts the program to a fresh state.\r\n\t */\r\n\tpublic static void restart()\r\n\t{\r\n\t\trestarting = true;\r\n\t\t\r\n\t\twindow.dispose();\r\n\t\t\r\n\t\tstart();\r\n\t\t\r\n\t\trestarting = false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * The method that is called right before the exiting of the program.\r\n\t * \r\n\t * @param shell The window to close (The main window).\r\n\t */\r\n\tpublic static void exit(Window shell)\r\n\t{\r\n\t\texiting = true;\r\n\t\t\r\n\t\tif (shell != null)\r\n\t\t{\r\n\t\t\tshell.dispose();\r\n\t\t}\r\n\t\t\r\n\t\tif (fileViewerThreads != null)\r\n\t\t{\r\n\t\t\tfor (int i = fileViewerThreads.size() - 1; i >= 0; i--)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tfileViewerThreads.get(i).join();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (InterruptedException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tDisplay.getDefault().close();\r\n\t\t\r\n\t\tSystem.exit(0);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method used to choose the Workspace location. Sets the value of\r\n\t * the absolute location in the workspace.location key for the {@link #CONFIG_DATA}.\r\n\t */\r\n\tpublic static void chooseWorkspace()\r\n\t{\r\n\t\tDialogFilter filter = new DialogFilter()\r\n\t\t{\r\n\t\t\tpublic String filter(String text)\r\n\t\t\t{\r\n\t\t\t\tFile f = new File(text);\r\n\t\t\t\t\r\n\t\t\t\tif (!f.exists())\r\n\t\t\t\t{\r\n\t\t\t\t\treturn ""The directory must exist."";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tFileBrowseDialog chooseWorkspace = new FileBrowseDialog(""Choose your project workspace folder:"", ""Workspace:"", FileBrowseDialog.DIRECTORY);\r\n\t\tchooseWorkspace.addDialogFilter(filter);\r\n\t\t\r\n\t\tString location = chooseWorkspace.open();\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\texit(window);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""workspace.location.relative"", location);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tsetConfigDataValue(""workspace.location"", FileUtils.getAbsolutePath(location));\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns whether a workspace has been located or created.\r\n\t * \r\n\t * @return Whether the workspace has been located or created.\r\n\t */\r\n\tpublic static boolean workspaceCreated()\r\n\t{\r\n\t\tFile workspaceDirectory = null;\r\n\t\t\r\n\t\tif (!CONFIG_DATA.containsKey(""workspace.location""))\r\n\t\t{\r\n\t\t\tchooseWorkspace();\r\n\t\t}\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tsetConfigDataValue(""workspace.location"", FileUtils.getAbsolutePath(CONFIG_DATA.get(""workspace.location.relative"")));\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tworkspaceDirectory = new File(CONFIG_DATA.get(""workspace.location""));\r\n\t\t\r\n\t\treturn workspaceDirectory.exists();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that appends the given String to the value of the key given.\r\n\t * \r\n\t * @param key\tThe key to append to.\r\n\t * @param value\tThe value to append.\r\n\t */\r\n\tpublic static synchronized void appendConfigDataValue(String key, String value)\r\n\t{\r\n\t\tString prev = """";\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(key))\r\n\t\t{\r\n\t\t\tprev = CONFIG_DATA.get(key);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(key, prev + value);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set a CONFIG_DATA value in the HashMap and the arrow.config file.\r\n\t * If the key is not already in the file, it will add it to the end.\r\n\t * \r\n\t * @param key The key of the property to set.\r\n\t * @param value The value of the property to set.\r\n\t */\r\n\tpublic static synchronized void setConfigDataValue(String key, String value)\r\n\t{\r\n\t\tboolean added = false;\r\n\t\t\r\n\t\tCONFIG_DATA.put(key, value);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tPrintWriter p = new PrintWriter(new FileWriter(configLocation));\r\n\t\t\t\r\n\t\t\tString keys[] = CONFIG_DATA.keySet().toArray(new String[0]);\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < CONFIG_DATA.size(); i ++)\r\n\t\t\t{\r\n\t\t\t\tString lineKey   = null;\r\n\t\t\t\tString lineValue = null;\r\n\t\t\t\t\r\n\t\t\t\tlineKey          = keys[i];\r\n\t\t\t\t\r\n\t\t\t\tif (lineKey.equals(key))\r\n\t\t\t\t{\r\n\t\t\t\t\tlineValue = CONFIG_DATA.get(lineKey);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tlineValue = CONFIG_DATA.get(lineKey);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tp.print(lineKey + ""="" + lineValue + (i == CONFIG_DATA.size() - 1 ? """" : ""\\r\\n""));\r\n\t\t\t}\r\n\t\t\r\n\t\t\tp.close();\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates and initializes the CONFIG_DATA. Puts all of the correct\r\n\t * values into the HashMap.\r\n\t */\r\n\tprivate static void createConfigData()\r\n\t{\r\n\t\tFile file = new File(configLocation);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tConfigReader.read(configLocation, CONFIG_DATA);\r\n\t\t\t\r\n\t\t\tif (!CONFIG_DATA.containsKey(""workspace.location""))\r\n\t\t\t{\r\n\t\t\t\tPrintWriter writer;\r\n\t\t\t\twriter = new PrintWriter(new FileWriter(configLocation));\r\n\t\t\t\t\r\n\t\t\t\twriter.print(""workspace.location="");\r\n\t\t\t\t\r\n\t\t\t\twriter.close();\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that checks to see if the given location is a valid\r\n\t * project. If it is, then load all of the classpath and\r\n\t * project properties into the {@link #PROJECT_PROPERTIES} and\r\n\t * the classpaths into the {@link #PROJECT_CLASSPATHS}.\r\n\t * \r\n\t * @param location The location of the root folder of the project\r\n\t * \t\tto check.\r\n\t */\r\n\tpublic static void checkProject(String location)\r\n\t{\r\n\t\tlocation = FileUtils.removeEndingSlashes(location);\r\n\t\t\r\n\t\tString propsLocation = location + ""/.properties"";\r\n\t\tString cpLocation = location + ""/.classpath"";\r\n\t\t\r\n\t\tFile props = new File(propsLocation);\r\n\t\tFile cp = new File(cpLocation);\r\n\t\t\r\n\t\tif (props.isFile())\r\n\t\t{\r\n\t\t\tif (!PROJECT_PROPERTIES.containsKey(propsLocation))\r\n\t\t\t{\r\n\t\t\t\tHashMap<String, XMLItem[]> map = Reader.read(propsLocation);\r\n\t\t\t\t\r\n\t\t\t\tPROJECT_PROPERTIES.put(propsLocation, map);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (cp.isFile())\r\n\t\t{\r\n\t\t\tif (!PROJECT_CLASSPATHS.containsKey(cpLocation))\r\n\t\t\t{\r\n\t\t\t\tHashMap<String, XMLItem[]> map = Reader.read(cpLocation);\r\n\t\t\t\t\r\n\t\t\t\tPROJECT_CLASSPATHS.put(cpLocation, map);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a Dialog to ask for the project name. Next it creates a\r\n\t * directory/folder for the project and refreshes the file viewer.\r\n\t */\r\n\tpublic void newProject()\r\n\t{\r\n\t\tnewProjectDialog = new FileInputDialog(""Enter the name of your project:"", ""Project name:"", """", true, CONFIG_DATA.get(""workspace.location""), false);\r\n\t\t\r\n\t\tString location  = newProjectDialog.open();\r\n\t\t\r\n\t\tif (location != null)\r\n\t\t{\r\n\t\t\tFile f = new File(location);\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/bin"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/res"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/src"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tf = new File(location + ""/.classpath"");\r\n\t\t\t\tf.createNewFile();\r\n\t\t\t\r\n\t\t\t\tf = new File(location + ""/.properties"");\r\n\t\t\t\tf.createNewFile();\r\n\t\t\t}\r\n\t\t\tcatch (IOException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\r\n\t\t\taddToFileViewer(location);\r\n\t\t\taddToFileViewer(location + ""/bin"");\r\n\t\t\taddToFileViewer(location + ""/res"");\r\n\t\t\taddToFileViewer(location + ""/src"");\r\n\t\t\taddToFileViewer(location + ""/.classpath"");\r\n\t\t\taddToFileViewer(location + ""/.properties"");\r\n\t\t\trefreshFileViewer(location, false);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates new file and saves the old one. Switches to the new file\r\n\t * for editing automatically.\r\n\t */\r\n\tpublic void newFile()\r\n\t{\r\n\t\tcodeField.setText("""");\r\n\t\tcodeField.setLanguage(0);\r\n\t\t\r\n\t\tString location = ""Untitled"" + untitledNumber++;\r\n\t\t\r\n\t\tfileLocation = location;\r\n\t\t\r\n\t\taddTab(location, location);\r\n\t\t\r\n\t\tsetFileSaved(location, false);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new FileDialog at the absolute path of the workspace\r\n\t * location.\r\n\t * \r\n\t * @return The created, unopened FileDialog at the workspace path\r\n\t * \t\tused for opening files.\r\n\t */\r\n\tpublic FileDialog openFileBrowseDialog()\r\n\t{\r\n\t\tString location = null;\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""dialog.location""))\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""dialog.location"");\r\n\t\t\t\r\n\t\t\tif (!new File(location).exists())\r\n\t\t\t{\r\n\t\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t}\r\n\t\t\r\n\t\treturn openFileBrowseDialog(location);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiates a new FileDialog set for all types of files to be\r\n\t * set at the specified location.\r\n\t * \r\n\t * @param relativeLocation The location for the FileDialog to start.\r\n\t * @return The created, unopened FileDialog used for opening files.\r\n\t */\r\n\tpublic FileDialog openFileBrowseDialog(String location)\r\n\t{\r\n\t\tFileDialog dialog = new FileDialog(window.getShell(), SWT.OPEN | SWT.MULTI);\r\n\t\tdialog.setFilterNames(new String[] { ""All Files (*)"" });\r\n\t\tdialog.setFilterExtensions(new String[] { ""*"" });\r\n\t\tdialog.setFilterPath(location);\r\n\t\t\r\n\t\treturn dialog;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Open a file located at the specified location.\r\n\t * \r\n\t * @param location The location of the file to open.\r\n\t */\r\n\tpublic void openFile(String location) throws FileNotFoundException\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\topenFile(location, true, true);\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\tif (e instanceof FileNotFoundException)\r\n\t\t\t{\r\n\t\t\t\tthrow (FileNotFoundException)e;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that opens a file at the specified location and also\r\n\t * takes the option whether or not to cache the save the fileLocation\r\n\t * in the {@link #CONFIG_DATA} for reuse when the IDE is restarted.\r\n\t * \r\n\t * @param\tlocation The location of the file to open.\r\n\t * @param\tcache Whether or not to save the file for use after restart.\r\n\t * @param \tsetLanguage Whether or not to set the language of the codeField.\r\n\t * @throws\tFileNotFoundException Thrown if the file can not be found.\r\n\t * @throws\tIOException Thrown if there was trouble reading or writing.\r\n\t */\r\n\tpublic void openFile(String location, boolean cache, boolean setLanguage) throws FileNotFoundException, IOException\r\n\t{\r\n\t\tlocation = location.replace('\\\\', '/');\r\n\t\t\r\n\t\tboolean alreadyOpen = fileCache.containsKey(location);\r\n\t\t\r\n\t\tif (oldTabId != 0)\r\n\t\t{\r\n\t\t\ttabTopPixels.put(oldTabId, codeField.getTopPixel());\r\n\t\t\ttabSelection.put(oldTabId, codeField.getSelection());\r\n\t\t}\r\n\t\t\r\n\t\tif (alreadyOpen)\r\n\t\t{\r\n\t\t\tcodeField.setText(fileCache.get(location), true, true);\r\n\t\t\t\r\n\t\t\tcodeField.setLanguage(Language.getLanguage(location));\r\n\t\t\t\r\n\t\t\tcodeField.redraw();\r\n\t\t\t\r\n\t\t\tint tabId = tabFileIds.get(location);\r\n\t\t\t\r\n\t\t\tString oldLocation = fileLocation;\r\n\t\t\t\r\n\t\t\tfileLocation = location;\r\n\t\t\t\r\n\t\t\tfileTabs.setSelection(tabId);\r\n\t\t\t\r\n\t\t\tif (!location.equals(oldLocation))\r\n\t\t\t{\r\n\t\t\t\toldTabId = tabId;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tFile file = new File(location);\r\n\t\t\t\r\n\t\t\tif (file.isDirectory())\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tBufferedReader reader = new BufferedReader(new FileReader(file));\r\n\t\t\t\r\n\t\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\t\r\n\t\t\tString line = """";\r\n\t\t\t\r\n\t\t\twhile ((line = reader.readLine()) != null)\r\n\t\t\t{\r\n\t\t\t\tbuilder.append(line + ""\\r\\n"");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treader.close();\r\n\t\t\t\r\n\t\t\tif (builder.length() > 0)\r\n\t\t\t{\r\n\t\t\t\tbuilder.deleteCharAt(builder.length() - 1);\r\n\t\t\t\tbuilder.deleteCharAt(builder.length() - 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString fileContents = builder.toString();\r\n\t\t\t\r\n\t\t\tfileCache.put(location, fileContents);\r\n\t\t\tfileCacheSaved.put(location, true);\r\n\t\t\t\r\n\t\t\tcodeField.setText(fileContents, true);\r\n\t\t\t\r\n\t\t\tcodeField.redraw();\r\n\t\t\t\r\n\t\t\tif (!location.equals(fileLocation))\r\n\t\t\t{\r\n\t\t\t\taddTab(location, cache);\r\n\t\t\t\t\r\n\t\t\t\tif (fileLocation != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tint tabId = tabFileIds.get(location);\r\n\t\t\t\t\t\r\n\t\t\t\t\toldTabId = tabId;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileLocation = location;\r\n\t\t}\r\n\t\t\r\n\t\tif (setLanguage)\r\n\t\t{\r\n\t\t\tcodeField.setLanguage(Language.getLanguage(location));\r\n\t\t}\r\n\t\t\r\n\t\tcodeField.setFocus();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Opens a FileDialog to search for a file to open, then opens\r\n\t * the result.\r\n\t */\r\n\tpublic void openFile() throws FileNotFoundException\r\n\t{\r\n\t\tFileDialog dialog = openFileBrowseDialog();\r\n\t\t\r\n\t\tString location   = dialog.open();\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tlocation           = location.replace('\\\\', '/');\r\n\t\t\r\n\t\tString parent      = FileUtils.getParentFolder(location) + ""/"";\r\n\t\t\r\n\t\tString fileNames[] = dialog.getFileNames();\r\n\t\t\r\n\t\tfor (int i = 0; i < fileNames.length; i ++)\r\n\t\t{\r\n\t\t\topenFile(parent + fileNames[i]);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""dialog.location"", parent);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new FileDialog at the absolute path of the workspace\r\n\t * location.\r\n\t * \r\n\t * @return The created, unopened FileDialog at the workspace path\r\n\t * \t\tused for saving.\r\n\t */\r\n\tpublic FileDialog openSaveDialog()\r\n\t{\r\n\t\tString location = null;\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""dialog.location""))\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""dialog.location"");\r\n\t\t\t\r\n\t\t\tif (!new File(location).exists())\r\n\t\t\t{\r\n\t\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t}\r\n\t\t\r\n\t\treturn openSaveDialog(location);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiates a new FileDialog set for all types of files to be\r\n\t * set at the specified location.\r\n\t * \r\n\t * @param relativeLocation The location for the FileDialog to start.\r\n\t * @return The created, unopened FileDialog used for saving.\r\n\t */\r\n\tpublic FileDialog openSaveDialog(String location)\r\n\t{\r\n\t\tFileDialog dialog = new FileDialog(window.getShell(), SWT.SAVE);\r\n\t\tdialog.setFilterNames(new String[] { ""All Files (*)"" });\r\n\t\tdialog.setFilterExtensions(new String[] { ""*"" });\r\n\t\tdialog.setFilterPath(location);\r\n\t\t\r\n\t\treturn dialog;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Saves a file located at the specified location.\r\n\t * \r\n\t * @param location The location of the file to open.\r\n\t */\r\n\tpublic void saveFile(String location)\r\n\t{\r\n\t\tif (fileLocation == null && location == null)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\topenFile();\r\n\t\t\t}\r\n\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (location != null)\r\n\t\t{\r\n\t\t\tlocation = location.replace('\\\\', '/');\r\n\t\t}\r\n\t\t\r\n\t\tif (location == null || location.startsWith(""Untitled""))\r\n\t\t{\r\n\t\t\tboolean hasTab = tabFileIds.containsKey(location);\r\n\t\t\tint     tabId  = 0;\r\n\t\t\t\r\n\t\t\tif (hasTab)\r\n\t\t\t{\r\n\t\t\t\ttabId = tabFileIds.get(location);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString oldLoc = location;\r\n\t\t\t\r\n\t\t\tFileDialog dialog = openSaveDialog();\r\n\t\t\tlocation = dialog.open();\r\n\t\t\t\r\n\t\t\tif (location != null)\r\n\t\t\t{\r\n\t\t\t\tlocation = location.replace('\\\\', '/');\r\n\t\t\t\t\r\n\t\t\t\tif (hasTab)\r\n\t\t\t\t{\r\n\t\t\t\t\tString fileName = FileUtils.getFileName(location);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttabFileIds.remove(oldLoc);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfileTabs.setTabText(tabId, fileName);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttabFileIds.put(location, tabId);\r\n\t\t\t\t\ttabFileLocations.put(tabId, location);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (fileLocation == null)\r\n\t\t{\r\n\t\t\tfileLocation = """";\r\n\t\t}\r\n\t\t\r\n\t\tboolean saved\t\t= false;\r\n\t\t\r\n\t\tboolean currentFile = location.equals(fileLocation);\r\n\t\r\n\t\tif (fileCacheSaved.containsKey(fileLocation))\r\n\t\t{\r\n\t\t\tsaved = fileCacheSaved.get(fileLocation);\r\n\t\t}\r\n\t\t\r\n\t\tFileUtils.writeFile(location, codeField.getWritableText());\r\n\t\t\r\n\t\tfileLocation\t  = location;\r\n\t\t\r\n\t\tcodeField.setLanguage(Language.getLanguage(fileLocation));\r\n\t\t\r\n\t\tboolean highlight = codeField.getLanguage() == 0;\r\n\t\t//TODO: did if rog et something?\r\n//\t\tSystem.out.println(""done"");\r\n\t\tif (highlight)\r\n\t\t{\r\n\t\t\tcodeField.highlightSyntax();\r\n\t\t}\r\n//\t\tSystem.out.println(""done2"");\r\n\t\t\r\n\t\tif (currentFile)\r\n\t\t{\r\n\t\t\tsetFileSaved(location, true);\r\n\t\t}\r\n\t\t\r\n\t\tboolean isInViewer = treeItemLocations.containsKey(fileLocation);\r\n\t\t\r\n\t\tif (isInViewer)\r\n\t\t{\r\n\t\t\taddToFileViewer(location);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that adds the file at the specified location to file viewer.\r\n\t * Faster than refreshing the whole doggone file viewer.\r\n\t * \r\n\t * @param location The location of the file to add.\r\n\t */\r\n\tpublic void addToFileViewer(String location)\r\n\t{\r\n\t\tif (treeItemLocations.containsValue(location))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tFile file     = new File(location);\r\n\r\n\t\tboolean isDirectory = file.isDirectory();\r\n\t\t\r\n\t\tString name   = FileUtils.getFileName(location);\r\n\t\t\r\n\t\tImage img     = isDirectory ? folderImage : getFileImage(location);\r\n\t\t\r\n\t\tString parentLocation = FileUtils.getParentFolder(location);\r\n\t\t\r\n\t\tint parentId = 0;\r\n\t\t\r\n\t\tif (parentLocation.equals(CONFIG_DATA.get(""workspace.location"")))\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tparentId = treeItemIds.get(parentLocation);\r\n\t\t}\r\n\t\t\r\n\t\tint id        = treeMenu.addItem(parentId, name, img);\r\n\t\t\r\n\t\tif (fileCacheSaved.containsKey(location))\r\n\t\t{\r\n\t\t\tfileCacheSaved.put(location, true);\r\n\t\t}\r\n\r\n\t\ttreeItemLocations.put(id, location);\r\n\t\ttreeItemIds.put(location, id);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to remove the file at the specified location from the file\r\n\t * viewer. Faster than refreshing the whole doggone file viewer.\r\n\t * \r\n\t * @param location The location of the file to remove.\r\n\t */\r\n\tpublic void removeFromFileViewer(String location)\r\n\t{\r\n\t\tint id = treeItemIds.get(location);\r\n\t\t\r\n\t\ttreeItemDirectories.remove(id);\r\n\t\ttreeItemIds.remove(location);\r\n\t\ttreeItemLocations.remove(id);\r\n\t\t\r\n\t\tif (treeMenu.containsItem(id))\r\n\t\t{\r\n\t\t\ttreeMenu.removeItem(id);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Refresh the file viewer to all of the updated file names.\r\n\t * If a file has been added, add it to the\r\n\t * {@link #treeMenu file viewer}.\r\n\t * \r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(boolean ignoreRemove)\r\n\t{\r\n\t\trefreshFileViewer(CONFIG_DATA.get(""workspace.location""), 0, ignoreRemove);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to refresh the files within the directory of the specified\r\n\t * location.\r\n\t * \r\n\t * @param location The location of the root directory to refresh.\r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(String location, boolean ignoreRemove)\r\n\t{\r\n\t\tint parentId = treeItemIds.get(location);\r\n\t\t\r\n\t\trefreshFileViewer(location, parentId, ignoreRemove);\r\n\t}\r\n\r\n\t/**\r\n\t * Method to refresh the files within the directory of the specified\r\n\t * location.\r\n\t * \r\n\t * @param location The location of the root directory to refresh.\r\n\t * @param parentId The id of the TreeMenu item to refresh.\r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(final String location, final int parentId, final boolean ignoreRemove)\r\n\t{\r\n\t\tThread refreshThread = new Thread()\r\n\t\t{\r\n\t\t\tpublic void run()\r\n\t\t\t{\r\n\t\t\t\tFile parent  = new File(location);\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tfindSubFiles(parent, parentId, true);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (IOException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\texit(window);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tString locations[] = treeItemLocations.values().toArray(new String[0]);\r\n\t\t\t\t\r\n\t\t\t\tif (!ignoreRemove)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (int i = 0; i < locations.length; i ++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile file = new File(locations[i]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (!file.exists())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfinal int id = treeItemIds.get(locations[i]);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\ttreeItemIds.remove(locations[i]);\r\n\t\t\t\t\t\t\ttreeItemLocations.remove(id);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (treeMenu.containsItem(id))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ttreeMenu.removeItem(id);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ttreeMenu.alphabetize();\r\n\t\t\t\t\r\n\t\t\t\tfileViewerThreads.remove(this);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tfileViewerThreads.add(refreshThread);\r\n\t\t\r\n\t\trefreshThread.start();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Finds the sub-files of a directory and if they have not been\r\n\t * added, add them to the TreeMenu.\r\n\t * \r\n\t * @param file The directory to search sub-files for.\r\n\t * @param parent The id of the directory TreeMenu item.\r\n\t * @throws IOException \r\n\t */\r\n\tprivate void findSubFiles(File file, final int parent, boolean ignoreRemove) throws IOException\r\n\t{\r\n\t\tif (exiting)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tFile subFiles[] = file.listFiles();\r\n\t\t\r\n\t\tif (subFiles != null)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < subFiles.length; i ++)\r\n\t\t\t{\r\n\t\t\t\tboolean isDirectory = subFiles[i].isDirectory();\r\n\t\t\t\t\r\n\t\t\t\tfinal String orig          = subFiles[i].getCanonicalPath().replace('\\\\', '/');\r\n\t\t\t\tfinal String name          = FileUtils.getFileName(orig);\r\n\t\t\t\t\r\n\t\t\t\tif (name.charAt(0) == '.')\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n//\t\t\t\tString location      = orig;//orig.toLowerCase();\r\n\t\t\t\t\r\n\t\t\t\tint id               = 0;\r\n\t\t\t\t\r\n\t\t\t\tfinal Image img            = isDirectory ? folderImage : getFileImage(orig);\r\n\t\t\t\t\r\n\t\t\t\tboolean alreadyAdded = treeItemIds.containsKey(orig);\r\n\t\t\t\t\r\n\t\t\t\tif (!ignoreRemove)\r\n\t\t\t\t{\r\n\t\t\t\t\talreadyAdded = true;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (treeItemLocations.containsValue(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurId = treeItemIds.get(orig);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tid = curId;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (isDirectory)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfindSubFiles(subFiles[i], id, ignoreRemove);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Set text correctly of renamed files.\r\n\t\t\t\t\telse if (treeItemLocations.containsValue(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid = treeItemIds.get(orig);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttreeMenu.setTreeItemText(id, name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\talreadyAdded = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (!alreadyAdded)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (exiting)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurId = treeMenu.addItem(parent, name, img);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tid = curId;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (isDirectory)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfindSubFiles(subFiles[i], id, ignoreRemove);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttreeItemDirectories.put(id, orig);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (fileCacheSaved.containsKey(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfileCacheSaved.put(orig, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\ttreeItemLocations.put(id, orig);\r\n\t\t\t\t\ttreeItemIds.put(orig, id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that occurs whenever the content\r\n\t * of a TextField is changed. In this case it tells you that\r\n\t * the current file has been changed and needs to be saved.\r\n\t */\r\n\tpublic void contentChanged(ContentEvent event)\r\n\t{\r\n\t\tObject source = event.getSource();\r\n\t\t\r\n\t\tif (source == codeField)\r\n\t\t{\r\n\t\t\tif (fileLocation != null)\r\n\t\t\t{\r\n\t\t\t\tsetFileSaved(fileLocation, false);\r\n\t\t\t\t\r\n\t\t\t\tfinal String code = codeField.getText();\r\n\t\t\t\t\r\n\t\t\t\tnew Thread()\r\n\t\t\t\t{\r\n\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcodeField.clearErrors();\r\n\t\t\t\t\t\tfinal String outputLocation = FileUtils.getParentFolder(fileLocation) + ""/"";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\ttry\r\n//\t\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\t\tconsoleField.setText("""");\r\n//\t\t\t\t\t\t\t\t\t\r\n//\t\t\t\t\t\t\t\t\tLanguage.compile(fileLocation, codeField.getRawText(), outputLocation, consoleStream);\r\n//\t\t\t\t\t\t\t\t}\r\n//\t\t\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n//\t\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n//\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tLanguage.compile(fileLocation, code, outputLocation, null);\r\n\t\t\t\t\t}\r\n\t\t\t\t}.start();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Return the Image associated with the type of file given through\r\n\t * the location parameter.\r\n\t * \r\n\t * @param location The location of the file.\r\n\t * @return The Image associated with the file.\r\n\t */\r\n\tprivate Image getFileImage(String location)\r\n\t{\r\n\t\tImage img = null;\r\n\t\t\r\n\t\tint fileType = FileUtils.getFileType(location);\r\n\t\t\r\n\t\tif (fileType == FileUtils.JAVA)\r\n\t\t{\r\n\t\t\timg = javaFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.CLASS)\r\n\t\t{\r\n\t\t\timg = classFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.GLSL)\r\n\t\t{\r\n\t\t\timg = glslFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.TXT)\r\n\t\t{\r\n\t\t\timg = txtFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.RTF)\r\n\t\t{\r\n\t\t\timg = rtfFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.EXE)\r\n\t\t{\r\n\t\t\timg = exeFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.ASSEMBLY)\r\n\t\t{\r\n\t\t\timg = asmFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.CPP)\r\n\t\t{\r\n\t\t\timg = cppFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.H)\r\n\t\t{\r\n\t\t\timg = hFileImage;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\timg = fileImage;\r\n\t\t}\r\n\t\t\r\n\t\treturn img;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks whether the text returned from the codeField is null, or\r\n\t * if it is an empty String.\r\n\t * \r\n\t * @return Whether the codeField is empty.\r\n\t */\r\n\tpublic boolean isCodeFieldEmpty()\r\n\t{\r\n\t\tString text = codeField.getText();\r\n\t\t\r\n\t\treturn text == null || text.equals("""");\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set the tab and TreeMenu item associated with the file\r\n\t * location to start with a '*' depending if the file is\r\n\t * saved or not.\r\n\t * \r\n\t * @param location The location of the file to set as saved or not.\r\n\t * @param saved Whether the file is saved or not.\r\n\t */\r\n\tpublic void setFileSaved(String location, boolean saved)\r\n\t{\r\n\t\tString locKey\t= location;\r\n\t\t\r\n\t\tString text\t\t= null;\r\n\t\t\r\n\t\tint id\t\t\t= 0;\r\n\t\t\r\n\t\tif (saved)\r\n\t\t{\r\n\t\t\tif (treeItemIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tid = treeItemIds.get(locKey);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (tabFileIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tint tabId\t= tabFileIds.get(locKey);\r\n\t\t\t\t\r\n\t\t\t\ttext\t\t= fileTabs.getTabText(tabId);\r\n\t\t\t}\r\n\t\t\telse if (treeItemLocations.containsValue(locKey))\r\n\t\t\t{\r\n\t\t\t\ttext = treeMenu.getTreeItemText(id);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (text != null && text.startsWith(""*""))\r\n\t\t\t{\r\n\t\t\t\ttext = text.substring(1);\r\n\t\t\t\r\n\t\t\t\tif (treeItemLocations.containsValue(locKey))\r\n\t\t\t\t{\r\n\t\t\t\t\ttreeMenu.setTreeItemText(id, text);\r\n\t\t\t\t}\r\n\t\t\t\tif (tabFileIds.containsKey(locKey))\r\n\t\t\t\t{\r\n\t\t\t\t\tfileTabs.setTabText(tabFileIds.get(locKey), text);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileCacheSaved.put(locKey, true);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tint tabId = tabFileIds.get(locKey);\r\n\t\t\t\r\n\t\t\ttext = fileTabs.getTabText(tabId);\r\n\t\t\t\r\n\t\t\tif (!text.startsWith(""*""))\r\n\t\t\t{\r\n\t\t\t\ttext = ""*"" + text;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (treeItemIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tid = treeItemIds.get(locKey);\r\n\t\t\t\ttreeMenu.setTreeItemText(id, text);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileTabs.setTabText(tabId, text);\r\n\t\t\t\r\n\t\t\tfileCacheSaved.put(locKey, false);\r\n\t\t\t\r\n\t\t\tString fileContents = codeField.getText();\r\n\t\t\t\r\n\t\t\tfileCache.put(locKey, fileContents);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to remove all of the TreeMenu items and clear the\r\n\t * HashMaps.\r\n\t */\r\n\tpublic void removeAllTreeItems()\r\n\t{\r\n\t\ttreeMenu.removeAllItems();\r\n\t\t\r\n\t\ttreeItemLocations.clear();\r\n\t\ttreeItemIds.clear();\r\n\t\ttreeItemDirectories.clear();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add a tab of the file at fileLocation to the TabMenu.\r\n\t * \r\n\t * @param fileLocation The location of the file to represent.\r\n\t */\r\n\tprivate void addTab(String fileLocation)\r\n\t{\r\n\t\taddTab(fileLocation, true);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to add a tab at the specified location.\r\n\t * \r\n\t * @param fileLocation The location of the file that was opened.\r\n\t * @param cache Whether or not to save the tab for later use after\r\n\t * \t\trestart.\r\n\t */\r\n\tprivate void addTab(String fileLocation, boolean cache)\r\n\t{\r\n\t\tString fileName = FileUtils.getFileName(fileLocation);\r\n\t\t\r\n\t\taddTab(fileName, fileLocation, cache);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add a tab of the file with the fileName and location to the TabMenu.\r\n\t * \r\n\t * @param fileName The name of the file to represent.\r\n\t * @param location The location, including the fileName, of the file.\r\n\t */\r\n\tprivate void addTab(String fileName, String location)\r\n\t{\r\n\t\taddTab(fileName, location, true);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to add a tab at the specified location with the tab labeled\r\n\t * with the fileName param.\r\n\t * \r\n\t * @param fileName The String to label the tab with.\r\n\t * @param location The location of the file that was opened.\r\n\t * @param cache Whether or not to save the tab for later use after\r\n\t * \t\trestart.\r\n\t */\r\n\tprivate void addTab(String fileName, final String location, boolean cache)\r\n\t{\r\n\t\tint id = fileTabs.addTab(fileName);\r\n\t\t\r\n\t\tif (oldTabId == 0)\r\n\t\t{\r\n\t\t\toldTabId = id;\r\n\t\t}\r\n\t\t\r\n\t\ttabTopPixels.put(id, 0);\r\n\t\ttabSelection.put(id, new Point(0, 0));\r\n\t\t\r\n\t\ttabFileLocations.put(id, location);\r\n\t\ttabFileIds.put(location, id);\r\n\t\t\r\n\t\tif (cache)\r\n\t\t{\r\n\t\t\tnew Thread()\r\n\t\t\t{\r\n\t\t\t\tpublic void run()\r\n\t\t\t\t{\r\n\t\t\t\t\tappendConfigDataValue(""last.tabs"", location + "";"");\r\n\t\t\t\t}\r\n\t\t\t}.start();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a tab's close icon\r\n\t * is pressed. If the file in the tab is not saved, ask whether to\r\n\t * save it or not.\r\n\t * \r\n\t * @param event The TabMenuEvent sent with the tab close.\r\n\t * @return Whether to close the tab or not.\r\n\t */\r\n\tpublic boolean tabClosing(TabMenuEvent event)\r\n\t{\r\n\t\tint tabId       = event.getTabId();\r\n\t\t\r\n\t\tboolean cancel = false;\r\n\t\t\r\n\t\tif (event.getSource() == fileTabs)\r\n\t\t{\r\n\t\t\tint newId\t\t= fileTabs.getSelected();\r\n\t\t\t\r\n\t\t\tString location = tabFileLocations.get(tabId);\r\n\t\t\tString result\t= null;\r\n\t\r\n\t\t\tboolean askSave\t= false;\r\n\t\t\t\r\n\t\t\tif (fileCacheSaved.containsKey(location))\r\n\t\t\t{\r\n\t\t\t\tif (!fileCacheSaved.get(location))\r\n\t\t\t\t{\r\n\t\t\t\t\taskSave = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif (!isCodeFieldEmpty())\r\n\t\t\t\t{\r\n\t\t\t\t\taskSave = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (askSave)\r\n\t\t\t{\r\n\t\t\t\tOptionDialog saveDialog = new OptionDialog(""Save?"", ""\\"""" + FileUtils.getFileName(location) + ""\\"" has not been saved, would you like to save it?"");\r\n\t\t\t\t\r\n\t\t\t\tresult = saveDialog.open();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!askSave || (result != null && (result.equals(""yes"") || result.equals(""no""))))\r\n\t\t\t{\r\n\t\t\t\tString files = CONFIG_DATA.get(""last.tabs"").replace((tabFileLocations.get(tabId) + ';'), """");\r\n\t\t\t\tsetConfigDataValue(""last.tabs"", files);\r\n\t\t\t\t\r\n\t\t\t\ttabFileLocations.remove(tabId);\r\n\t\t\t\ttabFileIds.remove(location);\r\n\t\t\t\ttabTopPixels.remove(tabId);\r\n\t\t\t\ttabSelection.remove(tabId);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (result != null)\r\n\t\t\t{\r\n\t\t\t\tif (result.equals(""yes""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(location);\r\n\t\t\t\t}\r\n\t\t\t\telse if (result.equals(""no""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsetFileSaved(location, true);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tcancel = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcancel = askSave;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (cancel)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfileCache.remove(location);\r\n\t\t\t\tfileCacheSaved.remove(location);\r\n\t\t\t\t\r\n\t\t\t\tif (tabId == oldTabId)\r\n\t\t\t\t{\r\n\t\t\t\t\toldTabId = newId;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (tabId != newId)\r\n\t\t\t\t{\r\n\t\t\t\t\tString loc = tabFileLocations.get(newId);\r\n\t\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile(loc);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfileLocation = null;\r\n\t\t\t\t\tcodeField.setText("""");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (event.getSource() == consoleTabs)\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn !cancel;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a tab is selected\r\n\t * in a TabMenu. It then opens the file.\r\n\t * \r\n\t * @param event The TabMenuEvent sent with the tab select.\r\n\t */\r\n\tpublic void tabSelected(TabMenuEvent event)\r\n\t{\r\n\t\tint tabId = event.getTabId();\r\n\t\t\r\n\t\tif (event.getSource() == fileTabs)\r\n\t\t{\r\n\t\t\tString location = tabFileLocations.get(tabId);\r\n\t\t\t\r\n\t\t\tif (location.equals(fileLocation))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (location != null)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\topenFile(location);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tcodeField.setSelection(tabSelection.get(tabId));\r\n\t\t\t\tcodeField.setTopPixel(tabTopPixels.get(tabId));\r\n\t\t\t\tcodeField.select();\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (event.getSource() == consoleTabs)\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a key is pressed\r\n\t * in a TextField.\r\n\t * \r\n\t * @param e The CodeFieldEvent that was passed.\r\n\t */\r\n\tpublic void keyPressed(CodeFieldEvent e)\r\n\t{\r\n\t\tif (e.getSource() == codeField)\r\n\t\t{\r\n\t\t\tif (e.getStateMask() == (Integer)PROPERTIES.get(""key.control"") && e.getKeyCode() == 's')\r\n\t\t\t{\r\n\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that deletes the file at the specified location.\r\n\t * \r\n\t * @param location The location of the file to be deleted.\r\n\t * @return Whether the file was successfully deleted or not.\r\n\t */\r\n\tpublic boolean deleteFile(String location)\r\n\t{\r\n\t\tint treeId    = treeItemIds.get(location);\r\n\t\t\r\n\t\ttreeItemLocations.remove(treeId);\r\n\t\ttreeItemDirectories.remove(treeId);\r\n\t\tfileCache.remove(location);\r\n\t\tfileCacheSaved.remove(location);\r\n\t\t\r\n\t\ttreeMenu.removeItem(treeId);\r\n\t\t\r\n\t\tboolean deleted = FileUtils.delete(new File(location));\r\n\t\t\r\n\t\treturn deleted;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to synchronistically update the components of the main\r\n\t * window.\r\n\t */\r\n\tpublic void update()\r\n\t{\r\n\t\t\r\n\t}\r\n}\r\n----------------------------------- SOURCE END -------------------------------------",1364132436883
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1364132436885
error,log,,,"Error in JDT Core during AST creation",1364132436885
executed,command,org.eclipse.ui,3.7.0.v20110928-1505,"org.eclipse.ui.edit.delete",1364132437121
executed,command,org.eclipse.ui,3.7.0.v20110928-1505,"org.eclipse.ui.edit.delete",1364132437260
error,log,,,"Exception occurred during compilation unit conversion:\r\n----------------------------------- SOURCE BEGIN -------------------------------------\r\npackage net.foxycorndog.arrowide;\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.awt.TextField;\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\nimport java.io.PrintStream;\r\nimport java.net.URLDecoder;\r\n\r\nimport net.foxycorndog.arrowide.color.ColorUtils;\r\nimport net.foxycorndog.arrowide.components.CodeField;\r\nimport net.foxycorndog.arrowide.components.CodeFieldEvent;\r\nimport net.foxycorndog.arrowide.components.CodeFieldListener;\r\nimport net.foxycorndog.arrowide.components.CompositeSizer;\r\nimport net.foxycorndog.arrowide.components.ConsoleField;\r\nimport net.foxycorndog.arrowide.components.ContentEvent;\r\nimport net.foxycorndog.arrowide.components.ContentListener;\r\nimport net.foxycorndog.arrowide.components.SizerListener;\r\nimport net.foxycorndog.arrowide.components.SplashScreen;\r\nimport net.foxycorndog.arrowide.components.TitleBar;\r\nimport net.foxycorndog.arrowide.components.menubar.Menubar;\r\nimport net.foxycorndog.arrowide.components.menubar.MenubarListener;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenu;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenuEvent;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenuListener;\r\nimport net.foxycorndog.arrowide.components.toolbar.Toolbar;\r\nimport net.foxycorndog.arrowide.components.toolbar.ToolbarListener;\r\nimport net.foxycorndog.arrowide.components.treemenu.TreeMenu;\r\nimport net.foxycorndog.arrowide.components.treemenu.TreeMenuListener;\r\nimport net.foxycorndog.arrowide.components.window.Window;\r\nimport net.foxycorndog.arrowide.console.ConsoleListener;\r\nimport net.foxycorndog.arrowide.console.ConsoleStream;\r\nimport net.foxycorndog.arrowide.dialog.Dialog;\r\nimport net.foxycorndog.arrowide.dialog.DialogFilter;\r\nimport net.foxycorndog.arrowide.dialog.FileBrowseDialog;\r\nimport net.foxycorndog.arrowide.dialog.FileInputDialog;\r\nimport net.foxycorndog.arrowide.dialog.OptionDialog;\r\nimport net.foxycorndog.arrowide.dialog.PreferencesDialog;\r\nimport net.foxycorndog.arrowide.dialog.DialogPanel;\r\nimport net.foxycorndog.arrowide.dialog.PropertiesDialog;\r\nimport net.foxycorndog.arrowide.dialog.TextInputDialog;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.AssemblyPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.CppPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.GeneralPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.JavaPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.PythonPanel;\r\nimport net.foxycorndog.arrowide.file.ConfigReader;\r\nimport net.foxycorndog.arrowide.file.FileUtils;\r\nimport net.foxycorndog.arrowide.formatter.Formatter;\r\nimport net.foxycorndog.arrowide.language.CompilerListener;\r\nimport net.foxycorndog.arrowide.language.Keyword;\r\nimport net.foxycorndog.arrowide.language.Language;\r\nimport net.foxycorndog.arrowide.language.CompileOutput;\r\nimport net.foxycorndog.arrowide.language.java.JavaLanguage;\r\nimport net.foxycorndog.arrowide.printer.TextPrinter;\r\nimport net.foxycorndog.arrowide.xml.Reader;\r\nimport net.foxycorndog.arrowide.xml.XMLItem;\r\n\r\nimport org.eclipse.swt.SWT;\r\nimport org.eclipse.swt.events.ControlEvent;\r\nimport org.eclipse.swt.events.ControlListener;\r\nimport org.eclipse.swt.events.DisposeEvent;\r\nimport org.eclipse.swt.events.DisposeListener;\r\nimport org.eclipse.swt.events.KeyEvent;\r\nimport org.eclipse.swt.events.KeyListener;\r\nimport org.eclipse.swt.events.MouseEvent;\r\nimport org.eclipse.swt.events.MouseListener;\r\nimport org.eclipse.swt.events.MouseMoveListener;\r\nimport org.eclipse.swt.events.PaintEvent;\r\nimport org.eclipse.swt.events.PaintListener;\r\nimport org.eclipse.swt.events.SelectionEvent;\r\nimport org.eclipse.swt.events.SelectionListener;\r\nimport org.eclipse.swt.graphics.Color;\r\nimport org.eclipse.swt.graphics.Font;\r\nimport org.eclipse.swt.graphics.FontData;\r\nimport org.eclipse.swt.graphics.GC;\r\nimport org.eclipse.swt.graphics.Image;\r\nimport org.eclipse.swt.graphics.Point;\r\nimport org.eclipse.swt.graphics.Rectangle;\r\nimport org.eclipse.swt.layout.FillLayout;\r\nimport org.eclipse.swt.layout.GridData;\r\nimport org.eclipse.swt.layout.GridLayout;\r\nimport org.eclipse.swt.opengl.GLCanvas;\r\nimport org.eclipse.swt.opengl.GLData;\r\nimport org.eclipse.swt.printing.PrintDialog;\r\nimport org.eclipse.swt.printing.Printer;\r\nimport org.eclipse.swt.printing.PrinterData;\r\nimport org.eclipse.swt.widgets.Button;\r\nimport org.eclipse.swt.widgets.Composite;\r\nimport org.eclipse.swt.widgets.DirectoryDialog;\r\nimport org.eclipse.swt.widgets.Display;\r\nimport org.eclipse.swt.widgets.Event;\r\nimport org.eclipse.swt.widgets.FileDialog;\r\nimport org.eclipse.swt.widgets.Label;\r\nimport org.eclipse.swt.widgets.Listener;\r\nimport org.eclipse.swt.widgets.Menu;\r\nimport org.eclipse.swt.widgets.MenuItem;\r\nimport org.eclipse.swt.widgets.Monitor;\r\nimport org.eclipse.swt.widgets.Shell;\r\nimport org.eclipse.swt.widgets.TabFolder;\r\nimport org.eclipse.swt.widgets.TabItem;\r\nimport org.eclipse.swt.widgets.Text;\r\nimport org.eclipse.swt.widgets.Widget;\r\nimport org.lwjgl.LWJGLException;\r\nimport org.lwjgl.Sys;\r\nimport org.lwjgl.opengl.GLContext;\r\n\r\n/**\r\n * Main class for the ArrowIDE program.\r\n * \r\n * @author\tBraden Steffaniak\r\n * @since\tFeb 13, 2013 at 4:46:00 PM\r\n * @since\tv0.7\r\n * @version\tFeb 13, 2013 at 4:46:00 PM\r\n * @version\tv0.7\r\n */\r\npublic class ArrowIDE implements ContentListener, CodeFieldListener, TabMenuListener\r\n{\r\n\tprivate boolean\t\t\t\t\t\t\t\tfilesNeedRefresh;\r\n\tprivate boolean\t\t\t\t\t\t\t\tcustom;\r\n\t\r\n\tprivate int\t\t\t\t\t\t\t\t\tcurId;\r\n\tprivate int\t\t\t\t\t\t\t\t\ttitleBarHeight;\r\n\tprivate int\t\t\t\t\t\t\t\t\toldTabId;\r\n\r\n\tprivate CodeField\t\t\t\t\t\t\tcodeField;\r\n\r\n\tprivate ConsoleField\t\t\t\t\t\tconsoleField;\r\n\r\n\tprivate String\t\t\t\t\t\t\t\tfileLocation;\r\n\r\n\tprivate Image\t\t\t\t\t\t\t\tfolderImage, fileImage,\r\n\t\t\tjavaFileImage, classFileImage, glslFileImage, txtFileImage,\r\n\t\t\trtfFileImage, exeFileImage, asmFileImage, cppFileImage, hFileImage;\r\n\r\n\tprivate PropertiesDialog\t\t\t\t\tproperties;\r\n\tprivate PreferencesDialog\t\t\t\t\tpreferences;\r\n\r\n\tprivate Composite\t\t\t\t\t\t\tcontentPanel;\r\n\t\r\n\tprivate Menubar\t\t\t\t\t\t\t\tmenubar;\r\n\r\n\tprivate TitleBar\t\t\t\t\t\t\ttitleBar;\r\n\t\r\n\tprivate Toolbar\t\t\t\t\t\t\t\ttoolbar;\r\n\r\n\tprivate TreeMenu\t\t\t\t\t\t\ttreeMenu;\r\n\t\r\n\tprivate CompositeSizer\t\t\t\t\t\ttreeMenuSizer, codeFieldSizer;\r\n\r\n\tprivate TabMenu\t\t\t\t\t\t\t\tfileTabs, consoleTabs;\r\n\r\n\tprivate ConsoleStream\t\t\t\t\t\tconsoleStream;\r\n\r\n\tprivate Dialog\t\t\t\t\t\t\t\tnewFolderDialog, newFileDialog,\r\n\t\t\tnewProjectDialog;\r\n\tprivate TextInputDialog\t\t\t\t\t\trenameFileDialog;\r\n\r\n\tprivate HashMap<Integer, String>\t\t\ttreeItemLocations;\r\n\tprivate HashMap<String, Integer>\t\t\ttreeItemIds;\r\n\tprivate HashMap<Integer, String>\t\t\ttreeItemDirectories;\r\n\tprivate HashMap<String, String>\t\t\t\tfileCache;\r\n\tprivate HashMap<String, Boolean>\t\t\tfileCacheSaved;\r\n\tprivate HashMap<Integer, String>\t\t\ttabFileLocations;\r\n\tprivate HashMap<String, Integer>\t\t\ttabFileIds;\r\n\tprivate HashMap<Integer, Integer>\t\t\ttabTopPixels;\r\n\tprivate HashMap<Integer, Point>\t\t\t\ttabSelection;\r\n//\tprivate HashMap<, Integer>\t\t\t\t\tconsoleTabIds;\r\n\tprivate HashMap<Integer, Program>\t\t\t\t\tconsoleTabPrograms;\r\n\t\r\n\tprivate ArrayList<Program>\t\t\t\t\tprograms;\r\n\r\n\tprivate static boolean\t\t\t\t\t\trestarting;\r\n\tprivate static boolean\t\t\t\t\t\texiting;\r\n\t\r\n\tprivate static int\t\t\t\t\t\t\tuntitledNumber;\r\n\t\r\n\tprivate static Window\t\t\t\t\t\twindow;\r\n\t\r\n\tprivate static SplashScreen\t\t\t\t\tsplash;\r\n\r\n\tprivate static String\t\t\t\t\t\tconfigLocation;\r\n\r\n\tpublic static final Display\t\t\t\t\tDISPLAY;\r\n\r\n\tpublic static final Color\t\t\t\t\tTITLE_BAR_BACKGROUND, TITLE_BAR_FOREGROUND, FOCUS_COLOR, NON_FOCUS_COLOR;\r\n\t\r\n\tpublic static final HashMap<String, String>\tCONFIG_DATA;\r\n\t\r\n\tpublic static final HashMap<String, HashMap<String, XMLItem[]>>\tPROJECT_PROPERTIES;\r\n\tpublic static final HashMap<String, HashMap<String, XMLItem[]>>\tPROJECT_CLASSPATHS;\r\n\t// public static final HashMap<Integer, String> CONFIG_LINE_NUMBER_DATA;\r\n\t// public static final HashMap<String, Integer> CONFIG_LINE_NUMBERS;\r\n\r\n\tpublic static final HashMap<String, Object>\tPROPERTIES;\r\n\t\r\n\tprivate static ArrayList<Thread>\t\t\tfileViewerThreads;\r\n\t\r\n\tprivate class Efficient\r\n\t{\r\n\t\tprivate int i;\r\n\t\t\r\n\t\tprivate String s;\r\n\t\t\r\n\t\tpublic Efficient(String s, int i)\r\n\t\t{\r\n\t\t\tthis.s = s;\r\n\t\t\tthis.i = i;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiate the {@link #DISPLAY display}, and the color palette.\r\n\t */\r\n\tstatic\r\n\t{\r\n\t\tDISPLAY = new Display();\r\n\t\t\r\n\t\tTITLE_BAR_BACKGROUND = new Color(DISPLAY, 240, 240, 240);\r\n\t\tTITLE_BAR_FOREGROUND = TITLE_BAR_BACKGROUND;\r\n\t\t\r\n\t\tFOCUS_COLOR = new Color(DISPLAY, 255, 255, 255);\r\n\t\tNON_FOCUS_COLOR = ColorUtils.lighten(TITLE_BAR_BACKGROUND, 10);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize the CONFIG_DATA HashMaps and set the os properties\r\n\t * in the PROPERTIES HashMap.\r\n\t */\r\n\tstatic\r\n\t{\r\n\t\tCONFIG_DATA             = new HashMap<String, String>();\r\n\t\t\r\n\t\tPROJECT_PROPERTIES      = new HashMap<String, HashMap<String, XMLItem[]>>();\r\n\t\tPROJECT_CLASSPATHS      = new HashMap<String, HashMap<String, XMLItem[]>>();\r\n//\t\tCONFIG_LINE_NUMBER_DATA = new HashMap<Integer, String>();\r\n//\t\tCONFIG_LINE_NUMBERS     = new HashMap<String, Integer>();\r\n\t\t\r\n\t\tPROPERTIES              = new HashMap<String, Object>();\r\n\t\t\r\n\t\tString osName = System.getProperty(""os.name"");\r\n\t\t\r\n\t\tif (osName.toLowerCase().contains(""mac""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""macosx"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.BORDER);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.COMMAND);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", """");\r\n\t\t\tPROPERTIES.put(""colon"", ';');\r\n\t\t}\r\n\t\telse if (osName.toLowerCase().contains(""win""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""windows"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.NONE);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.CTRL);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", "".exe"");\r\n\t\t\tPROPERTIES.put(""colon"", ';');\r\n\t\t}\r\n\t\telse if (osName.toLowerCase().contains(""lin""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""linux"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.NONE);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.CTRL);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", """");\r\n\t\t\tPROPERTIES.put(""colon"", ':');\r\n\t\t}\r\n\t\t\r\n\t\tsetArchitecture();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set the os.arch value for the {@link #PROPERTIES} variable.\r\n\t */\r\n\tprivate static void setArchitecture()\r\n\t{\r\n\t\tint bitness = 32;\r\n\t\t\r\n\t\tProcessBuilder b = new ProcessBuilder(new String[] { ""res/bitness"" });\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tProcess p = b.start();\r\n\t\t\t\r\n\t\t\tInputStream in = p.getInputStream();\r\n\t\t\t\r\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(in));\r\n\t\t\t\r\n\t\t\tString line = null;\r\n\t\t\t\r\n\t\t\twhile ((line = reader.readLine()) != null)\r\n\t\t\t{\r\n\t\t\t\tbitness = Integer.valueOf(line);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tPROPERTIES.put(""os.arch"", bitness);\r\n\t}\r\n\t\r\n\t/**\r\n\t * The initial starting point of the program. It is only called\r\n\t * whenever the program is started from scratch without a restart.\r\n\t * \r\n\t * @param args The command line arguments. (Unused)\r\n\t */\r\n\tpublic static void main(String args[])\r\n\t{\r\n\t\tstart();\r\n\t}\r\n\t\r\n\t/**\r\n\t * The constructor for this class. Initializes the window that is\r\n\t * used for programming.\r\n\t * \r\n\t * @param display The display to use.\r\n\t */\r\n\tpublic ArrowIDE(final Display display)\r\n\t{\r\n//\t\tSystem.out.println(map.get(""Contacts.Contact.ContactId"")[0].getContents());\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""window.custom""))\r\n\t\t{\r\n\t\t\tcustom = Boolean.valueOf(CONFIG_DATA.get(""window.custom""));\r\n\t\t}\r\n\t\t\r\n\t\tMonitor monitor = DISPLAY.getPrimaryMonitor();\r\n\t\tfinal Rectangle screenBounds = monitor.getBounds();\r\n\t\t\r\n\t\tint height = (int)(monitor.getBounds().height / 1.5f);\r\n\t\tint width  = (int)(monitor.getBounds().width / 1.5f);\r\n\t\t\r\n\t\twindow = new Window(DISPLAY, custom);//, SWT.SHELL_TRIM & (~SWT.RESIZE));\r\n\t\twindow.setSize(width, height);\r\n\t\t\r\n\t\tfinal Rectangle shellBounds = window.getBounds();\r\n\t\t \r\n\t\twindow.setLocation(screenBounds.width / 2 - shellBounds.width / 2, screenBounds.height / 2 - shellBounds.height / 2);\r\n\t\twindow.setTitle(""Arrow IDE"");\r\n\t\t\r\n\t\tPROPERTIES.put(""arrowide.location"", FileUtils.getParentFolder(configLocation));\r\n\t\t\r\n\t\t/**\r\n\t\t * Set up the OpenGL (lwjgl) capabilities for the program.\r\n\t\t */\r\n\t\t{\r\n\t\t\tSystem.setProperty(""org.lwjgl.librarypath"", PROPERTIES.get(""arrowide.location"") + ""/res/native/"" + PROPERTIES.get(""os.name"") + ""/"");\r\n\t\t\t\r\n\t\t\tComposite comp = new Composite(window.getShell(), SWT.NONE);\r\n\t\t\tcomp.setLayout(new FillLayout());\r\n\t\t\t\r\n\t\t\tGLData data = new GLData();\r\n\t\t\tdata.doubleBuffer = true;\r\n\t\t\tfinal GLCanvas canvas = new GLCanvas(comp, SWT.NONE, data);\r\n\t\t\t\r\n\t\t\tcanvas.setCurrent();\r\n\t\t\t\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tGLContext.useContext(canvas);\r\n\t\t\t}\r\n\t\t\tcatch(LWJGLException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""monitor.width"") && CONFIG_DATA.containsKey(""monitor.height""))\r\n\t\t{\r\n\t\t\twidth  = Integer.parseInt(CONFIG_DATA.get(""monitor.width""));\r\n\t\t\theight = Integer.parseInt(CONFIG_DATA.get(""monitor.height""));\r\n\t\t\t\r\n\t\t\tif (width == screenBounds.width && height == screenBounds.height)\r\n\t\t\t{\r\n\t\t\t\tif (CONFIG_DATA.containsKey(""window.width"") && CONFIG_DATA.containsKey(""window.height""))\r\n\t\t\t\t{\r\n\t\t\t\t\twidth  = Integer.parseInt(CONFIG_DATA.get(""window.width""));\r\n\t\t\t\t\theight = Integer.parseInt(CONFIG_DATA.get(""window.height""));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (width > 0 && height > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twindow.setSize(width, height);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (CONFIG_DATA.containsKey(""window.x"") && CONFIG_DATA.containsKey(""window.y""))\r\n\t\t\t\t{\r\n\t\t\t\t\tint x = Integer.parseInt(CONFIG_DATA.get(""window.x""));\r\n\t\t\t\t\tint y = Integer.parseInt(CONFIG_DATA.get(""window.y""));\r\n\t\t\t\t\t\r\n\t\t\t\t\twindow.setLocation(x, y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""monitor.width"", screenBounds.width + """");\r\n\t\tsetConfigDataValue(""monitor.height"", screenBounds.height + """");\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""window.fullscreen""))\r\n\t\t{\r\n\t\t\tboolean fullscreen = Boolean.valueOf(CONFIG_DATA.get(""window.fullscreen""));\r\n\t\t\t\r\n\t\t\twindow.setFullscreen(fullscreen);\r\n\t\t}\r\n\t\t\r\n\t\tif (!window.isFullscreen() && CONFIG_DATA.containsKey(""window.maximized""))\r\n\t\t{\r\n\t\t\tboolean maximized = Boolean.valueOf(CONFIG_DATA.get(""window.maximized""));\r\n\t\t\t\r\n\t\t\twindow.setMaximized(maximized);\r\n\t\t}\r\n\t\t\r\n\t\twindow.setBackground(new Color(display, 225, 225, 225));\r\n\t\t\r\n\t\tif (custom)\r\n\t\t{\r\n\t\t\twindow.setBorderColor(new Color(display, 215, 215, 215));\r\n\t\t\twindow.setBorderSize(3);\r\n\t\t}\r\n\t\t\r\n\t\tdisplay.addFilter(SWT.KeyDown, new Listener()\r\n\t\t{\r\n\t\t\tpublic void handleEvent(Event event)\r\n\t\t\t{\r\n\t\t\t\tif (event.keyCode == SWT.F11)\r\n\t\t\t\t{\r\n\t\t\t\t\twindow.setFullscreen(!window.isFullscreen());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tcontentPanel = window.getContentPanel();\r\n\t\tcontentPanel.setLocation(0, 0);\r\n\t\tcontentPanel.setSize(window.getClientArea().width, window.getClientArea().height);\r\n\t\tcontentPanel.setBackground(window.getBackground());\r\n\t\t\r\n\t\tif (custom)\r\n\t\t{\r\n\t\t\ttitleBar     = new TitleBar(window, 28, SWT.MIN | SWT.MAX | SWT.CLOSE | SWT.CENTER);\r\n\t\t\ttitleBar.setBackground(TITLE_BAR_BACKGROUND);\r\n\t\t\ttitleBar.setForeground(TITLE_BAR_FOREGROUND);\r\n\t\t\t\r\n\t\t\ttitleBarHeight = titleBar.getHeight();\r\n\t\t}\r\n\t\t\r\n//\t\tGridLayout b = new GridLayout();\r\n//\t\tb.makeColumnsEqualWidth = false;\r\n//\t\t\r\n//\t\tshell.setLayout(b);\r\n\t\t\r\n\t\tfileCache     = new HashMap<String, String>();\r\n\t\t\r\n\t\tcodeField     = new CodeField(contentPanel);\r\n\t\tconsoleField  = new ConsoleField(contentPanel);\r\n\t\t\r\n\t\tcodeField.addContentListener(this);\r\n\t\tcodeField.addCodeFieldListener(this);\r\n\t\tcodeField.setBackground(FOCUS_COLOR);\r\n\t\t\r\n\t\tint contentWidth  = (int)(contentPanel.getSize().x / 100f * 80);\r\n\t\tint conHeight     = (int)(contentPanel.getSize().y / 100f * 20);\r\n\t\tint toolbarHeight = (int)(25);\r\n\t\t\r\n\t\tcodeField.setSize(contentWidth, contentPanel.getSize().y - conHeight - toolbarHeight - 16);\r\n\t\tcodeField.setLocation(contentPanel.getSize().x - codeField.getWidth(), toolbarHeight);//contentPanel.getSize().y - codeField.getHeight());\r\n\t\tcodeField.setShowLineNumbers(true);\r\n\t\t\r\n\t\tconsoleField.setSize(contentWidth, conHeight - 5);\r\n\t\tconsoleField.setLocation(codeField.getBounds().x, codeField.getHeight() + codeField.getBounds().y + 5);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconsoleStream = new ConsoleStream(""log.txt"");\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tfolderImage       = new Image(display, new FileInputStream(""res/images/folderimage.png""));\r\n\t\t\tfileImage         = new Image(display, new FileInputStream(""res/images/fileimage.png""));\r\n\t\t\tjavaFileImage     = new Image(display, new FileInputStream(""res/images/javafileimage.png""));\r\n\t\t\tclassFileImage    = new Image(display, new FileInputStream(""res/images/classfileimage.png""));\r\n\t\t\tglslFileImage     = new Image(display, new FileInputStream(""res/images/glslfileimage.png""));\r\n\t\t\ttxtFileImage      = new Image(display, new FileInputStream(""res/images/txtfileimage.png""));\r\n\t\t\trtfFileImage      = new Image(display, new FileInputStream(""res/images/rtffileimage.png""));\r\n\t\t\texeFileImage      = new Image(display, new FileInputStream(""res/images/exefileimage.png""));\r\n\t\t\tasmFileImage      = new Image(display, new FileInputStream(""res/images/asmfileimage.png""));\r\n\t\t\tcppFileImage      = new Image(display, new FileInputStream(""res/images/cppfileimage.png""));\r\n\t\t\thFileImage        = new Image(display, new FileInputStream(""res/images/hfileimage.png""));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttabFileLocations  = new HashMap<Integer, String>();\r\n\t\ttabFileIds        = new HashMap<String, Integer>();\r\n\t\ttabTopPixels      = new HashMap<Integer, Integer>();\r\n\t\ttabSelection      = new HashMap<Integer, Point>();\r\n\t\t\r\n\t\tfileTabs = new TabMenu(contentPanel);\r\n\t\tfileTabs.setBackground(ColorUtils.darken(contentPanel.getBackground(), 20));\r\n\t\tfileTabs.addListener(this);\r\n\t\t\r\n\t\tconsoleTabs = new TabMenu(contentPanel);\r\n\t\tconsoleTabs.setBackground(ColorUtils.darken(contentPanel.getBackground(), 20));\r\n\t\tconsoleTabs.setMaxWidth(codeField.getWidth() + 2);\r\n\t\tconsoleTabs.addListener(this);\r\n\t\t\r\n\t\tprograms = new ArrayList<Program>();\r\n\t\tconsoleTabPrograms = new HashMap<Integer, Program>();\r\n\t\t\r\n\t    fileTabs.setMaxWidth(codeField.getWidth() + 2);\r\n\t\tcodeField.setLocation(codeField.getX(), codeField.getY() + fileTabs.getHeight());\r\n\t\tfileTabs.setLocation(codeField.getX(), 2);\r\n\t\t\r\n\t\tpreferences = new PreferencesDialog(contentPanel);\r\n\t\tpreferences.addDialogPanel(new GeneralPanel(preferences.getContentPanel(), this));\r\n\t\tpreferences.addDialogPanel(new JavaPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new CppPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new AssemblyPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new PythonPanel(preferences.getContentPanel()));\r\n\t\t\r\n\t\tproperties = new PropertiesDialog(contentPanel);\r\n\t\tproperties.addDialogPanel(new JavaPanel(properties.getContentPanel()));\r\n\t\t\r\n\t\tmenubar = new Menubar(contentPanel);\r\n\t\tmenubar.setBackground(TITLE_BAR_BACKGROUND);\r\n\t\tmenubar.setSize(contentPanel.getSize().x, 20);\r\n\t\tmenubar.addMenuHeader(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""New"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Open"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Save"", ""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Save as..."", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Refresh"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Print"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Restart"", ""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Exit"", ""FILE"");\r\n\r\n\t\tmenubar.addMenuSubItem(""Project"", ""FILE>New"");\r\n\t\tmenubar.addMenuSubItem(""Empty File"", ""FILE>New"");\r\n\t\t\r\n\t\tmenubar.addMenuHeader(""EDIT"");\r\n\t\tmenubar.addMenuSubItem(""Preferences"", ""EDIT"");\r\n\r\n\t\tmenubar.addMenuHeader(""PROJECT"");\r\n\t\tmenubar.addMenuSubItem(""Properties"", ""PROJECT"");\r\n\t\t\r\n\t\tmenubar.addListener(new MenubarListener()\r\n\t\t{\r\n\t\t\tpublic void subItemPressed(String subItemId)\r\n\t\t\t{\r\n\t\t\t\tif (subItemId.equals(""FILE>New>Empty File""))\r\n\t\t\t\t{\r\n\t\t\t\t\tnewFile();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>New>Project""))\r\n\t\t\t\t{\r\n\t\t\t\t\tnewProject();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Open""))\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Save""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Save as...""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(null);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Refresh""))\r\n\t\t\t\t{\r\n\t\t\t\t\trefreshFileViewer(false);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Print""))\r\n\t\t\t\t{\r\n\t\t\t\t\tPrintDialog dialog = new PrintDialog(window.getShell(), SWT.NONE);\r\n\t\t\t\t\tdialog.setScope(PrinterData.SELECTION);\r\n\t\t\t\t\t\r\n\t\t\t\t\tPrinterData data = dialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tFontData fd[] = codeField.getFont().getFontData().clone();\r\n\t\t\t\t\tfd[0].setHeight(10);\r\n\t\t\t\t\t\r\n\t\t\t\t\tTextPrinter printer = new TextPrinter(data, codeField.getText(), new Font(display, fd[0]), codeField.getStyles());\r\n\t\t\t\t\tprinter.setMargins(1, 1, 1, 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!printer.print())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tSystem.err.println(""Was not able to print!"");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Restart""))\r\n\t\t\t\t{\r\n\t\t\t\t\trestart();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Exit""))\r\n\t\t\t\t{\r\n\t\t\t\t\texit(window);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""EDIT>Preferences""))\r\n\t\t\t\t{\r\n\t\t\t\t\tpreferences.open();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""PROJECT>Properties""))\r\n\t\t\t\t{\r\n\t\t\t\t\tproperties.open();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\ttoolbar       = new Toolbar(contentPanel);\r\n\t\t\t\r\n\t\t\ttoolbar.setBackground(window.getBackground());\r\n\r\n\t\t\ttoolbar.addToolItem(""Save"", new Image(display, new FileInputStream(""res/images/savebutton.png"")));\r\n\t\t\ttoolbar.addSeparator();\r\n\t\t\ttoolbar.addToolItem(""Compile"", new Image(display, new FileInputStream(""res/images/compilebutton.png"")));\r\n\t\t\ttoolbar.addSeparator();\r\n\t\t\ttoolbar.addToolItem(""Run"", new Image(display, new FileInputStream(""res/images/runbutton.png"")));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttoolbar.addListener(new ToolbarListener()\r\n\t\t{\r\n\t\t\tpublic void toolItemPressed(String toolItemName)\r\n\t\t\t{\r\n\t\t\t\tif (toolItemName.equals(""Save""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t}\r\n\t\t\t\telse if (toolItemName.equals(""Compile""))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (fileLocation == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\topenFile();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (Language.canCompile(FileUtils.getFileType(fileLocation)))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tString outputLocation = FileUtils.getParentFolder(fileLocation) + ""/"";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tnew File(outputLocation).mkdirs();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tLanguage.compile(fileLocation, codeField.getRawText(), outputLocation, consoleStream);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (toolItemName.equals(""Run""))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (fileLocation == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tProgram program = Language.run(codeField.getLanguage(), fileLocation, consoleStream);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (program != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tprograms.add(program);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconsoleTabPrograms.put(, consoleTabs.addTab(program.getName());\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tupdateLayout();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tLanguage.init();\r\n\t\t\r\n\t\tLanguage.addCompilerListener(new CompilerListener()\r\n\t\t{\r\n\t\t\tpublic void compiled(final String files[], final CompileOutput outputs[], final PrintStream stream, String fileName)\r\n\t\t\t{\r\n\t\t\t\tfinal boolean isInViewer = treeItemLocations.containsKey(fileLocation);\r\n\t\t\t\t\r\n\t\t\t\tif (outputs[0].getResult() == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tdisplay.syncExec(new Runnable()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (stream != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tstream.println(""Compiled successfully."");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (isInViewer)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor (int i = 0; i < files.length; i ++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(files[i]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t{\r\n\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor (int i = 0; i < outputs.length; i++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (outputs[i].getResult() != 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcodeField.addError(outputs[i].getStartIndex(), outputs[i].getEndIndex());\r\n//\t\t\t\t\t\t\t\tSystem.out.print(outputs[i] + ""; "");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tSystem.out.println();\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tcodeField.highlightSyntax();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tfileViewerThreads    = new ArrayList<Thread>();\r\n\t\t\r\n\t\tfileCacheSaved        = new HashMap<String, Boolean>();\r\n\t\ttreeItemLocations     = new HashMap<Integer, String>();\r\n\t\ttreeItemIds           = new HashMap<String, Integer>();\r\n\t\ttreeItemDirectories   = new HashMap<Integer, String>();\r\n\t\t\r\n\t\ttreeMenu              = new TreeMenu(contentPanel);\r\n\t\ttreeMenu.setSize(contentPanel.getSize().x - codeField.getWidth() - 10, codeField.getHeight() + consoleField.getHeight());\r\n\t\ttreeMenu.setLocation(0, codeField.getY());\r\n\t\ttreeMenu.setBackground(NON_FOCUS_COLOR);\r\n\t\t\r\n\t\ttreeMenuSizer = new CompositeSizer(contentPanel, CompositeSizer.VERTICAL);\r\n\t\ttreeMenuSizer.setSize(5, treeMenu.getHeight());\r\n\t\ttreeMenuSizer.setLocation(treeMenu.getLocation().x + treeMenu.getWidth(), treeMenu.getLocation().y);\r\n\t\ttreeMenuSizer.setBackground(new Color(DISPLAY, 100, 100, 100));\r\n\t\ttreeMenuSizer.setForeground(new Color(DISPLAY, 230, 230, 230));\r\n\t\ttreeMenuSizer.setMinimumX(treeMenu.getLocation().x);\r\n\t\ttreeMenuSizer.addSizerListener(new SizerListener()\r\n\t\t{\r\n\t\t\tpublic void sizerMoved(int dx, int dy)\r\n\t\t\t{\r\n\t\t\t\ttreeMenu.setSize(treeMenu.getWidth() + dx, treeMenu.getHeight());\r\n\t\t\t\tcodeField.setSize(codeField.getWidth() - dx, codeField.getHeight());\r\n\t\t\t\tcodeField.setLocation(codeField.getX() + dx, codeField.getY());\r\n\t\t\t\t\r\n\t\t\t\tconsoleField.setSize(codeField.getWidth(), consoleField.getHeight());\r\n\t\t\t\tconsoleField.setLocation(codeField.getX(), consoleField.getLocation().y);\r\n\r\n\t\t\t\tcodeFieldSizer.setSize(codeField.getWidth(), 5);\r\n\t\t\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight());\r\n\t\t\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t\t\t\t\r\n\t\t\t\ttoolbar.setLocation(codeField.getX(), toolbar.getY());\r\n\t\t\t\tfileTabs.setLocation(codeField.getX(), fileTabs.getY());\r\n\t\t\t\tconsoleTabs.setLocation(codeField.getX(), consoleTabs.getY());\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tcodeFieldSizer = new CompositeSizer(contentPanel, CompositeSizer.HORIZONTAL);\r\n\t\tcodeFieldSizer.setSize(codeField.getWidth(), 3);\r\n\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight() + 1);\r\n\t\tcodeFieldSizer.setBackground(new Color(DISPLAY, 100, 100, 100));\r\n\t\tcodeFieldSizer.setForeground(new Color(DISPLAY, 230, 230, 230));\r\n\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t\tcodeFieldSizer.addSizerListener(new SizerListener()\r\n\t\t{\r\n\t\t\tpublic void sizerMoved(int dx, int dy)\r\n\t\t\t{\r\n\t\t\t\tcodeField.setSize(codeField.getWidth(), codeField.getHeight() + dy);\r\n\t\t\t\t\r\n\t\t\t\tconsoleField.setSize(codeField.getWidth(), consoleField.getHeight() - dy);\r\n\t\t\t\tconsoleField.setLocation(codeField.getX(), consoleField.getLocation().y + dy);\r\n\t\t\t\t\r\n\t\t\t\tconsoleTabs.setLocation(codeField.getX(), consoleTabs.getY() + dy);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tMenu m = new Menu(treeMenu);\r\n\t\ttreeMenu.setMenu(m);\r\n\t\t\r\n\t\tfinal MenuItem newFolder = new MenuItem(m, SWT.CASCADE);\r\n\t\tnewFolder.setText(""New Folder"");\r\n\t\t\r\n\t\tfinal MenuItem newFile = new MenuItem(m, SWT.CASCADE);\r\n\t\tnewFile.setText(""New File"");\r\n\t\t\r\n\t\tfinal MenuItem rename = new MenuItem(m, SWT.CASCADE);\r\n\t\trename.setText(""Rename"");\r\n\t\t\r\n\t\tfinal MenuItem delete = new MenuItem(m, SWT.CASCADE);\r\n\t\tdelete.setText(""Delete"");\r\n\t\t\r\n\t\tfinal ArrowIDE thisIDE = this;\r\n\t\t\r\n\t\tSelectionListener menuListener = new SelectionListener()\r\n\t\t{\r\n\t\t\tpublic void widgetDefaultSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tif (e.widget == delete)\r\n\t\t\t\t{\r\n\t\t\t\t\tint id = treeMenu.getSelection();\r\n//\t\t\t\t\t\r\n//\t\t\t\t\tif (treeItems.containsKey(id))\r\n//\t\t\t\t\t{\r\n//\t\t\t\t\t\tSystem.out.println(""is file"");\r\n//\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = treeItemLocations.get(id);\r\n\t\t\t\t\t\r\n\t\t\t\t\tdeleteFile(location);\r\n\r\n\t\t\t\t\tremoveFromFileViewer(location);\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == newFolder)\r\n\t\t\t\t{\r\n\t\t\t\t\tString preLoc = treeItemLocations.get(treeMenu.getSelection());\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (preLoc == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLoc = FileUtils.removeEndingSlashes(CONFIG_DATA.get(""workspace.location"")) + ""/"";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString preLocation = FileUtils.removeEndingSlashes(preLoc);\r\n\r\n\t\t\t\t\tif (FileUtils.isFile(preLocation))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLocation = FileUtils.getParentFolder(preLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tnewFolderDialog = new FileInputDialog(""Enter the folder name:"", ""Folder name:"", true, preLocation + ""/"", false);\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = newFolderDialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (location != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile f = new File(location);\r\n\t\t\t\t\t\tf.mkdirs();\r\n\r\n\t\t\t\t\t\taddToFileViewer(location);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == newFile)\r\n\t\t\t\t{\r\n\t\t\t\t\tString preLoc = treeItemLocations.get(treeMenu.getSelection());\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (preLoc == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLoc = FileUtils.removeEndingSlashes(CONFIG_DATA.get(""workspace.location"")) + ""/"";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString preLocation = FileUtils.removeEndingSlashes(preLoc);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (FileUtils.isFile(preLocation))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLocation = FileUtils.getParentFolder(preLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tnewFileDialog = new FileInputDialog(""Enter the file name:"", ""File name:"", false, preLocation + ""/"", false);\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = newFileDialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (location != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile f = new File(location);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tf.createNewFile();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\topenFile(location);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\taddToFileViewer(location);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (IOException e2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\te2.printStackTrace();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == rename)\r\n\t\t\t\t{\r\n\t\t\t\t\tfinal int selection\t\t= treeMenu.getSelection();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfinal String loc\t\t= treeItemLocations.get(selection);\r\n\t\t\t\t\t\r\n\t\t\t\t\tboolean willContinue\t= false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (fileCache.containsKey(loc))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (!fileCacheSaved.get(loc))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tString result = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tOptionDialog optDialog = new OptionDialog(""Save?"", ""Would you like to save before renaming?"");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tresult = optDialog.open();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (result != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif (result.equals(""yes""))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tsaveFile(loc);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\twillContinue\t= true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if (result.equals(""no""))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (willContinue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trenameFileDialog = new TextInputDialog(""Enter the new name:"", ""New name:"", FileUtils.getFileName(treeItemLocations.get(selection)));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\trenameFileDialog.addDialogFilter(new DialogFilter()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic String filter(String text)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttext = FileUtils.removeEndingSlashes(text.replace('\\\\', '/'));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor (int i = 0; i < text.length(); i ++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (text.charAt(i) == '/')\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\treturn ""The name must be in the same location."";\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tString newLoc\t\t= FileUtils.getParentFolder(loc) + ""/"" + text;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tboolean currentFile\t= text.equals(FileUtils.getFileName(loc));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (currentFile)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn ""The name must be different than the current name."";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tremoveFromFileViewer(loc);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tFile f = new File(loc);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tboolean successful = f.renameTo(new File(newLoc));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (successful)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (fileCache.containsKey(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileCache.put(newLoc, fileCache.remove(loc));\r\n\t\t\t\t\t\t\t\t\t\tfileCacheSaved.put(newLoc, fileCacheSaved.remove(loc));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (tabFileLocations.containsValue(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tint tabId = tabFileIds.remove(loc);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tfileTabs.setTabText(tabId, FileUtils.getFileName(newLoc));\r\n\t\t\t\t\t\t\t\t\t\ttabFileLocations.put(tabId, newLoc);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\ttabFileIds.put(newLoc, tabId);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (tabFileIds.containsKey(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ttabFileIds.put(newLoc, tabFileIds.remove(loc));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (currentFile)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileLocation = newLoc;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tcodeField.setLanguage(Language.getLanguage(fileLocation));\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tcodeField.highlightSyntax();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (loc.equals(fileLocation))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileLocation = newLoc;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tboolean before = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (fileCacheSaved.containsKey(newLoc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tbefore = fileCacheSaved.get(newLoc);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n//\t\t\t\t\t\t\t\t\trefreshFileViewer();\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(newLoc);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tfileCacheSaved.put(newLoc, before);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(loc);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tString result = renameFileDialog.open();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (result != null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tFileUtils.removeEndingSlashes(result.replace('\\\\', '/'));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\twidgetDefaultSelected(e);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tnewFolder.addSelectionListener(menuListener);\r\n\t\tnewFile.addSelectionListener(menuListener);\r\n\t\trename.addSelectionListener(menuListener);\r\n\t\tdelete.addSelectionListener(menuListener);\r\n\t\t\r\n\t\ttreeMenu.addListener(new TreeMenuListener()\r\n\t\t{\r\n\t\t\tpublic void treeItemDoubleClicked(int id)\r\n\t\t\t{\r\n\t\t\t\tif (!treeItemDirectories.containsKey(id))\r\n\t\t\t\t{\r\n\t\t\t\t\tString location = treeItemLocations.get(id);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile(location);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpublic void treeItemRightClicked(int id)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tpublic void treeItemSelected(int id)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\tconsoleStream.addConsoleListener(new ConsoleListener()\r\n\t\t{\r\n\t\t\tpublic void onPrintln(final Object o)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tif (o instanceof String)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsoleField.append((String)o);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tpublic void onPrint(Object o)\r\n\t\t\t{\r\n\t\t\t\tif (o instanceof String)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsoleField.append((String)o);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t    ControlListener shellListener = new ControlListener()\r\n\t\t{\r\n\t\t\tpublic void controlMoved(ControlEvent e)\r\n\t\t\t{\r\n\t\t\t\tsetConfigDataValue(""window.x"", window.getLocation().x + """");\r\n\t\t\t\tsetConfigDataValue(""window.y"", window.getLocation().y + """");\r\n\t\t\t}\r\n\r\n\t\t\t// TODO clean this crap up.\r\n\t\t\tpublic void controlResized(ControlEvent e)\r\n\t\t\t{\r\n\t\t\t\tupdateLayout();\r\n\t\t\t\t\r\n\t\t\t\tif (!window.isMaximized() && !window.isFullscreen())\r\n\t\t\t\t{\r\n\t\t\t\t\tsetConfigDataValue(""window.width"", window.getWidth() + """");\r\n\t\t\t\t\tsetConfigDataValue(""window.height"", window.getHeight() + """");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tsetConfigDataValue(""window.maximized"", window.isMaximized() + """");\r\n\t\t\t\t\r\n\t\t\t\tsetConfigDataValue(""window.fullscreen"", window.isFullscreen() + """");\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\twindow.addControlListener(shellListener);\r\n\t\t\r\n\t\tshellListener.controlResized(null);\r\n\t\t\r\n\t\twindow.addPaintListener(new PaintListener()\r\n\t\t{\r\n\t\t\tpublic void paintControl(PaintEvent e)\r\n\t\t\t{\r\n\t\t\t\te.gc.drawString(codeField.getSelection().x + """", 0, 50);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""last.tabs""))\r\n\t\t{\r\n\t\t\tString lastTabs[] = CONFIG_DATA.get(""last.tabs"").split("";"");\r\n\t\t\t\r\n\t\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < lastTabs.length; i++)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\topenFile(lastTabs[i], false, i == lastTabs.length - 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\tbuilder.append(lastTabs[i] + ';');\r\n\t\t\t\t}\r\n\t\t\t\tcatch (IOException e)\r\n\t\t\t\t{\r\n\t\t\t\t\t// If file wasnt found.. or something else.\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsetConfigDataValue(""last.tabs"", builder.toString());\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Updates the components locations in the frame.\r\n\t */\r\n\tprivate void updateLayout()\r\n\t{\r\n\t\tcontentPanel.setSize(window.getClientArea().width, window.getClientArea().height);\r\n\t\t\r\n\t\tint width     = (int)(contentPanel.getSize().x / 100f * 80);\r\n\t\tint conHeight = (int)(contentPanel.getSize().y / 100f * 20);\r\n\t\t\r\n\t\tmenubar.setSize(contentPanel.getSize().x, menubar.getHeight());\r\n\t\tmenubar.setLocation(0, titleBarHeight);\r\n\t\t\r\n\t\tcodeField.setSize(width, contentPanel.getSize().y - conHeight - toolbar.getHeight() - fileTabs.getY());\r\n\t\tcodeField.setLocation(contentPanel.getSize().x - codeField.getWidth(), fileTabs.getHeight() + fileTabs.getY());\r\n\t\t\r\n\t\ttoolbar.setSize(toolbar.getWidth(), 25);\r\n\t\ttoolbar.setLocation(codeField.getX(), menubar.getY() + menubar.getHeight());\r\n\t\t\r\n\t\tboolean cTabs = programs.size() > 0;\r\n\t\tint cOffset   = cTabs ? consoleTabs.getHeight() : 0;\r\n\t\t\r\n\t\tconsoleField.setSize(width, conHeight - 5 - cOffset);\r\n\t\tconsoleField.setLocation(codeField.getBounds().x, codeField.getHeight() + codeField.getBounds().y + 5 + cOffset);\r\n\t\tSystem.out.println(""!"" + consoleField.getLocation().y);\r\n\t\t\r\n//\t\ttabs.setWidth(codeField.getWidth() + 2);\r\n\t\tfileTabs.setLocation(codeField.getX(), toolbar.getY() + toolbar.getHeight() + 2);\r\n\t\tconsoleTabs.setLocation(consoleField.getLocation().x, consoleField.getLocation().y - cOffset);\r\n\t\tSystem.out.println(consoleTabs.getY());\r\n\t\t\r\n\t\ttreeMenu.setLocation(treeMenu.getLocation().x, codeField.getY());\r\n\t\ttreeMenu.setSize(contentPanel.getSize().x - codeField.getWidth() - 5, consoleField.getLocation().y + consoleField.getHeight() - codeField.getY());\r\n\t\t\r\n\t\ttreeMenuSizer.setSize(5, treeMenu.getHeight());\r\n\t\ttreeMenuSizer.setLocation(treeMenu.getLocation().x + treeMenu.getWidth(), treeMenu.getLocation().y);\r\n\r\n\t\tcodeFieldSizer.setSize(codeField.getWidth(), 5);\r\n\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight());\r\n\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t}\r\n\t\r\n\t/**\r\n\t * The start method that is used to start up the whole ArrowIDE\r\n\t * program. Creates the window and puts the stuff in it.\r\n\t */\r\n\tpublic static void start()\r\n\t{\r\n//\t\tsplash = new Shell(display, SWT.ON_TOP);\r\n//\t\tsplash.setSize(largeIcon.getBounds().width, largeIcon.getBounds().height);\r\n//\t\tsplash.setLocation(screenBounds.width / 2 - splash.getSize().x / 2, screenBounds.height / 2 - splash.getSize().y / 2);\r\n//\t\t\r\n//\t\tLabel splashImage = new Label(splash, SWT.NONE);\r\n//\t\tsplashImage.setSize(splash.getSize());\r\n//\t\tsplashImage.setImage(largeIcon);\r\n\t\t\r\n//\t\tsplash = new SplashScreen(""res/images/iconlarge.png"", 3000);\r\n\t\t\r\n//\t\tsplash.open(3000);\r\n\t\t\r\n\t\tuntitledNumber = 0;\r\n\t\t\r\n\t\tArrowIDE ide = null;\r\n\r\n\t\tconfigLocation       = new File(""arrow.config"").getAbsolutePath().replace('\\\\', '/');\r\n\t\t\r\n\t\tcreateConfigData();\r\n\t\t\r\n\t\tif (workspaceCreated())\r\n\t\t{\r\n\t\t\tide = openIDE();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tchooseWorkspace();\r\n\t\t\t\r\n\t\t\tide = openIDE();\r\n\t\t}\r\n\t\t\r\n//\t\tSystem.out.println(OS.SendMessage(shell.handle, OS.EM_SETSEL, 5, 9));//new TCHAR(0, ""2dasdf"", true)));\r\n\t\t\r\n\t\twindow.setFocus();\r\n\t\twindow.forceActive();\r\n\t\twindow.forceFocus();\r\n\t\twindow.setActive();\r\n\t\t\r\n\t\twhile (!window.isDisposed())\r\n\t\t{\r\n\t\t\tif (!DISPLAY.readAndDispatch())\r\n\t\t\t{\r\n\t\t\t\tide.update();\r\n//\t\t\t\tsplash.update();\r\n\t\t\t\t\r\n\t\t\t\tDISPLAY.sleep();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (!restarting)\r\n\t\t{\r\n\t\t\texit(window);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create a new ArrowIDE and then open it.\r\n\t * \r\n\t * @return The created ArrowIDE object.\r\n\t */\r\n\tpublic static ArrowIDE openIDE()\r\n\t{\r\n\t\tString location = CONFIG_DATA.get(""workspace.location.relative"");\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tlocation = FileUtils.getAbsolutePath(location);\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t\texit(window);\r\n\t\t}\r\n\t\t\r\n\t\tCONFIG_DATA.put(""workspace.location"", location);\r\n\t\t\r\n\t\tArrowIDE ide = new ArrowIDE(DISPLAY);\r\n\t\t\r\n\t\twindow.open();\r\n\t\t\r\n\t\tImage largeIcon = null;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tlargeIcon = new Image(DISPLAY, new FileInputStream(""res/images/iconlarge.png""));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\t\twindow.setIcon(largeIcon);\r\n\t\t\r\n\t\tide.refreshFileViewer(true);\r\n\t\t\r\n\t\treturn ide;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Restarts the program to a fresh state.\r\n\t */\r\n\tpublic static void restart()\r\n\t{\r\n\t\trestarting = true;\r\n\t\t\r\n\t\twindow.dispose();\r\n\t\t\r\n\t\tstart();\r\n\t\t\r\n\t\trestarting = false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * The method that is called right before the exiting of the program.\r\n\t * \r\n\t * @param shell The window to close (The main window).\r\n\t */\r\n\tpublic static void exit(Window shell)\r\n\t{\r\n\t\texiting = true;\r\n\t\t\r\n\t\tif (shell != null)\r\n\t\t{\r\n\t\t\tshell.dispose();\r\n\t\t}\r\n\t\t\r\n\t\tif (fileViewerThreads != null)\r\n\t\t{\r\n\t\t\tfor (int i = fileViewerThreads.size() - 1; i >= 0; i--)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tfileViewerThreads.get(i).join();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (InterruptedException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tDisplay.getDefault().close();\r\n\t\t\r\n\t\tSystem.exit(0);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method used to choose the Workspace location. Sets the value of\r\n\t * the absolute location in the workspace.location key for the {@link #CONFIG_DATA}.\r\n\t */\r\n\tpublic static void chooseWorkspace()\r\n\t{\r\n\t\tDialogFilter filter = new DialogFilter()\r\n\t\t{\r\n\t\t\tpublic String filter(String text)\r\n\t\t\t{\r\n\t\t\t\tFile f = new File(text);\r\n\t\t\t\t\r\n\t\t\t\tif (!f.exists())\r\n\t\t\t\t{\r\n\t\t\t\t\treturn ""The directory must exist."";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tFileBrowseDialog chooseWorkspace = new FileBrowseDialog(""Choose your project workspace folder:"", ""Workspace:"", FileBrowseDialog.DIRECTORY);\r\n\t\tchooseWorkspace.addDialogFilter(filter);\r\n\t\t\r\n\t\tString location = chooseWorkspace.open();\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\texit(window);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""workspace.location.relative"", location);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tsetConfigDataValue(""workspace.location"", FileUtils.getAbsolutePath(location));\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns whether a workspace has been located or created.\r\n\t * \r\n\t * @return Whether the workspace has been located or created.\r\n\t */\r\n\tpublic static boolean workspaceCreated()\r\n\t{\r\n\t\tFile workspaceDirectory = null;\r\n\t\t\r\n\t\tif (!CONFIG_DATA.containsKey(""workspace.location""))\r\n\t\t{\r\n\t\t\tchooseWorkspace();\r\n\t\t}\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tsetConfigDataValue(""workspace.location"", FileUtils.getAbsolutePath(CONFIG_DATA.get(""workspace.location.relative"")));\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tworkspaceDirectory = new File(CONFIG_DATA.get(""workspace.location""));\r\n\t\t\r\n\t\treturn workspaceDirectory.exists();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that appends the given String to the value of the key given.\r\n\t * \r\n\t * @param key\tThe key to append to.\r\n\t * @param value\tThe value to append.\r\n\t */\r\n\tpublic static synchronized void appendConfigDataValue(String key, String value)\r\n\t{\r\n\t\tString prev = """";\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(key))\r\n\t\t{\r\n\t\t\tprev = CONFIG_DATA.get(key);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(key, prev + value);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set a CONFIG_DATA value in the HashMap and the arrow.config file.\r\n\t * If the key is not already in the file, it will add it to the end.\r\n\t * \r\n\t * @param key The key of the property to set.\r\n\t * @param value The value of the property to set.\r\n\t */\r\n\tpublic static synchronized void setConfigDataValue(String key, String value)\r\n\t{\r\n\t\tboolean added = false;\r\n\t\t\r\n\t\tCONFIG_DATA.put(key, value);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tPrintWriter p = new PrintWriter(new FileWriter(configLocation));\r\n\t\t\t\r\n\t\t\tString keys[] = CONFIG_DATA.keySet().toArray(new String[0]);\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < CONFIG_DATA.size(); i ++)\r\n\t\t\t{\r\n\t\t\t\tString lineKey   = null;\r\n\t\t\t\tString lineValue = null;\r\n\t\t\t\t\r\n\t\t\t\tlineKey          = keys[i];\r\n\t\t\t\t\r\n\t\t\t\tif (lineKey.equals(key))\r\n\t\t\t\t{\r\n\t\t\t\t\tlineValue = CONFIG_DATA.get(lineKey);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tlineValue = CONFIG_DATA.get(lineKey);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tp.print(lineKey + ""="" + lineValue + (i == CONFIG_DATA.size() - 1 ? """" : ""\\r\\n""));\r\n\t\t\t}\r\n\t\t\r\n\t\t\tp.close();\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates and initializes the CONFIG_DATA. Puts all of the correct\r\n\t * values into the HashMap.\r\n\t */\r\n\tprivate static void createConfigData()\r\n\t{\r\n\t\tFile file = new File(configLocation);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tConfigReader.read(configLocation, CONFIG_DATA);\r\n\t\t\t\r\n\t\t\tif (!CONFIG_DATA.containsKey(""workspace.location""))\r\n\t\t\t{\r\n\t\t\t\tPrintWriter writer;\r\n\t\t\t\twriter = new PrintWriter(new FileWriter(configLocation));\r\n\t\t\t\t\r\n\t\t\t\twriter.print(""workspace.location="");\r\n\t\t\t\t\r\n\t\t\t\twriter.close();\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that checks to see if the given location is a valid\r\n\t * project. If it is, then load all of the classpath and\r\n\t * project properties into the {@link #PROJECT_PROPERTIES} and\r\n\t * the classpaths into the {@link #PROJECT_CLASSPATHS}.\r\n\t * \r\n\t * @param location The location of the root folder of the project\r\n\t * \t\tto check.\r\n\t */\r\n\tpublic static void checkProject(String location)\r\n\t{\r\n\t\tlocation = FileUtils.removeEndingSlashes(location);\r\n\t\t\r\n\t\tString propsLocation = location + ""/.properties"";\r\n\t\tString cpLocation = location + ""/.classpath"";\r\n\t\t\r\n\t\tFile props = new File(propsLocation);\r\n\t\tFile cp = new File(cpLocation);\r\n\t\t\r\n\t\tif (props.isFile())\r\n\t\t{\r\n\t\t\tif (!PROJECT_PROPERTIES.containsKey(propsLocation))\r\n\t\t\t{\r\n\t\t\t\tHashMap<String, XMLItem[]> map = Reader.read(propsLocation);\r\n\t\t\t\t\r\n\t\t\t\tPROJECT_PROPERTIES.put(propsLocation, map);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (cp.isFile())\r\n\t\t{\r\n\t\t\tif (!PROJECT_CLASSPATHS.containsKey(cpLocation))\r\n\t\t\t{\r\n\t\t\t\tHashMap<String, XMLItem[]> map = Reader.read(cpLocation);\r\n\t\t\t\t\r\n\t\t\t\tPROJECT_CLASSPATHS.put(cpLocation, map);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a Dialog to ask for the project name. Next it creates a\r\n\t * directory/folder for the project and refreshes the file viewer.\r\n\t */\r\n\tpublic void newProject()\r\n\t{\r\n\t\tnewProjectDialog = new FileInputDialog(""Enter the name of your project:"", ""Project name:"", """", true, CONFIG_DATA.get(""workspace.location""), false);\r\n\t\t\r\n\t\tString location  = newProjectDialog.open();\r\n\t\t\r\n\t\tif (location != null)\r\n\t\t{\r\n\t\t\tFile f = new File(location);\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/bin"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/res"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/src"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tf = new File(location + ""/.classpath"");\r\n\t\t\t\tf.createNewFile();\r\n\t\t\t\r\n\t\t\t\tf = new File(location + ""/.properties"");\r\n\t\t\t\tf.createNewFile();\r\n\t\t\t}\r\n\t\t\tcatch (IOException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\r\n\t\t\taddToFileViewer(location);\r\n\t\t\taddToFileViewer(location + ""/bin"");\r\n\t\t\taddToFileViewer(location + ""/res"");\r\n\t\t\taddToFileViewer(location + ""/src"");\r\n\t\t\taddToFileViewer(location + ""/.classpath"");\r\n\t\t\taddToFileViewer(location + ""/.properties"");\r\n\t\t\trefreshFileViewer(location, false);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates new file and saves the old one. Switches to the new file\r\n\t * for editing automatically.\r\n\t */\r\n\tpublic void newFile()\r\n\t{\r\n\t\tcodeField.setText("""");\r\n\t\tcodeField.setLanguage(0);\r\n\t\t\r\n\t\tString location = ""Untitled"" + untitledNumber++;\r\n\t\t\r\n\t\tfileLocation = location;\r\n\t\t\r\n\t\taddTab(location, location);\r\n\t\t\r\n\t\tsetFileSaved(location, false);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new FileDialog at the absolute path of the workspace\r\n\t * location.\r\n\t * \r\n\t * @return The created, unopened FileDialog at the workspace path\r\n\t * \t\tused for opening files.\r\n\t */\r\n\tpublic FileDialog openFileBrowseDialog()\r\n\t{\r\n\t\tString location = null;\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""dialog.location""))\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""dialog.location"");\r\n\t\t\t\r\n\t\t\tif (!new File(location).exists())\r\n\t\t\t{\r\n\t\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t}\r\n\t\t\r\n\t\treturn openFileBrowseDialog(location);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiates a new FileDialog set for all types of files to be\r\n\t * set at the specified location.\r\n\t * \r\n\t * @param relativeLocation The location for the FileDialog to start.\r\n\t * @return The created, unopened FileDialog used for opening files.\r\n\t */\r\n\tpublic FileDialog openFileBrowseDialog(String location)\r\n\t{\r\n\t\tFileDialog dialog = new FileDialog(window.getShell(), SWT.OPEN | SWT.MULTI);\r\n\t\tdialog.setFilterNames(new String[] { ""All Files (*)"" });\r\n\t\tdialog.setFilterExtensions(new String[] { ""*"" });\r\n\t\tdialog.setFilterPath(location);\r\n\t\t\r\n\t\treturn dialog;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Open a file located at the specified location.\r\n\t * \r\n\t * @param location The location of the file to open.\r\n\t */\r\n\tpublic void openFile(String location) throws FileNotFoundException\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\topenFile(location, true, true);\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\tif (e instanceof FileNotFoundException)\r\n\t\t\t{\r\n\t\t\t\tthrow (FileNotFoundException)e;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that opens a file at the specified location and also\r\n\t * takes the option whether or not to cache the save the fileLocation\r\n\t * in the {@link #CONFIG_DATA} for reuse when the IDE is restarted.\r\n\t * \r\n\t * @param\tlocation The location of the file to open.\r\n\t * @param\tcache Whether or not to save the file for use after restart.\r\n\t * @param \tsetLanguage Whether or not to set the language of the codeField.\r\n\t * @throws\tFileNotFoundException Thrown if the file can not be found.\r\n\t * @throws\tIOException Thrown if there was trouble reading or writing.\r\n\t */\r\n\tpublic void openFile(String location, boolean cache, boolean setLanguage) throws FileNotFoundException, IOException\r\n\t{\r\n\t\tlocation = location.replace('\\\\', '/');\r\n\t\t\r\n\t\tboolean alreadyOpen = fileCache.containsKey(location);\r\n\t\t\r\n\t\tif (oldTabId != 0)\r\n\t\t{\r\n\t\t\ttabTopPixels.put(oldTabId, codeField.getTopPixel());\r\n\t\t\ttabSelection.put(oldTabId, codeField.getSelection());\r\n\t\t}\r\n\t\t\r\n\t\tif (alreadyOpen)\r\n\t\t{\r\n\t\t\tcodeField.setText(fileCache.get(location), true, true);\r\n\t\t\t\r\n\t\t\tcodeField.setLanguage(Language.getLanguage(location));\r\n\t\t\t\r\n\t\t\tcodeField.redraw();\r\n\t\t\t\r\n\t\t\tint tabId = tabFileIds.get(location);\r\n\t\t\t\r\n\t\t\tString oldLocation = fileLocation;\r\n\t\t\t\r\n\t\t\tfileLocation = location;\r\n\t\t\t\r\n\t\t\tfileTabs.setSelection(tabId);\r\n\t\t\t\r\n\t\t\tif (!location.equals(oldLocation))\r\n\t\t\t{\r\n\t\t\t\toldTabId = tabId;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tFile file = new File(location);\r\n\t\t\t\r\n\t\t\tif (file.isDirectory())\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tBufferedReader reader = new BufferedReader(new FileReader(file));\r\n\t\t\t\r\n\t\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\t\r\n\t\t\tString line = """";\r\n\t\t\t\r\n\t\t\twhile ((line = reader.readLine()) != null)\r\n\t\t\t{\r\n\t\t\t\tbuilder.append(line + ""\\r\\n"");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treader.close();\r\n\t\t\t\r\n\t\t\tif (builder.length() > 0)\r\n\t\t\t{\r\n\t\t\t\tbuilder.deleteCharAt(builder.length() - 1);\r\n\t\t\t\tbuilder.deleteCharAt(builder.length() - 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString fileContents = builder.toString();\r\n\t\t\t\r\n\t\t\tfileCache.put(location, fileContents);\r\n\t\t\tfileCacheSaved.put(location, true);\r\n\t\t\t\r\n\t\t\tcodeField.setText(fileContents, true);\r\n\t\t\t\r\n\t\t\tcodeField.redraw();\r\n\t\t\t\r\n\t\t\tif (!location.equals(fileLocation))\r\n\t\t\t{\r\n\t\t\t\taddTab(location, cache);\r\n\t\t\t\t\r\n\t\t\t\tif (fileLocation != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tint tabId = tabFileIds.get(location);\r\n\t\t\t\t\t\r\n\t\t\t\t\toldTabId = tabId;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileLocation = location;\r\n\t\t}\r\n\t\t\r\n\t\tif (setLanguage)\r\n\t\t{\r\n\t\t\tcodeField.setLanguage(Language.getLanguage(location));\r\n\t\t}\r\n\t\t\r\n\t\tcodeField.setFocus();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Opens a FileDialog to search for a file to open, then opens\r\n\t * the result.\r\n\t */\r\n\tpublic void openFile() throws FileNotFoundException\r\n\t{\r\n\t\tFileDialog dialog = openFileBrowseDialog();\r\n\t\t\r\n\t\tString location   = dialog.open();\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tlocation           = location.replace('\\\\', '/');\r\n\t\t\r\n\t\tString parent      = FileUtils.getParentFolder(location) + ""/"";\r\n\t\t\r\n\t\tString fileNames[] = dialog.getFileNames();\r\n\t\t\r\n\t\tfor (int i = 0; i < fileNames.length; i ++)\r\n\t\t{\r\n\t\t\topenFile(parent + fileNames[i]);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""dialog.location"", parent);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new FileDialog at the absolute path of the workspace\r\n\t * location.\r\n\t * \r\n\t * @return The created, unopened FileDialog at the workspace path\r\n\t * \t\tused for saving.\r\n\t */\r\n\tpublic FileDialog openSaveDialog()\r\n\t{\r\n\t\tString location = null;\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""dialog.location""))\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""dialog.location"");\r\n\t\t\t\r\n\t\t\tif (!new File(location).exists())\r\n\t\t\t{\r\n\t\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t}\r\n\t\t\r\n\t\treturn openSaveDialog(location);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiates a new FileDialog set for all types of files to be\r\n\t * set at the specified location.\r\n\t * \r\n\t * @param relativeLocation The location for the FileDialog to start.\r\n\t * @return The created, unopened FileDialog used for saving.\r\n\t */\r\n\tpublic FileDialog openSaveDialog(String location)\r\n\t{\r\n\t\tFileDialog dialog = new FileDialog(window.getShell(), SWT.SAVE);\r\n\t\tdialog.setFilterNames(new String[] { ""All Files (*)"" });\r\n\t\tdialog.setFilterExtensions(new String[] { ""*"" });\r\n\t\tdialog.setFilterPath(location);\r\n\t\t\r\n\t\treturn dialog;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Saves a file located at the specified location.\r\n\t * \r\n\t * @param location The location of the file to open.\r\n\t */\r\n\tpublic void saveFile(String location)\r\n\t{\r\n\t\tif (fileLocation == null && location == null)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\topenFile();\r\n\t\t\t}\r\n\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (location != null)\r\n\t\t{\r\n\t\t\tlocation = location.replace('\\\\', '/');\r\n\t\t}\r\n\t\t\r\n\t\tif (location == null || location.startsWith(""Untitled""))\r\n\t\t{\r\n\t\t\tboolean hasTab = tabFileIds.containsKey(location);\r\n\t\t\tint     tabId  = 0;\r\n\t\t\t\r\n\t\t\tif (hasTab)\r\n\t\t\t{\r\n\t\t\t\ttabId = tabFileIds.get(location);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString oldLoc = location;\r\n\t\t\t\r\n\t\t\tFileDialog dialog = openSaveDialog();\r\n\t\t\tlocation = dialog.open();\r\n\t\t\t\r\n\t\t\tif (location != null)\r\n\t\t\t{\r\n\t\t\t\tlocation = location.replace('\\\\', '/');\r\n\t\t\t\t\r\n\t\t\t\tif (hasTab)\r\n\t\t\t\t{\r\n\t\t\t\t\tString fileName = FileUtils.getFileName(location);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttabFileIds.remove(oldLoc);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfileTabs.setTabText(tabId, fileName);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttabFileIds.put(location, tabId);\r\n\t\t\t\t\ttabFileLocations.put(tabId, location);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (fileLocation == null)\r\n\t\t{\r\n\t\t\tfileLocation = """";\r\n\t\t}\r\n\t\t\r\n\t\tboolean saved\t\t= false;\r\n\t\t\r\n\t\tboolean currentFile = location.equals(fileLocation);\r\n\t\r\n\t\tif (fileCacheSaved.containsKey(fileLocation))\r\n\t\t{\r\n\t\t\tsaved = fileCacheSaved.get(fileLocation);\r\n\t\t}\r\n\t\t\r\n\t\tFileUtils.writeFile(location, codeField.getWritableText());\r\n\t\t\r\n\t\tfileLocation\t  = location;\r\n\t\t\r\n\t\tcodeField.setLanguage(Language.getLanguage(fileLocation));\r\n\t\t\r\n\t\tboolean highlight = codeField.getLanguage() == 0;\r\n\t\t//TODO: did if rog et something?\r\n//\t\tSystem.out.println(""done"");\r\n\t\tif (highlight)\r\n\t\t{\r\n\t\t\tcodeField.highlightSyntax();\r\n\t\t}\r\n//\t\tSystem.out.println(""done2"");\r\n\t\t\r\n\t\tif (currentFile)\r\n\t\t{\r\n\t\t\tsetFileSaved(location, true);\r\n\t\t}\r\n\t\t\r\n\t\tboolean isInViewer = treeItemLocations.containsKey(fileLocation);\r\n\t\t\r\n\t\tif (isInViewer)\r\n\t\t{\r\n\t\t\taddToFileViewer(location);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that adds the file at the specified location to file viewer.\r\n\t * Faster than refreshing the whole doggone file viewer.\r\n\t * \r\n\t * @param location The location of the file to add.\r\n\t */\r\n\tpublic void addToFileViewer(String location)\r\n\t{\r\n\t\tif (treeItemLocations.containsValue(location))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tFile file     = new File(location);\r\n\r\n\t\tboolean isDirectory = file.isDirectory();\r\n\t\t\r\n\t\tString name   = FileUtils.getFileName(location);\r\n\t\t\r\n\t\tImage img     = isDirectory ? folderImage : getFileImage(location);\r\n\t\t\r\n\t\tString parentLocation = FileUtils.getParentFolder(location);\r\n\t\t\r\n\t\tint parentId = 0;\r\n\t\t\r\n\t\tif (parentLocation.equals(CONFIG_DATA.get(""workspace.location"")))\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tparentId = treeItemIds.get(parentLocation);\r\n\t\t}\r\n\t\t\r\n\t\tint id        = treeMenu.addItem(parentId, name, img);\r\n\t\t\r\n\t\tif (fileCacheSaved.containsKey(location))\r\n\t\t{\r\n\t\t\tfileCacheSaved.put(location, true);\r\n\t\t}\r\n\r\n\t\ttreeItemLocations.put(id, location);\r\n\t\ttreeItemIds.put(location, id);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to remove the file at the specified location from the file\r\n\t * viewer. Faster than refreshing the whole doggone file viewer.\r\n\t * \r\n\t * @param location The location of the file to remove.\r\n\t */\r\n\tpublic void removeFromFileViewer(String location)\r\n\t{\r\n\t\tint id = treeItemIds.get(location);\r\n\t\t\r\n\t\ttreeItemDirectories.remove(id);\r\n\t\ttreeItemIds.remove(location);\r\n\t\ttreeItemLocations.remove(id);\r\n\t\t\r\n\t\tif (treeMenu.containsItem(id))\r\n\t\t{\r\n\t\t\ttreeMenu.removeItem(id);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Refresh the file viewer to all of the updated file names.\r\n\t * If a file has been added, add it to the\r\n\t * {@link #treeMenu file viewer}.\r\n\t * \r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(boolean ignoreRemove)\r\n\t{\r\n\t\trefreshFileViewer(CONFIG_DATA.get(""workspace.location""), 0, ignoreRemove);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to refresh the files within the directory of the specified\r\n\t * location.\r\n\t * \r\n\t * @param location The location of the root directory to refresh.\r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(String location, boolean ignoreRemove)\r\n\t{\r\n\t\tint parentId = treeItemIds.get(location);\r\n\t\t\r\n\t\trefreshFileViewer(location, parentId, ignoreRemove);\r\n\t}\r\n\r\n\t/**\r\n\t * Method to refresh the files within the directory of the specified\r\n\t * location.\r\n\t * \r\n\t * @param location The location of the root directory to refresh.\r\n\t * @param parentId The id of the TreeMenu item to refresh.\r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(final String location, final int parentId, final boolean ignoreRemove)\r\n\t{\r\n\t\tThread refreshThread = new Thread()\r\n\t\t{\r\n\t\t\tpublic void run()\r\n\t\t\t{\r\n\t\t\t\tFile parent  = new File(location);\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tfindSubFiles(parent, parentId, true);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (IOException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\texit(window);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tString locations[] = treeItemLocations.values().toArray(new String[0]);\r\n\t\t\t\t\r\n\t\t\t\tif (!ignoreRemove)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (int i = 0; i < locations.length; i ++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile file = new File(locations[i]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (!file.exists())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfinal int id = treeItemIds.get(locations[i]);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\ttreeItemIds.remove(locations[i]);\r\n\t\t\t\t\t\t\ttreeItemLocations.remove(id);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (treeMenu.containsItem(id))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ttreeMenu.removeItem(id);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ttreeMenu.alphabetize();\r\n\t\t\t\t\r\n\t\t\t\tfileViewerThreads.remove(this);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tfileViewerThreads.add(refreshThread);\r\n\t\t\r\n\t\trefreshThread.start();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Finds the sub-files of a directory and if they have not been\r\n\t * added, add them to the TreeMenu.\r\n\t * \r\n\t * @param file The directory to search sub-files for.\r\n\t * @param parent The id of the directory TreeMenu item.\r\n\t * @throws IOException \r\n\t */\r\n\tprivate void findSubFiles(File file, final int parent, boolean ignoreRemove) throws IOException\r\n\t{\r\n\t\tif (exiting)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tFile subFiles[] = file.listFiles();\r\n\t\t\r\n\t\tif (subFiles != null)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < subFiles.length; i ++)\r\n\t\t\t{\r\n\t\t\t\tboolean isDirectory = subFiles[i].isDirectory();\r\n\t\t\t\t\r\n\t\t\t\tfinal String orig          = subFiles[i].getCanonicalPath().replace('\\\\', '/');\r\n\t\t\t\tfinal String name          = FileUtils.getFileName(orig);\r\n\t\t\t\t\r\n\t\t\t\tif (name.charAt(0) == '.')\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n//\t\t\t\tString location      = orig;//orig.toLowerCase();\r\n\t\t\t\t\r\n\t\t\t\tint id               = 0;\r\n\t\t\t\t\r\n\t\t\t\tfinal Image img            = isDirectory ? folderImage : getFileImage(orig);\r\n\t\t\t\t\r\n\t\t\t\tboolean alreadyAdded = treeItemIds.containsKey(orig);\r\n\t\t\t\t\r\n\t\t\t\tif (!ignoreRemove)\r\n\t\t\t\t{\r\n\t\t\t\t\talreadyAdded = true;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (treeItemLocations.containsValue(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurId = treeItemIds.get(orig);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tid = curId;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (isDirectory)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfindSubFiles(subFiles[i], id, ignoreRemove);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Set text correctly of renamed files.\r\n\t\t\t\t\telse if (treeItemLocations.containsValue(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid = treeItemIds.get(orig);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttreeMenu.setTreeItemText(id, name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\talreadyAdded = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (!alreadyAdded)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (exiting)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurId = treeMenu.addItem(parent, name, img);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tid = curId;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (isDirectory)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfindSubFiles(subFiles[i], id, ignoreRemove);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttreeItemDirectories.put(id, orig);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (fileCacheSaved.containsKey(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfileCacheSaved.put(orig, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\ttreeItemLocations.put(id, orig);\r\n\t\t\t\t\ttreeItemIds.put(orig, id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that occurs whenever the content\r\n\t * of a TextField is changed. In this case it tells you that\r\n\t * the current file has been changed and needs to be saved.\r\n\t */\r\n\tpublic void contentChanged(ContentEvent event)\r\n\t{\r\n\t\tObject source = event.getSource();\r\n\t\t\r\n\t\tif (source == codeField)\r\n\t\t{\r\n\t\t\tif (fileLocation != null)\r\n\t\t\t{\r\n\t\t\t\tsetFileSaved(fileLocation, false);\r\n\t\t\t\t\r\n\t\t\t\tfinal String code = codeField.getText();\r\n\t\t\t\t\r\n\t\t\t\tnew Thread()\r\n\t\t\t\t{\r\n\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcodeField.clearErrors();\r\n\t\t\t\t\t\tfinal String outputLocation = FileUtils.getParentFolder(fileLocation) + ""/"";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\ttry\r\n//\t\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\t\tconsoleField.setText("""");\r\n//\t\t\t\t\t\t\t\t\t\r\n//\t\t\t\t\t\t\t\t\tLanguage.compile(fileLocation, codeField.getRawText(), outputLocation, consoleStream);\r\n//\t\t\t\t\t\t\t\t}\r\n//\t\t\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n//\t\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n//\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tLanguage.compile(fileLocation, code, outputLocation, null);\r\n\t\t\t\t\t}\r\n\t\t\t\t}.start();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Return the Image associated with the type of file given through\r\n\t * the location parameter.\r\n\t * \r\n\t * @param location The location of the file.\r\n\t * @return The Image associated with the file.\r\n\t */\r\n\tprivate Image getFileImage(String location)\r\n\t{\r\n\t\tImage img = null;\r\n\t\t\r\n\t\tint fileType = FileUtils.getFileType(location);\r\n\t\t\r\n\t\tif (fileType == FileUtils.JAVA)\r\n\t\t{\r\n\t\t\timg = javaFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.CLASS)\r\n\t\t{\r\n\t\t\timg = classFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.GLSL)\r\n\t\t{\r\n\t\t\timg = glslFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.TXT)\r\n\t\t{\r\n\t\t\timg = txtFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.RTF)\r\n\t\t{\r\n\t\t\timg = rtfFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.EXE)\r\n\t\t{\r\n\t\t\timg = exeFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.ASSEMBLY)\r\n\t\t{\r\n\t\t\timg = asmFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.CPP)\r\n\t\t{\r\n\t\t\timg = cppFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.H)\r\n\t\t{\r\n\t\t\timg = hFileImage;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\timg = fileImage;\r\n\t\t}\r\n\t\t\r\n\t\treturn img;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks whether the text returned from the codeField is null, or\r\n\t * if it is an empty String.\r\n\t * \r\n\t * @return Whether the codeField is empty.\r\n\t */\r\n\tpublic boolean isCodeFieldEmpty()\r\n\t{\r\n\t\tString text = codeField.getText();\r\n\t\t\r\n\t\treturn text == null || text.equals("""");\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set the tab and TreeMenu item associated with the file\r\n\t * location to start with a '*' depending if the file is\r\n\t * saved or not.\r\n\t * \r\n\t * @param location The location of the file to set as saved or not.\r\n\t * @param saved Whether the file is saved or not.\r\n\t */\r\n\tpublic void setFileSaved(String location, boolean saved)\r\n\t{\r\n\t\tString locKey\t= location;\r\n\t\t\r\n\t\tString text\t\t= null;\r\n\t\t\r\n\t\tint id\t\t\t= 0;\r\n\t\t\r\n\t\tif (saved)\r\n\t\t{\r\n\t\t\tif (treeItemIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tid = treeItemIds.get(locKey);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (tabFileIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tint tabId\t= tabFileIds.get(locKey);\r\n\t\t\t\t\r\n\t\t\t\ttext\t\t= fileTabs.getTabText(tabId);\r\n\t\t\t}\r\n\t\t\telse if (treeItemLocations.containsValue(locKey))\r\n\t\t\t{\r\n\t\t\t\ttext = treeMenu.getTreeItemText(id);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (text != null && text.startsWith(""*""))\r\n\t\t\t{\r\n\t\t\t\ttext = text.substring(1);\r\n\t\t\t\r\n\t\t\t\tif (treeItemLocations.containsValue(locKey))\r\n\t\t\t\t{\r\n\t\t\t\t\ttreeMenu.setTreeItemText(id, text);\r\n\t\t\t\t}\r\n\t\t\t\tif (tabFileIds.containsKey(locKey))\r\n\t\t\t\t{\r\n\t\t\t\t\tfileTabs.setTabText(tabFileIds.get(locKey), text);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileCacheSaved.put(locKey, true);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tint tabId = tabFileIds.get(locKey);\r\n\t\t\t\r\n\t\t\ttext = fileTabs.getTabText(tabId);\r\n\t\t\t\r\n\t\t\tif (!text.startsWith(""*""))\r\n\t\t\t{\r\n\t\t\t\ttext = ""*"" + text;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (treeItemIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tid = treeItemIds.get(locKey);\r\n\t\t\t\ttreeMenu.setTreeItemText(id, text);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileTabs.setTabText(tabId, text);\r\n\t\t\t\r\n\t\t\tfileCacheSaved.put(locKey, false);\r\n\t\t\t\r\n\t\t\tString fileContents = codeField.getText();\r\n\t\t\t\r\n\t\t\tfileCache.put(locKey, fileContents);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to remove all of the TreeMenu items and clear the\r\n\t * HashMaps.\r\n\t */\r\n\tpublic void removeAllTreeItems()\r\n\t{\r\n\t\ttreeMenu.removeAllItems();\r\n\t\t\r\n\t\ttreeItemLocations.clear();\r\n\t\ttreeItemIds.clear();\r\n\t\ttreeItemDirectories.clear();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add a tab of the file at fileLocation to the TabMenu.\r\n\t * \r\n\t * @param fileLocation The location of the file to represent.\r\n\t */\r\n\tprivate void addTab(String fileLocation)\r\n\t{\r\n\t\taddTab(fileLocation, true);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to add a tab at the specified location.\r\n\t * \r\n\t * @param fileLocation The location of the file that was opened.\r\n\t * @param cache Whether or not to save the tab for later use after\r\n\t * \t\trestart.\r\n\t */\r\n\tprivate void addTab(String fileLocation, boolean cache)\r\n\t{\r\n\t\tString fileName = FileUtils.getFileName(fileLocation);\r\n\t\t\r\n\t\taddTab(fileName, fileLocation, cache);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add a tab of the file with the fileName and location to the TabMenu.\r\n\t * \r\n\t * @param fileName The name of the file to represent.\r\n\t * @param location The location, including the fileName, of the file.\r\n\t */\r\n\tprivate void addTab(String fileName, String location)\r\n\t{\r\n\t\taddTab(fileName, location, true);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to add a tab at the specified location with the tab labeled\r\n\t * with the fileName param.\r\n\t * \r\n\t * @param fileName The String to label the tab with.\r\n\t * @param location The location of the file that was opened.\r\n\t * @param cache Whether or not to save the tab for later use after\r\n\t * \t\trestart.\r\n\t */\r\n\tprivate void addTab(String fileName, final String location, boolean cache)\r\n\t{\r\n\t\tint id = fileTabs.addTab(fileName);\r\n\t\t\r\n\t\tif (oldTabId == 0)\r\n\t\t{\r\n\t\t\toldTabId = id;\r\n\t\t}\r\n\t\t\r\n\t\ttabTopPixels.put(id, 0);\r\n\t\ttabSelection.put(id, new Point(0, 0));\r\n\t\t\r\n\t\ttabFileLocations.put(id, location);\r\n\t\ttabFileIds.put(location, id);\r\n\t\t\r\n\t\tif (cache)\r\n\t\t{\r\n\t\t\tnew Thread()\r\n\t\t\t{\r\n\t\t\t\tpublic void run()\r\n\t\t\t\t{\r\n\t\t\t\t\tappendConfigDataValue(""last.tabs"", location + "";"");\r\n\t\t\t\t}\r\n\t\t\t}.start();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a tab's close icon\r\n\t * is pressed. If the file in the tab is not saved, ask whether to\r\n\t * save it or not.\r\n\t * \r\n\t * @param event The TabMenuEvent sent with the tab close.\r\n\t * @return Whether to close the tab or not.\r\n\t */\r\n\tpublic boolean tabClosing(TabMenuEvent event)\r\n\t{\r\n\t\tint tabId       = event.getTabId();\r\n\t\t\r\n\t\tboolean cancel = false;\r\n\t\t\r\n\t\tif (event.getSource() == fileTabs)\r\n\t\t{\r\n\t\t\tint newId\t\t= fileTabs.getSelected();\r\n\t\t\t\r\n\t\t\tString location = tabFileLocations.get(tabId);\r\n\t\t\tString result\t= null;\r\n\t\r\n\t\t\tboolean askSave\t= false;\r\n\t\t\t\r\n\t\t\tif (fileCacheSaved.containsKey(location))\r\n\t\t\t{\r\n\t\t\t\tif (!fileCacheSaved.get(location))\r\n\t\t\t\t{\r\n\t\t\t\t\taskSave = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif (!isCodeFieldEmpty())\r\n\t\t\t\t{\r\n\t\t\t\t\taskSave = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (askSave)\r\n\t\t\t{\r\n\t\t\t\tOptionDialog saveDialog = new OptionDialog(""Save?"", ""\\"""" + FileUtils.getFileName(location) + ""\\"" has not been saved, would you like to save it?"");\r\n\t\t\t\t\r\n\t\t\t\tresult = saveDialog.open();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!askSave || (result != null && (result.equals(""yes"") || result.equals(""no""))))\r\n\t\t\t{\r\n\t\t\t\tString files = CONFIG_DATA.get(""last.tabs"").replace((tabFileLocations.get(tabId) + ';'), """");\r\n\t\t\t\tsetConfigDataValue(""last.tabs"", files);\r\n\t\t\t\t\r\n\t\t\t\ttabFileLocations.remove(tabId);\r\n\t\t\t\ttabFileIds.remove(location);\r\n\t\t\t\ttabTopPixels.remove(tabId);\r\n\t\t\t\ttabSelection.remove(tabId);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (result != null)\r\n\t\t\t{\r\n\t\t\t\tif (result.equals(""yes""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(location);\r\n\t\t\t\t}\r\n\t\t\t\telse if (result.equals(""no""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsetFileSaved(location, true);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tcancel = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcancel = askSave;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (cancel)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfileCache.remove(location);\r\n\t\t\t\tfileCacheSaved.remove(location);\r\n\t\t\t\t\r\n\t\t\t\tif (tabId == oldTabId)\r\n\t\t\t\t{\r\n\t\t\t\t\toldTabId = newId;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (tabId != newId)\r\n\t\t\t\t{\r\n\t\t\t\t\tString loc = tabFileLocations.get(newId);\r\n\t\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile(loc);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfileLocation = null;\r\n\t\t\t\t\tcodeField.setText("""");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (event.getSource() == consoleTabs)\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn !cancel;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a tab is selected\r\n\t * in a TabMenu. It then opens the file.\r\n\t * \r\n\t * @param event The TabMenuEvent sent with the tab select.\r\n\t */\r\n\tpublic void tabSelected(TabMenuEvent event)\r\n\t{\r\n\t\tint tabId = event.getTabId();\r\n\t\t\r\n\t\tif (event.getSource() == fileTabs)\r\n\t\t{\r\n\t\t\tString location = tabFileLocations.get(tabId);\r\n\t\t\t\r\n\t\t\tif (location.equals(fileLocation))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (location != null)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\topenFile(location);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tcodeField.setSelection(tabSelection.get(tabId));\r\n\t\t\t\tcodeField.setTopPixel(tabTopPixels.get(tabId));\r\n\t\t\t\tcodeField.select();\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (event.getSource() == consoleTabs)\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a key is pressed\r\n\t * in a TextField.\r\n\t * \r\n\t * @param e The CodeFieldEvent that was passed.\r\n\t */\r\n\tpublic void keyPressed(CodeFieldEvent e)\r\n\t{\r\n\t\tif (e.getSource() == codeField)\r\n\t\t{\r\n\t\t\tif (e.getStateMask() == (Integer)PROPERTIES.get(""key.control"") && e.getKeyCode() == 's')\r\n\t\t\t{\r\n\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that deletes the file at the specified location.\r\n\t * \r\n\t * @param location The location of the file to be deleted.\r\n\t * @return Whether the file was successfully deleted or not.\r\n\t */\r\n\tpublic boolean deleteFile(String location)\r\n\t{\r\n\t\tint treeId    = treeItemIds.get(location);\r\n\t\t\r\n\t\ttreeItemLocations.remove(treeId);\r\n\t\ttreeItemDirectories.remove(treeId);\r\n\t\tfileCache.remove(location);\r\n\t\tfileCacheSaved.remove(location);\r\n\t\t\r\n\t\ttreeMenu.removeItem(treeId);\r\n\t\t\r\n\t\tboolean deleted = FileUtils.delete(new File(location));\r\n\t\t\r\n\t\treturn deleted;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to synchronistically update the components of the main\r\n\t * window.\r\n\t */\r\n\tpublic void update()\r\n\t{\r\n\t\t\r\n\t}\r\n}\r\n----------------------------------- SOURCE END -------------------------------------",1364132439033
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1364132439034
error,log,,,"Error in JDT Core during reconcile",1364132439034
error,log,,,"Exception occurred during compilation unit conversion:\r\n----------------------------------- SOURCE BEGIN -------------------------------------\r\npackage net.foxycorndog.arrowide;\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.awt.TextField;\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\nimport java.io.PrintStream;\r\nimport java.net.URLDecoder;\r\n\r\nimport net.foxycorndog.arrowide.color.ColorUtils;\r\nimport net.foxycorndog.arrowide.components.CodeField;\r\nimport net.foxycorndog.arrowide.components.CodeFieldEvent;\r\nimport net.foxycorndog.arrowide.components.CodeFieldListener;\r\nimport net.foxycorndog.arrowide.components.CompositeSizer;\r\nimport net.foxycorndog.arrowide.components.ConsoleField;\r\nimport net.foxycorndog.arrowide.components.ContentEvent;\r\nimport net.foxycorndog.arrowide.components.ContentListener;\r\nimport net.foxycorndog.arrowide.components.SizerListener;\r\nimport net.foxycorndog.arrowide.components.SplashScreen;\r\nimport net.foxycorndog.arrowide.components.TitleBar;\r\nimport net.foxycorndog.arrowide.components.menubar.Menubar;\r\nimport net.foxycorndog.arrowide.components.menubar.MenubarListener;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenu;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenuEvent;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenuListener;\r\nimport net.foxycorndog.arrowide.components.toolbar.Toolbar;\r\nimport net.foxycorndog.arrowide.components.toolbar.ToolbarListener;\r\nimport net.foxycorndog.arrowide.components.treemenu.TreeMenu;\r\nimport net.foxycorndog.arrowide.components.treemenu.TreeMenuListener;\r\nimport net.foxycorndog.arrowide.components.window.Window;\r\nimport net.foxycorndog.arrowide.console.ConsoleListener;\r\nimport net.foxycorndog.arrowide.console.ConsoleStream;\r\nimport net.foxycorndog.arrowide.dialog.Dialog;\r\nimport net.foxycorndog.arrowide.dialog.DialogFilter;\r\nimport net.foxycorndog.arrowide.dialog.FileBrowseDialog;\r\nimport net.foxycorndog.arrowide.dialog.FileInputDialog;\r\nimport net.foxycorndog.arrowide.dialog.OptionDialog;\r\nimport net.foxycorndog.arrowide.dialog.PreferencesDialog;\r\nimport net.foxycorndog.arrowide.dialog.DialogPanel;\r\nimport net.foxycorndog.arrowide.dialog.PropertiesDialog;\r\nimport net.foxycorndog.arrowide.dialog.TextInputDialog;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.AssemblyPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.CppPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.GeneralPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.JavaPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.PythonPanel;\r\nimport net.foxycorndog.arrowide.file.ConfigReader;\r\nimport net.foxycorndog.arrowide.file.FileUtils;\r\nimport net.foxycorndog.arrowide.formatter.Formatter;\r\nimport net.foxycorndog.arrowide.language.CompilerListener;\r\nimport net.foxycorndog.arrowide.language.Keyword;\r\nimport net.foxycorndog.arrowide.language.Language;\r\nimport net.foxycorndog.arrowide.language.CompileOutput;\r\nimport net.foxycorndog.arrowide.language.java.JavaLanguage;\r\nimport net.foxycorndog.arrowide.printer.TextPrinter;\r\nimport net.foxycorndog.arrowide.xml.Reader;\r\nimport net.foxycorndog.arrowide.xml.XMLItem;\r\n\r\nimport org.eclipse.swt.SWT;\r\nimport org.eclipse.swt.events.ControlEvent;\r\nimport org.eclipse.swt.events.ControlListener;\r\nimport org.eclipse.swt.events.DisposeEvent;\r\nimport org.eclipse.swt.events.DisposeListener;\r\nimport org.eclipse.swt.events.KeyEvent;\r\nimport org.eclipse.swt.events.KeyListener;\r\nimport org.eclipse.swt.events.MouseEvent;\r\nimport org.eclipse.swt.events.MouseListener;\r\nimport org.eclipse.swt.events.MouseMoveListener;\r\nimport org.eclipse.swt.events.PaintEvent;\r\nimport org.eclipse.swt.events.PaintListener;\r\nimport org.eclipse.swt.events.SelectionEvent;\r\nimport org.eclipse.swt.events.SelectionListener;\r\nimport org.eclipse.swt.graphics.Color;\r\nimport org.eclipse.swt.graphics.Font;\r\nimport org.eclipse.swt.graphics.FontData;\r\nimport org.eclipse.swt.graphics.GC;\r\nimport org.eclipse.swt.graphics.Image;\r\nimport org.eclipse.swt.graphics.Point;\r\nimport org.eclipse.swt.graphics.Rectangle;\r\nimport org.eclipse.swt.layout.FillLayout;\r\nimport org.eclipse.swt.layout.GridData;\r\nimport org.eclipse.swt.layout.GridLayout;\r\nimport org.eclipse.swt.opengl.GLCanvas;\r\nimport org.eclipse.swt.opengl.GLData;\r\nimport org.eclipse.swt.printing.PrintDialog;\r\nimport org.eclipse.swt.printing.Printer;\r\nimport org.eclipse.swt.printing.PrinterData;\r\nimport org.eclipse.swt.widgets.Button;\r\nimport org.eclipse.swt.widgets.Composite;\r\nimport org.eclipse.swt.widgets.DirectoryDialog;\r\nimport org.eclipse.swt.widgets.Display;\r\nimport org.eclipse.swt.widgets.Event;\r\nimport org.eclipse.swt.widgets.FileDialog;\r\nimport org.eclipse.swt.widgets.Label;\r\nimport org.eclipse.swt.widgets.Listener;\r\nimport org.eclipse.swt.widgets.Menu;\r\nimport org.eclipse.swt.widgets.MenuItem;\r\nimport org.eclipse.swt.widgets.Monitor;\r\nimport org.eclipse.swt.widgets.Shell;\r\nimport org.eclipse.swt.widgets.TabFolder;\r\nimport org.eclipse.swt.widgets.TabItem;\r\nimport org.eclipse.swt.widgets.Text;\r\nimport org.eclipse.swt.widgets.Widget;\r\nimport org.lwjgl.LWJGLException;\r\nimport org.lwjgl.Sys;\r\nimport org.lwjgl.opengl.GLContext;\r\n\r\n/**\r\n * Main class for the ArrowIDE program.\r\n * \r\n * @author\tBraden Steffaniak\r\n * @since\tFeb 13, 2013 at 4:46:00 PM\r\n * @since\tv0.7\r\n * @version\tFeb 13, 2013 at 4:46:00 PM\r\n * @version\tv0.7\r\n */\r\npublic class ArrowIDE implements ContentListener, CodeFieldListener, TabMenuListener\r\n{\r\n\tprivate boolean\t\t\t\t\t\t\t\tfilesNeedRefresh;\r\n\tprivate boolean\t\t\t\t\t\t\t\tcustom;\r\n\t\r\n\tprivate int\t\t\t\t\t\t\t\t\tcurId;\r\n\tprivate int\t\t\t\t\t\t\t\t\ttitleBarHeight;\r\n\tprivate int\t\t\t\t\t\t\t\t\toldTabId;\r\n\r\n\tprivate CodeField\t\t\t\t\t\t\tcodeField;\r\n\r\n\tprivate ConsoleField\t\t\t\t\t\tconsoleField;\r\n\r\n\tprivate String\t\t\t\t\t\t\t\tfileLocation;\r\n\r\n\tprivate Image\t\t\t\t\t\t\t\tfolderImage, fileImage,\r\n\t\t\tjavaFileImage, classFileImage, glslFileImage, txtFileImage,\r\n\t\t\trtfFileImage, exeFileImage, asmFileImage, cppFileImage, hFileImage;\r\n\r\n\tprivate PropertiesDialog\t\t\t\t\tproperties;\r\n\tprivate PreferencesDialog\t\t\t\t\tpreferences;\r\n\r\n\tprivate Composite\t\t\t\t\t\t\tcontentPanel;\r\n\t\r\n\tprivate Menubar\t\t\t\t\t\t\t\tmenubar;\r\n\r\n\tprivate TitleBar\t\t\t\t\t\t\ttitleBar;\r\n\t\r\n\tprivate Toolbar\t\t\t\t\t\t\t\ttoolbar;\r\n\r\n\tprivate TreeMenu\t\t\t\t\t\t\ttreeMenu;\r\n\t\r\n\tprivate CompositeSizer\t\t\t\t\t\ttreeMenuSizer, codeFieldSizer;\r\n\r\n\tprivate TabMenu\t\t\t\t\t\t\t\tfileTabs, consoleTabs;\r\n\r\n\tprivate ConsoleStream\t\t\t\t\t\tconsoleStream;\r\n\r\n\tprivate Dialog\t\t\t\t\t\t\t\tnewFolderDialog, newFileDialog,\r\n\t\t\tnewProjectDialog;\r\n\tprivate TextInputDialog\t\t\t\t\t\trenameFileDialog;\r\n\r\n\tprivate HashMap<Integer, String>\t\t\ttreeItemLocations;\r\n\tprivate HashMap<String, Integer>\t\t\ttreeItemIds;\r\n\tprivate HashMap<Integer, String>\t\t\ttreeItemDirectories;\r\n\tprivate HashMap<String, String>\t\t\t\tfileCache;\r\n\tprivate HashMap<String, Boolean>\t\t\tfileCacheSaved;\r\n\tprivate HashMap<Integer, String>\t\t\ttabFileLocations;\r\n\tprivate HashMap<String, Integer>\t\t\ttabFileIds;\r\n\tprivate HashMap<Integer, Integer>\t\t\ttabTopPixels;\r\n\tprivate HashMap<Integer, Point>\t\t\t\ttabSelection;\r\n//\tprivate HashMap<, Integer>\t\t\t\t\tconsoleTabIds;\r\n\tprivate HashMap<Integer, Program>\t\t\t\t\tconsoleTabPrograms;\r\n\t\r\n\tprivate ArrayList<Program>\t\t\t\t\tprograms;\r\n\r\n\tprivate static boolean\t\t\t\t\t\trestarting;\r\n\tprivate static boolean\t\t\t\t\t\texiting;\r\n\t\r\n\tprivate static int\t\t\t\t\t\t\tuntitledNumber;\r\n\t\r\n\tprivate static Window\t\t\t\t\t\twindow;\r\n\t\r\n\tprivate static SplashScreen\t\t\t\t\tsplash;\r\n\r\n\tprivate static String\t\t\t\t\t\tconfigLocation;\r\n\r\n\tpublic static final Display\t\t\t\t\tDISPLAY;\r\n\r\n\tpublic static final Color\t\t\t\t\tTITLE_BAR_BACKGROUND, TITLE_BAR_FOREGROUND, FOCUS_COLOR, NON_FOCUS_COLOR;\r\n\t\r\n\tpublic static final HashMap<String, String>\tCONFIG_DATA;\r\n\t\r\n\tpublic static final HashMap<String, HashMap<String, XMLItem[]>>\tPROJECT_PROPERTIES;\r\n\tpublic static final HashMap<String, HashMap<String, XMLItem[]>>\tPROJECT_CLASSPATHS;\r\n\t// public static final HashMap<Integer, String> CONFIG_LINE_NUMBER_DATA;\r\n\t// public static final HashMap<String, Integer> CONFIG_LINE_NUMBERS;\r\n\r\n\tpublic static final HashMap<String, Object>\tPROPERTIES;\r\n\t\r\n\tprivate static ArrayList<Thread>\t\t\tfileViewerThreads;\r\n\t\r\n\tprivate class Efficient\r\n\t{\r\n\t\tprivate int i;\r\n\t\t\r\n\t\tprivate String s;\r\n\t\t\r\n\t\tpublic Efficient(String s, int i)\r\n\t\t{\r\n\t\t\tthis.s = s;\r\n\t\t\tthis.i = i;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiate the {@link #DISPLAY display}, and the color palette.\r\n\t */\r\n\tstatic\r\n\t{\r\n\t\tDISPLAY = new Display();\r\n\t\t\r\n\t\tTITLE_BAR_BACKGROUND = new Color(DISPLAY, 240, 240, 240);\r\n\t\tTITLE_BAR_FOREGROUND = TITLE_BAR_BACKGROUND;\r\n\t\t\r\n\t\tFOCUS_COLOR = new Color(DISPLAY, 255, 255, 255);\r\n\t\tNON_FOCUS_COLOR = ColorUtils.lighten(TITLE_BAR_BACKGROUND, 10);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize the CONFIG_DATA HashMaps and set the os properties\r\n\t * in the PROPERTIES HashMap.\r\n\t */\r\n\tstatic\r\n\t{\r\n\t\tCONFIG_DATA             = new HashMap<String, String>();\r\n\t\t\r\n\t\tPROJECT_PROPERTIES      = new HashMap<String, HashMap<String, XMLItem[]>>();\r\n\t\tPROJECT_CLASSPATHS      = new HashMap<String, HashMap<String, XMLItem[]>>();\r\n//\t\tCONFIG_LINE_NUMBER_DATA = new HashMap<Integer, String>();\r\n//\t\tCONFIG_LINE_NUMBERS     = new HashMap<String, Integer>();\r\n\t\t\r\n\t\tPROPERTIES              = new HashMap<String, Object>();\r\n\t\t\r\n\t\tString osName = System.getProperty(""os.name"");\r\n\t\t\r\n\t\tif (osName.toLowerCase().contains(""mac""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""macosx"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.BORDER);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.COMMAND);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", """");\r\n\t\t\tPROPERTIES.put(""colon"", ';');\r\n\t\t}\r\n\t\telse if (osName.toLowerCase().contains(""win""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""windows"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.NONE);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.CTRL);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", "".exe"");\r\n\t\t\tPROPERTIES.put(""colon"", ';');\r\n\t\t}\r\n\t\telse if (osName.toLowerCase().contains(""lin""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""linux"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.NONE);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.CTRL);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", """");\r\n\t\t\tPROPERTIES.put(""colon"", ':');\r\n\t\t}\r\n\t\t\r\n\t\tsetArchitecture();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set the os.arch value for the {@link #PROPERTIES} variable.\r\n\t */\r\n\tprivate static void setArchitecture()\r\n\t{\r\n\t\tint bitness = 32;\r\n\t\t\r\n\t\tProcessBuilder b = new ProcessBuilder(new String[] { ""res/bitness"" });\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tProcess p = b.start();\r\n\t\t\t\r\n\t\t\tInputStream in = p.getInputStream();\r\n\t\t\t\r\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(in));\r\n\t\t\t\r\n\t\t\tString line = null;\r\n\t\t\t\r\n\t\t\twhile ((line = reader.readLine()) != null)\r\n\t\t\t{\r\n\t\t\t\tbitness = Integer.valueOf(line);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tPROPERTIES.put(""os.arch"", bitness);\r\n\t}\r\n\t\r\n\t/**\r\n\t * The initial starting point of the program. It is only called\r\n\t * whenever the program is started from scratch without a restart.\r\n\t * \r\n\t * @param args The command line arguments. (Unused)\r\n\t */\r\n\tpublic static void main(String args[])\r\n\t{\r\n\t\tstart();\r\n\t}\r\n\t\r\n\t/**\r\n\t * The constructor for this class. Initializes the window that is\r\n\t * used for programming.\r\n\t * \r\n\t * @param display The display to use.\r\n\t */\r\n\tpublic ArrowIDE(final Display display)\r\n\t{\r\n//\t\tSystem.out.println(map.get(""Contacts.Contact.ContactId"")[0].getContents());\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""window.custom""))\r\n\t\t{\r\n\t\t\tcustom = Boolean.valueOf(CONFIG_DATA.get(""window.custom""));\r\n\t\t}\r\n\t\t\r\n\t\tMonitor monitor = DISPLAY.getPrimaryMonitor();\r\n\t\tfinal Rectangle screenBounds = monitor.getBounds();\r\n\t\t\r\n\t\tint height = (int)(monitor.getBounds().height / 1.5f);\r\n\t\tint width  = (int)(monitor.getBounds().width / 1.5f);\r\n\t\t\r\n\t\twindow = new Window(DISPLAY, custom);//, SWT.SHELL_TRIM & (~SWT.RESIZE));\r\n\t\twindow.setSize(width, height);\r\n\t\t\r\n\t\tfinal Rectangle shellBounds = window.getBounds();\r\n\t\t \r\n\t\twindow.setLocation(screenBounds.width / 2 - shellBounds.width / 2, screenBounds.height / 2 - shellBounds.height / 2);\r\n\t\twindow.setTitle(""Arrow IDE"");\r\n\t\t\r\n\t\tPROPERTIES.put(""arrowide.location"", FileUtils.getParentFolder(configLocation));\r\n\t\t\r\n\t\t/**\r\n\t\t * Set up the OpenGL (lwjgl) capabilities for the program.\r\n\t\t */\r\n\t\t{\r\n\t\t\tSystem.setProperty(""org.lwjgl.librarypath"", PROPERTIES.get(""arrowide.location"") + ""/res/native/"" + PROPERTIES.get(""os.name"") + ""/"");\r\n\t\t\t\r\n\t\t\tComposite comp = new Composite(window.getShell(), SWT.NONE);\r\n\t\t\tcomp.setLayout(new FillLayout());\r\n\t\t\t\r\n\t\t\tGLData data = new GLData();\r\n\t\t\tdata.doubleBuffer = true;\r\n\t\t\tfinal GLCanvas canvas = new GLCanvas(comp, SWT.NONE, data);\r\n\t\t\t\r\n\t\t\tcanvas.setCurrent();\r\n\t\t\t\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tGLContext.useContext(canvas);\r\n\t\t\t}\r\n\t\t\tcatch(LWJGLException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""monitor.width"") && CONFIG_DATA.containsKey(""monitor.height""))\r\n\t\t{\r\n\t\t\twidth  = Integer.parseInt(CONFIG_DATA.get(""monitor.width""));\r\n\t\t\theight = Integer.parseInt(CONFIG_DATA.get(""monitor.height""));\r\n\t\t\t\r\n\t\t\tif (width == screenBounds.width && height == screenBounds.height)\r\n\t\t\t{\r\n\t\t\t\tif (CONFIG_DATA.containsKey(""window.width"") && CONFIG_DATA.containsKey(""window.height""))\r\n\t\t\t\t{\r\n\t\t\t\t\twidth  = Integer.parseInt(CONFIG_DATA.get(""window.width""));\r\n\t\t\t\t\theight = Integer.parseInt(CONFIG_DATA.get(""window.height""));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (width > 0 && height > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twindow.setSize(width, height);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (CONFIG_DATA.containsKey(""window.x"") && CONFIG_DATA.containsKey(""window.y""))\r\n\t\t\t\t{\r\n\t\t\t\t\tint x = Integer.parseInt(CONFIG_DATA.get(""window.x""));\r\n\t\t\t\t\tint y = Integer.parseInt(CONFIG_DATA.get(""window.y""));\r\n\t\t\t\t\t\r\n\t\t\t\t\twindow.setLocation(x, y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""monitor.width"", screenBounds.width + """");\r\n\t\tsetConfigDataValue(""monitor.height"", screenBounds.height + """");\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""window.fullscreen""))\r\n\t\t{\r\n\t\t\tboolean fullscreen = Boolean.valueOf(CONFIG_DATA.get(""window.fullscreen""));\r\n\t\t\t\r\n\t\t\twindow.setFullscreen(fullscreen);\r\n\t\t}\r\n\t\t\r\n\t\tif (!window.isFullscreen() && CONFIG_DATA.containsKey(""window.maximized""))\r\n\t\t{\r\n\t\t\tboolean maximized = Boolean.valueOf(CONFIG_DATA.get(""window.maximized""));\r\n\t\t\t\r\n\t\t\twindow.setMaximized(maximized);\r\n\t\t}\r\n\t\t\r\n\t\twindow.setBackground(new Color(display, 225, 225, 225));\r\n\t\t\r\n\t\tif (custom)\r\n\t\t{\r\n\t\t\twindow.setBorderColor(new Color(display, 215, 215, 215));\r\n\t\t\twindow.setBorderSize(3);\r\n\t\t}\r\n\t\t\r\n\t\tdisplay.addFilter(SWT.KeyDown, new Listener()\r\n\t\t{\r\n\t\t\tpublic void handleEvent(Event event)\r\n\t\t\t{\r\n\t\t\t\tif (event.keyCode == SWT.F11)\r\n\t\t\t\t{\r\n\t\t\t\t\twindow.setFullscreen(!window.isFullscreen());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tcontentPanel = window.getContentPanel();\r\n\t\tcontentPanel.setLocation(0, 0);\r\n\t\tcontentPanel.setSize(window.getClientArea().width, window.getClientArea().height);\r\n\t\tcontentPanel.setBackground(window.getBackground());\r\n\t\t\r\n\t\tif (custom)\r\n\t\t{\r\n\t\t\ttitleBar     = new TitleBar(window, 28, SWT.MIN | SWT.MAX | SWT.CLOSE | SWT.CENTER);\r\n\t\t\ttitleBar.setBackground(TITLE_BAR_BACKGROUND);\r\n\t\t\ttitleBar.setForeground(TITLE_BAR_FOREGROUND);\r\n\t\t\t\r\n\t\t\ttitleBarHeight = titleBar.getHeight();\r\n\t\t}\r\n\t\t\r\n//\t\tGridLayout b = new GridLayout();\r\n//\t\tb.makeColumnsEqualWidth = false;\r\n//\t\t\r\n//\t\tshell.setLayout(b);\r\n\t\t\r\n\t\tfileCache     = new HashMap<String, String>();\r\n\t\t\r\n\t\tcodeField     = new CodeField(contentPanel);\r\n\t\tconsoleField  = new ConsoleField(contentPanel);\r\n\t\t\r\n\t\tcodeField.addContentListener(this);\r\n\t\tcodeField.addCodeFieldListener(this);\r\n\t\tcodeField.setBackground(FOCUS_COLOR);\r\n\t\t\r\n\t\tint contentWidth  = (int)(contentPanel.getSize().x / 100f * 80);\r\n\t\tint conHeight     = (int)(contentPanel.getSize().y / 100f * 20);\r\n\t\tint toolbarHeight = (int)(25);\r\n\t\t\r\n\t\tcodeField.setSize(contentWidth, contentPanel.getSize().y - conHeight - toolbarHeight - 16);\r\n\t\tcodeField.setLocation(contentPanel.getSize().x - codeField.getWidth(), toolbarHeight);//contentPanel.getSize().y - codeField.getHeight());\r\n\t\tcodeField.setShowLineNumbers(true);\r\n\t\t\r\n\t\tconsoleField.setSize(contentWidth, conHeight - 5);\r\n\t\tconsoleField.setLocation(codeField.getBounds().x, codeField.getHeight() + codeField.getBounds().y + 5);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconsoleStream = new ConsoleStream(""log.txt"");\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tfolderImage       = new Image(display, new FileInputStream(""res/images/folderimage.png""));\r\n\t\t\tfileImage         = new Image(display, new FileInputStream(""res/images/fileimage.png""));\r\n\t\t\tjavaFileImage     = new Image(display, new FileInputStream(""res/images/javafileimage.png""));\r\n\t\t\tclassFileImage    = new Image(display, new FileInputStream(""res/images/classfileimage.png""));\r\n\t\t\tglslFileImage     = new Image(display, new FileInputStream(""res/images/glslfileimage.png""));\r\n\t\t\ttxtFileImage      = new Image(display, new FileInputStream(""res/images/txtfileimage.png""));\r\n\t\t\trtfFileImage      = new Image(display, new FileInputStream(""res/images/rtffileimage.png""));\r\n\t\t\texeFileImage      = new Image(display, new FileInputStream(""res/images/exefileimage.png""));\r\n\t\t\tasmFileImage      = new Image(display, new FileInputStream(""res/images/asmfileimage.png""));\r\n\t\t\tcppFileImage      = new Image(display, new FileInputStream(""res/images/cppfileimage.png""));\r\n\t\t\thFileImage        = new Image(display, new FileInputStream(""res/images/hfileimage.png""));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttabFileLocations  = new HashMap<Integer, String>();\r\n\t\ttabFileIds        = new HashMap<String, Integer>();\r\n\t\ttabTopPixels      = new HashMap<Integer, Integer>();\r\n\t\ttabSelection      = new HashMap<Integer, Point>();\r\n\t\t\r\n\t\tfileTabs = new TabMenu(contentPanel);\r\n\t\tfileTabs.setBackground(ColorUtils.darken(contentPanel.getBackground(), 20));\r\n\t\tfileTabs.addListener(this);\r\n\t\t\r\n\t\tconsoleTabs = new TabMenu(contentPanel);\r\n\t\tconsoleTabs.setBackground(ColorUtils.darken(contentPanel.getBackground(), 20));\r\n\t\tconsoleTabs.setMaxWidth(codeField.getWidth() + 2);\r\n\t\tconsoleTabs.addListener(this);\r\n\t\t\r\n\t\tprograms = new ArrayList<Program>();\r\n\t\tconsoleTabPrograms = new HashMap<Integer, Program>();\r\n\t\t\r\n\t    fileTabs.setMaxWidth(codeField.getWidth() + 2);\r\n\t\tcodeField.setLocation(codeField.getX(), codeField.getY() + fileTabs.getHeight());\r\n\t\tfileTabs.setLocation(codeField.getX(), 2);\r\n\t\t\r\n\t\tpreferences = new PreferencesDialog(contentPanel);\r\n\t\tpreferences.addDialogPanel(new GeneralPanel(preferences.getContentPanel(), this));\r\n\t\tpreferences.addDialogPanel(new JavaPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new CppPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new AssemblyPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new PythonPanel(preferences.getContentPanel()));\r\n\t\t\r\n\t\tproperties = new PropertiesDialog(contentPanel);\r\n\t\tproperties.addDialogPanel(new JavaPanel(properties.getContentPanel()));\r\n\t\t\r\n\t\tmenubar = new Menubar(contentPanel);\r\n\t\tmenubar.setBackground(TITLE_BAR_BACKGROUND);\r\n\t\tmenubar.setSize(contentPanel.getSize().x, 20);\r\n\t\tmenubar.addMenuHeader(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""New"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Open"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Save"", ""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Save as..."", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Refresh"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Print"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Restart"", ""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Exit"", ""FILE"");\r\n\r\n\t\tmenubar.addMenuSubItem(""Project"", ""FILE>New"");\r\n\t\tmenubar.addMenuSubItem(""Empty File"", ""FILE>New"");\r\n\t\t\r\n\t\tmenubar.addMenuHeader(""EDIT"");\r\n\t\tmenubar.addMenuSubItem(""Preferences"", ""EDIT"");\r\n\r\n\t\tmenubar.addMenuHeader(""PROJECT"");\r\n\t\tmenubar.addMenuSubItem(""Properties"", ""PROJECT"");\r\n\t\t\r\n\t\tmenubar.addListener(new MenubarListener()\r\n\t\t{\r\n\t\t\tpublic void subItemPressed(String subItemId)\r\n\t\t\t{\r\n\t\t\t\tif (subItemId.equals(""FILE>New>Empty File""))\r\n\t\t\t\t{\r\n\t\t\t\t\tnewFile();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>New>Project""))\r\n\t\t\t\t{\r\n\t\t\t\t\tnewProject();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Open""))\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Save""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Save as...""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(null);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Refresh""))\r\n\t\t\t\t{\r\n\t\t\t\t\trefreshFileViewer(false);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Print""))\r\n\t\t\t\t{\r\n\t\t\t\t\tPrintDialog dialog = new PrintDialog(window.getShell(), SWT.NONE);\r\n\t\t\t\t\tdialog.setScope(PrinterData.SELECTION);\r\n\t\t\t\t\t\r\n\t\t\t\t\tPrinterData data = dialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tFontData fd[] = codeField.getFont().getFontData().clone();\r\n\t\t\t\t\tfd[0].setHeight(10);\r\n\t\t\t\t\t\r\n\t\t\t\t\tTextPrinter printer = new TextPrinter(data, codeField.getText(), new Font(display, fd[0]), codeField.getStyles());\r\n\t\t\t\t\tprinter.setMargins(1, 1, 1, 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!printer.print())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tSystem.err.println(""Was not able to print!"");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Restart""))\r\n\t\t\t\t{\r\n\t\t\t\t\trestart();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Exit""))\r\n\t\t\t\t{\r\n\t\t\t\t\texit(window);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""EDIT>Preferences""))\r\n\t\t\t\t{\r\n\t\t\t\t\tpreferences.open();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""PROJECT>Properties""))\r\n\t\t\t\t{\r\n\t\t\t\t\tproperties.open();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\ttoolbar       = new Toolbar(contentPanel);\r\n\t\t\t\r\n\t\t\ttoolbar.setBackground(window.getBackground());\r\n\r\n\t\t\ttoolbar.addToolItem(""Save"", new Image(display, new FileInputStream(""res/images/savebutton.png"")));\r\n\t\t\ttoolbar.addSeparator();\r\n\t\t\ttoolbar.addToolItem(""Compile"", new Image(display, new FileInputStream(""res/images/compilebutton.png"")));\r\n\t\t\ttoolbar.addSeparator();\r\n\t\t\ttoolbar.addToolItem(""Run"", new Image(display, new FileInputStream(""res/images/runbutton.png"")));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttoolbar.addListener(new ToolbarListener()\r\n\t\t{\r\n\t\t\tpublic void toolItemPressed(String toolItemName)\r\n\t\t\t{\r\n\t\t\t\tif (toolItemName.equals(""Save""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t}\r\n\t\t\t\telse if (toolItemName.equals(""Compile""))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (fileLocation == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\topenFile();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (Language.canCompile(FileUtils.getFileType(fileLocation)))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tString outputLocation = FileUtils.getParentFolder(fileLocation) + ""/"";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tnew File(outputLocation).mkdirs();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tLanguage.compile(fileLocation, codeField.getRawText(), outputLocation, consoleStream);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (toolItemName.equals(""Run""))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (fileLocation == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tProgram program = Language.run(codeField.getLanguage(), fileLocation, consoleStream);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (program != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tprograms.add(program);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconsoleTabPrograms.put(, consoleTabs.addTab(program.getName());\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tupdateLayout();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tLanguage.init();\r\n\t\t\r\n\t\tLanguage.addCompilerListener(new CompilerListener()\r\n\t\t{\r\n\t\t\tpublic void compiled(final String files[], final CompileOutput outputs[], final PrintStream stream, String fileName)\r\n\t\t\t{\r\n\t\t\t\tfinal boolean isInViewer = treeItemLocations.containsKey(fileLocation);\r\n\t\t\t\t\r\n\t\t\t\tif (outputs[0].getResult() == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tdisplay.syncExec(new Runnable()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (stream != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tstream.println(""Compiled successfully."");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (isInViewer)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor (int i = 0; i < files.length; i ++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(files[i]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t{\r\n\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor (int i = 0; i < outputs.length; i++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (outputs[i].getResult() != 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcodeField.addError(outputs[i].getStartIndex(), outputs[i].getEndIndex());\r\n//\t\t\t\t\t\t\t\tSystem.out.print(outputs[i] + ""; "");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tSystem.out.println();\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tcodeField.highlightSyntax();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tfileViewerThreads    = new ArrayList<Thread>();\r\n\t\t\r\n\t\tfileCacheSaved        = new HashMap<String, Boolean>();\r\n\t\ttreeItemLocations     = new HashMap<Integer, String>();\r\n\t\ttreeItemIds           = new HashMap<String, Integer>();\r\n\t\ttreeItemDirectories   = new HashMap<Integer, String>();\r\n\t\t\r\n\t\ttreeMenu              = new TreeMenu(contentPanel);\r\n\t\ttreeMenu.setSize(contentPanel.getSize().x - codeField.getWidth() - 10, codeField.getHeight() + consoleField.getHeight());\r\n\t\ttreeMenu.setLocation(0, codeField.getY());\r\n\t\ttreeMenu.setBackground(NON_FOCUS_COLOR);\r\n\t\t\r\n\t\ttreeMenuSizer = new CompositeSizer(contentPanel, CompositeSizer.VERTICAL);\r\n\t\ttreeMenuSizer.setSize(5, treeMenu.getHeight());\r\n\t\ttreeMenuSizer.setLocation(treeMenu.getLocation().x + treeMenu.getWidth(), treeMenu.getLocation().y);\r\n\t\ttreeMenuSizer.setBackground(new Color(DISPLAY, 100, 100, 100));\r\n\t\ttreeMenuSizer.setForeground(new Color(DISPLAY, 230, 230, 230));\r\n\t\ttreeMenuSizer.setMinimumX(treeMenu.getLocation().x);\r\n\t\ttreeMenuSizer.addSizerListener(new SizerListener()\r\n\t\t{\r\n\t\t\tpublic void sizerMoved(int dx, int dy)\r\n\t\t\t{\r\n\t\t\t\ttreeMenu.setSize(treeMenu.getWidth() + dx, treeMenu.getHeight());\r\n\t\t\t\tcodeField.setSize(codeField.getWidth() - dx, codeField.getHeight());\r\n\t\t\t\tcodeField.setLocation(codeField.getX() + dx, codeField.getY());\r\n\t\t\t\t\r\n\t\t\t\tconsoleField.setSize(codeField.getWidth(), consoleField.getHeight());\r\n\t\t\t\tconsoleField.setLocation(codeField.getX(), consoleField.getLocation().y);\r\n\r\n\t\t\t\tcodeFieldSizer.setSize(codeField.getWidth(), 5);\r\n\t\t\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight());\r\n\t\t\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t\t\t\t\r\n\t\t\t\ttoolbar.setLocation(codeField.getX(), toolbar.getY());\r\n\t\t\t\tfileTabs.setLocation(codeField.getX(), fileTabs.getY());\r\n\t\t\t\tconsoleTabs.setLocation(codeField.getX(), consoleTabs.getY());\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tcodeFieldSizer = new CompositeSizer(contentPanel, CompositeSizer.HORIZONTAL);\r\n\t\tcodeFieldSizer.setSize(codeField.getWidth(), 3);\r\n\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight() + 1);\r\n\t\tcodeFieldSizer.setBackground(new Color(DISPLAY, 100, 100, 100));\r\n\t\tcodeFieldSizer.setForeground(new Color(DISPLAY, 230, 230, 230));\r\n\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t\tcodeFieldSizer.addSizerListener(new SizerListener()\r\n\t\t{\r\n\t\t\tpublic void sizerMoved(int dx, int dy)\r\n\t\t\t{\r\n\t\t\t\tcodeField.setSize(codeField.getWidth(), codeField.getHeight() + dy);\r\n\t\t\t\t\r\n\t\t\t\tconsoleField.setSize(codeField.getWidth(), consoleField.getHeight() - dy);\r\n\t\t\t\tconsoleField.setLocation(codeField.getX(), consoleField.getLocation().y + dy);\r\n\t\t\t\t\r\n\t\t\t\tconsoleTabs.setLocation(codeField.getX(), consoleTabs.getY() + dy);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tMenu m = new Menu(treeMenu);\r\n\t\ttreeMenu.setMenu(m);\r\n\t\t\r\n\t\tfinal MenuItem newFolder = new MenuItem(m, SWT.CASCADE);\r\n\t\tnewFolder.setText(""New Folder"");\r\n\t\t\r\n\t\tfinal MenuItem newFile = new MenuItem(m, SWT.CASCADE);\r\n\t\tnewFile.setText(""New File"");\r\n\t\t\r\n\t\tfinal MenuItem rename = new MenuItem(m, SWT.CASCADE);\r\n\t\trename.setText(""Rename"");\r\n\t\t\r\n\t\tfinal MenuItem delete = new MenuItem(m, SWT.CASCADE);\r\n\t\tdelete.setText(""Delete"");\r\n\t\t\r\n\t\tfinal ArrowIDE thisIDE = this;\r\n\t\t\r\n\t\tSelectionListener menuListener = new SelectionListener()\r\n\t\t{\r\n\t\t\tpublic void widgetDefaultSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tif (e.widget == delete)\r\n\t\t\t\t{\r\n\t\t\t\t\tint id = treeMenu.getSelection();\r\n//\t\t\t\t\t\r\n//\t\t\t\t\tif (treeItems.containsKey(id))\r\n//\t\t\t\t\t{\r\n//\t\t\t\t\t\tSystem.out.println(""is file"");\r\n//\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = treeItemLocations.get(id);\r\n\t\t\t\t\t\r\n\t\t\t\t\tdeleteFile(location);\r\n\r\n\t\t\t\t\tremoveFromFileViewer(location);\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == newFolder)\r\n\t\t\t\t{\r\n\t\t\t\t\tString preLoc = treeItemLocations.get(treeMenu.getSelection());\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (preLoc == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLoc = FileUtils.removeEndingSlashes(CONFIG_DATA.get(""workspace.location"")) + ""/"";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString preLocation = FileUtils.removeEndingSlashes(preLoc);\r\n\r\n\t\t\t\t\tif (FileUtils.isFile(preLocation))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLocation = FileUtils.getParentFolder(preLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tnewFolderDialog = new FileInputDialog(""Enter the folder name:"", ""Folder name:"", true, preLocation + ""/"", false);\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = newFolderDialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (location != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile f = new File(location);\r\n\t\t\t\t\t\tf.mkdirs();\r\n\r\n\t\t\t\t\t\taddToFileViewer(location);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == newFile)\r\n\t\t\t\t{\r\n\t\t\t\t\tString preLoc = treeItemLocations.get(treeMenu.getSelection());\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (preLoc == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLoc = FileUtils.removeEndingSlashes(CONFIG_DATA.get(""workspace.location"")) + ""/"";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString preLocation = FileUtils.removeEndingSlashes(preLoc);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (FileUtils.isFile(preLocation))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLocation = FileUtils.getParentFolder(preLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tnewFileDialog = new FileInputDialog(""Enter the file name:"", ""File name:"", false, preLocation + ""/"", false);\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = newFileDialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (location != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile f = new File(location);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tf.createNewFile();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\topenFile(location);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\taddToFileViewer(location);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (IOException e2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\te2.printStackTrace();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == rename)\r\n\t\t\t\t{\r\n\t\t\t\t\tfinal int selection\t\t= treeMenu.getSelection();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfinal String loc\t\t= treeItemLocations.get(selection);\r\n\t\t\t\t\t\r\n\t\t\t\t\tboolean willContinue\t= false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (fileCache.containsKey(loc))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (!fileCacheSaved.get(loc))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tString result = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tOptionDialog optDialog = new OptionDialog(""Save?"", ""Would you like to save before renaming?"");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tresult = optDialog.open();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (result != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif (result.equals(""yes""))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tsaveFile(loc);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\twillContinue\t= true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if (result.equals(""no""))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (willContinue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trenameFileDialog = new TextInputDialog(""Enter the new name:"", ""New name:"", FileUtils.getFileName(treeItemLocations.get(selection)));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\trenameFileDialog.addDialogFilter(new DialogFilter()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic String filter(String text)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttext = FileUtils.removeEndingSlashes(text.replace('\\\\', '/'));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor (int i = 0; i < text.length(); i ++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (text.charAt(i) == '/')\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\treturn ""The name must be in the same location."";\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tString newLoc\t\t= FileUtils.getParentFolder(loc) + ""/"" + text;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tboolean currentFile\t= text.equals(FileUtils.getFileName(loc));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (currentFile)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn ""The name must be different than the current name."";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tremoveFromFileViewer(loc);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tFile f = new File(loc);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tboolean successful = f.renameTo(new File(newLoc));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (successful)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (fileCache.containsKey(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileCache.put(newLoc, fileCache.remove(loc));\r\n\t\t\t\t\t\t\t\t\t\tfileCacheSaved.put(newLoc, fileCacheSaved.remove(loc));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (tabFileLocations.containsValue(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tint tabId = tabFileIds.remove(loc);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tfileTabs.setTabText(tabId, FileUtils.getFileName(newLoc));\r\n\t\t\t\t\t\t\t\t\t\ttabFileLocations.put(tabId, newLoc);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\ttabFileIds.put(newLoc, tabId);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (tabFileIds.containsKey(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ttabFileIds.put(newLoc, tabFileIds.remove(loc));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (currentFile)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileLocation = newLoc;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tcodeField.setLanguage(Language.getLanguage(fileLocation));\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tcodeField.highlightSyntax();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (loc.equals(fileLocation))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileLocation = newLoc;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tboolean before = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (fileCacheSaved.containsKey(newLoc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tbefore = fileCacheSaved.get(newLoc);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n//\t\t\t\t\t\t\t\t\trefreshFileViewer();\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(newLoc);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tfileCacheSaved.put(newLoc, before);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(loc);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tString result = renameFileDialog.open();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (result != null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tFileUtils.removeEndingSlashes(result.replace('\\\\', '/'));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\twidgetDefaultSelected(e);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tnewFolder.addSelectionListener(menuListener);\r\n\t\tnewFile.addSelectionListener(menuListener);\r\n\t\trename.addSelectionListener(menuListener);\r\n\t\tdelete.addSelectionListener(menuListener);\r\n\t\t\r\n\t\ttreeMenu.addListener(new TreeMenuListener()\r\n\t\t{\r\n\t\t\tpublic void treeItemDoubleClicked(int id)\r\n\t\t\t{\r\n\t\t\t\tif (!treeItemDirectories.containsKey(id))\r\n\t\t\t\t{\r\n\t\t\t\t\tString location = treeItemLocations.get(id);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile(location);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpublic void treeItemRightClicked(int id)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tpublic void treeItemSelected(int id)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\tconsoleStream.addConsoleListener(new ConsoleListener()\r\n\t\t{\r\n\t\t\tpublic void onPrintln(final Object o)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tif (o instanceof String)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsoleField.append((String)o);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tpublic void onPrint(Object o)\r\n\t\t\t{\r\n\t\t\t\tif (o instanceof String)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsoleField.append((String)o);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t    ControlListener shellListener = new ControlListener()\r\n\t\t{\r\n\t\t\tpublic void controlMoved(ControlEvent e)\r\n\t\t\t{\r\n\t\t\t\tsetConfigDataValue(""window.x"", window.getLocation().x + """");\r\n\t\t\t\tsetConfigDataValue(""window.y"", window.getLocation().y + """");\r\n\t\t\t}\r\n\r\n\t\t\t// TODO clean this crap up.\r\n\t\t\tpublic void controlResized(ControlEvent e)\r\n\t\t\t{\r\n\t\t\t\tupdateLayout();\r\n\t\t\t\t\r\n\t\t\t\tif (!window.isMaximized() && !window.isFullscreen())\r\n\t\t\t\t{\r\n\t\t\t\t\tsetConfigDataValue(""window.width"", window.getWidth() + """");\r\n\t\t\t\t\tsetConfigDataValue(""window.height"", window.getHeight() + """");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tsetConfigDataValue(""window.maximized"", window.isMaximized() + """");\r\n\t\t\t\t\r\n\t\t\t\tsetConfigDataValue(""window.fullscreen"", window.isFullscreen() + """");\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\twindow.addControlListener(shellListener);\r\n\t\t\r\n\t\tshellListener.controlResized(null);\r\n\t\t\r\n\t\twindow.addPaintListener(new PaintListener()\r\n\t\t{\r\n\t\t\tpublic void paintControl(PaintEvent e)\r\n\t\t\t{\r\n\t\t\t\te.gc.drawString(codeField.getSelection().x + """", 0, 50);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""last.tabs""))\r\n\t\t{\r\n\t\t\tString lastTabs[] = CONFIG_DATA.get(""last.tabs"").split("";"");\r\n\t\t\t\r\n\t\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < lastTabs.length; i++)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\topenFile(lastTabs[i], false, i == lastTabs.length - 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\tbuilder.append(lastTabs[i] + ';');\r\n\t\t\t\t}\r\n\t\t\t\tcatch (IOException e)\r\n\t\t\t\t{\r\n\t\t\t\t\t// If file wasnt found.. or something else.\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsetConfigDataValue(""last.tabs"", builder.toString());\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Updates the components locations in the frame.\r\n\t */\r\n\tprivate void updateLayout()\r\n\t{\r\n\t\tcontentPanel.setSize(window.getClientArea().width, window.getClientArea().height);\r\n\t\t\r\n\t\tint width     = (int)(contentPanel.getSize().x / 100f * 80);\r\n\t\tint conHeight = (int)(contentPanel.getSize().y / 100f * 20);\r\n\t\t\r\n\t\tmenubar.setSize(contentPanel.getSize().x, menubar.getHeight());\r\n\t\tmenubar.setLocation(0, titleBarHeight);\r\n\t\t\r\n\t\tcodeField.setSize(width, contentPanel.getSize().y - conHeight - toolbar.getHeight() - fileTabs.getY());\r\n\t\tcodeField.setLocation(contentPanel.getSize().x - codeField.getWidth(), fileTabs.getHeight() + fileTabs.getY());\r\n\t\t\r\n\t\ttoolbar.setSize(toolbar.getWidth(), 25);\r\n\t\ttoolbar.setLocation(codeField.getX(), menubar.getY() + menubar.getHeight());\r\n\t\t\r\n\t\tboolean cTabs = programs.size() > 0;\r\n\t\tint cOffset   = cTabs ? consoleTabs.getHeight() : 0;\r\n\t\t\r\n\t\tconsoleField.setSize(width, conHeight - 5 - cOffset);\r\n\t\tconsoleField.setLocation(codeField.getBounds().x, codeField.getHeight() + codeField.getBounds().y + 5 + cOffset);\r\n\t\tSystem.out.println(""!"" + consoleField.getLocation().y);\r\n\t\t\r\n//\t\ttabs.setWidth(codeField.getWidth() + 2);\r\n\t\tfileTabs.setLocation(codeField.getX(), toolbar.getY() + toolbar.getHeight() + 2);\r\n\t\tconsoleTabs.setLocation(consoleField.getLocation().x, consoleField.getLocation().y - cOffset);\r\n\t\tSystem.out.println(consoleTabs.getY());\r\n\t\t\r\n\t\ttreeMenu.setLocation(treeMenu.getLocation().x, codeField.getY());\r\n\t\ttreeMenu.setSize(contentPanel.getSize().x - codeField.getWidth() - 5, consoleField.getLocation().y + consoleField.getHeight() - codeField.getY());\r\n\t\t\r\n\t\ttreeMenuSizer.setSize(5, treeMenu.getHeight());\r\n\t\ttreeMenuSizer.setLocation(treeMenu.getLocation().x + treeMenu.getWidth(), treeMenu.getLocation().y);\r\n\r\n\t\tcodeFieldSizer.setSize(codeField.getWidth(), 5);\r\n\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight());\r\n\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t}\r\n\t\r\n\t/**\r\n\t * The start method that is used to start up the whole ArrowIDE\r\n\t * program. Creates the window and puts the stuff in it.\r\n\t */\r\n\tpublic static void start()\r\n\t{\r\n//\t\tsplash = new Shell(display, SWT.ON_TOP);\r\n//\t\tsplash.setSize(largeIcon.getBounds().width, largeIcon.getBounds().height);\r\n//\t\tsplash.setLocation(screenBounds.width / 2 - splash.getSize().x / 2, screenBounds.height / 2 - splash.getSize().y / 2);\r\n//\t\t\r\n//\t\tLabel splashImage = new Label(splash, SWT.NONE);\r\n//\t\tsplashImage.setSize(splash.getSize());\r\n//\t\tsplashImage.setImage(largeIcon);\r\n\t\t\r\n//\t\tsplash = new SplashScreen(""res/images/iconlarge.png"", 3000);\r\n\t\t\r\n//\t\tsplash.open(3000);\r\n\t\t\r\n\t\tuntitledNumber = 0;\r\n\t\t\r\n\t\tArrowIDE ide = null;\r\n\r\n\t\tconfigLocation       = new File(""arrow.config"").getAbsolutePath().replace('\\\\', '/');\r\n\t\t\r\n\t\tcreateConfigData();\r\n\t\t\r\n\t\tif (workspaceCreated())\r\n\t\t{\r\n\t\t\tide = openIDE();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tchooseWorkspace();\r\n\t\t\t\r\n\t\t\tide = openIDE();\r\n\t\t}\r\n\t\t\r\n//\t\tSystem.out.println(OS.SendMessage(shell.handle, OS.EM_SETSEL, 5, 9));//new TCHAR(0, ""2dasdf"", true)));\r\n\t\t\r\n\t\twindow.setFocus();\r\n\t\twindow.forceActive();\r\n\t\twindow.forceFocus();\r\n\t\twindow.setActive();\r\n\t\t\r\n\t\twhile (!window.isDisposed())\r\n\t\t{\r\n\t\t\tif (!DISPLAY.readAndDispatch())\r\n\t\t\t{\r\n\t\t\t\tide.update();\r\n//\t\t\t\tsplash.update();\r\n\t\t\t\t\r\n\t\t\t\tDISPLAY.sleep();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (!restarting)\r\n\t\t{\r\n\t\t\texit(window);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create a new ArrowIDE and then open it.\r\n\t * \r\n\t * @return The created ArrowIDE object.\r\n\t */\r\n\tpublic static ArrowIDE openIDE()\r\n\t{\r\n\t\tString location = CONFIG_DATA.get(""workspace.location.relative"");\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tlocation = FileUtils.getAbsolutePath(location);\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t\texit(window);\r\n\t\t}\r\n\t\t\r\n\t\tCONFIG_DATA.put(""workspace.location"", location);\r\n\t\t\r\n\t\tArrowIDE ide = new ArrowIDE(DISPLAY);\r\n\t\t\r\n\t\twindow.open();\r\n\t\t\r\n\t\tImage largeIcon = null;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tlargeIcon = new Image(DISPLAY, new FileInputStream(""res/images/iconlarge.png""));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\t\twindow.setIcon(largeIcon);\r\n\t\t\r\n\t\tide.refreshFileViewer(true);\r\n\t\t\r\n\t\treturn ide;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Restarts the program to a fresh state.\r\n\t */\r\n\tpublic static void restart()\r\n\t{\r\n\t\trestarting = true;\r\n\t\t\r\n\t\twindow.dispose();\r\n\t\t\r\n\t\tstart();\r\n\t\t\r\n\t\trestarting = false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * The method that is called right before the exiting of the program.\r\n\t * \r\n\t * @param shell The window to close (The main window).\r\n\t */\r\n\tpublic static void exit(Window shell)\r\n\t{\r\n\t\texiting = true;\r\n\t\t\r\n\t\tif (shell != null)\r\n\t\t{\r\n\t\t\tshell.dispose();\r\n\t\t}\r\n\t\t\r\n\t\tif (fileViewerThreads != null)\r\n\t\t{\r\n\t\t\tfor (int i = fileViewerThreads.size() - 1; i >= 0; i--)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tfileViewerThreads.get(i).join();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (InterruptedException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tDisplay.getDefault().close();\r\n\t\t\r\n\t\tSystem.exit(0);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method used to choose the Workspace location. Sets the value of\r\n\t * the absolute location in the workspace.location key for the {@link #CONFIG_DATA}.\r\n\t */\r\n\tpublic static void chooseWorkspace()\r\n\t{\r\n\t\tDialogFilter filter = new DialogFilter()\r\n\t\t{\r\n\t\t\tpublic String filter(String text)\r\n\t\t\t{\r\n\t\t\t\tFile f = new File(text);\r\n\t\t\t\t\r\n\t\t\t\tif (!f.exists())\r\n\t\t\t\t{\r\n\t\t\t\t\treturn ""The directory must exist."";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tFileBrowseDialog chooseWorkspace = new FileBrowseDialog(""Choose your project workspace folder:"", ""Workspace:"", FileBrowseDialog.DIRECTORY);\r\n\t\tchooseWorkspace.addDialogFilter(filter);\r\n\t\t\r\n\t\tString location = chooseWorkspace.open();\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\texit(window);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""workspace.location.relative"", location);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tsetConfigDataValue(""workspace.location"", FileUtils.getAbsolutePath(location));\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns whether a workspace has been located or created.\r\n\t * \r\n\t * @return Whether the workspace has been located or created.\r\n\t */\r\n\tpublic static boolean workspaceCreated()\r\n\t{\r\n\t\tFile workspaceDirectory = null;\r\n\t\t\r\n\t\tif (!CONFIG_DATA.containsKey(""workspace.location""))\r\n\t\t{\r\n\t\t\tchooseWorkspace();\r\n\t\t}\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tsetConfigDataValue(""workspace.location"", FileUtils.getAbsolutePath(CONFIG_DATA.get(""workspace.location.relative"")));\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tworkspaceDirectory = new File(CONFIG_DATA.get(""workspace.location""));\r\n\t\t\r\n\t\treturn workspaceDirectory.exists();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that appends the given String to the value of the key given.\r\n\t * \r\n\t * @param key\tThe key to append to.\r\n\t * @param value\tThe value to append.\r\n\t */\r\n\tpublic static synchronized void appendConfigDataValue(String key, String value)\r\n\t{\r\n\t\tString prev = """";\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(key))\r\n\t\t{\r\n\t\t\tprev = CONFIG_DATA.get(key);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(key, prev + value);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set a CONFIG_DATA value in the HashMap and the arrow.config file.\r\n\t * If the key is not already in the file, it will add it to the end.\r\n\t * \r\n\t * @param key The key of the property to set.\r\n\t * @param value The value of the property to set.\r\n\t */\r\n\tpublic static synchronized void setConfigDataValue(String key, String value)\r\n\t{\r\n\t\tboolean added = false;\r\n\t\t\r\n\t\tCONFIG_DATA.put(key, value);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tPrintWriter p = new PrintWriter(new FileWriter(configLocation));\r\n\t\t\t\r\n\t\t\tString keys[] = CONFIG_DATA.keySet().toArray(new String[0]);\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < CONFIG_DATA.size(); i ++)\r\n\t\t\t{\r\n\t\t\t\tString lineKey   = null;\r\n\t\t\t\tString lineValue = null;\r\n\t\t\t\t\r\n\t\t\t\tlineKey          = keys[i];\r\n\t\t\t\t\r\n\t\t\t\tif (lineKey.equals(key))\r\n\t\t\t\t{\r\n\t\t\t\t\tlineValue = CONFIG_DATA.get(lineKey);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tlineValue = CONFIG_DATA.get(lineKey);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tp.print(lineKey + ""="" + lineValue + (i == CONFIG_DATA.size() - 1 ? """" : ""\\r\\n""));\r\n\t\t\t}\r\n\t\t\r\n\t\t\tp.close();\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates and initializes the CONFIG_DATA. Puts all of the correct\r\n\t * values into the HashMap.\r\n\t */\r\n\tprivate static void createConfigData()\r\n\t{\r\n\t\tFile file = new File(configLocation);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tConfigReader.read(configLocation, CONFIG_DATA);\r\n\t\t\t\r\n\t\t\tif (!CONFIG_DATA.containsKey(""workspace.location""))\r\n\t\t\t{\r\n\t\t\t\tPrintWriter writer;\r\n\t\t\t\twriter = new PrintWriter(new FileWriter(configLocation));\r\n\t\t\t\t\r\n\t\t\t\twriter.print(""workspace.location="");\r\n\t\t\t\t\r\n\t\t\t\twriter.close();\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that checks to see if the given location is a valid\r\n\t * project. If it is, then load all of the classpath and\r\n\t * project properties into the {@link #PROJECT_PROPERTIES} and\r\n\t * the classpaths into the {@link #PROJECT_CLASSPATHS}.\r\n\t * \r\n\t * @param location The location of the root folder of the project\r\n\t * \t\tto check.\r\n\t */\r\n\tpublic static void checkProject(String location)\r\n\t{\r\n\t\tlocation = FileUtils.removeEndingSlashes(location);\r\n\t\t\r\n\t\tString propsLocation = location + ""/.properties"";\r\n\t\tString cpLocation = location + ""/.classpath"";\r\n\t\t\r\n\t\tFile props = new File(propsLocation);\r\n\t\tFile cp = new File(cpLocation);\r\n\t\t\r\n\t\tif (props.isFile())\r\n\t\t{\r\n\t\t\tif (!PROJECT_PROPERTIES.containsKey(propsLocation))\r\n\t\t\t{\r\n\t\t\t\tHashMap<String, XMLItem[]> map = Reader.read(propsLocation);\r\n\t\t\t\t\r\n\t\t\t\tPROJECT_PROPERTIES.put(propsLocation, map);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (cp.isFile())\r\n\t\t{\r\n\t\t\tif (!PROJECT_CLASSPATHS.containsKey(cpLocation))\r\n\t\t\t{\r\n\t\t\t\tHashMap<String, XMLItem[]> map = Reader.read(cpLocation);\r\n\t\t\t\t\r\n\t\t\t\tPROJECT_CLASSPATHS.put(cpLocation, map);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a Dialog to ask for the project name. Next it creates a\r\n\t * directory/folder for the project and refreshes the file viewer.\r\n\t */\r\n\tpublic void newProject()\r\n\t{\r\n\t\tnewProjectDialog = new FileInputDialog(""Enter the name of your project:"", ""Project name:"", """", true, CONFIG_DATA.get(""workspace.location""), false);\r\n\t\t\r\n\t\tString location  = newProjectDialog.open();\r\n\t\t\r\n\t\tif (location != null)\r\n\t\t{\r\n\t\t\tFile f = new File(location);\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/bin"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/res"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/src"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tf = new File(location + ""/.classpath"");\r\n\t\t\t\tf.createNewFile();\r\n\t\t\t\r\n\t\t\t\tf = new File(location + ""/.properties"");\r\n\t\t\t\tf.createNewFile();\r\n\t\t\t}\r\n\t\t\tcatch (IOException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\r\n\t\t\taddToFileViewer(location);\r\n\t\t\taddToFileViewer(location + ""/bin"");\r\n\t\t\taddToFileViewer(location + ""/res"");\r\n\t\t\taddToFileViewer(location + ""/src"");\r\n\t\t\taddToFileViewer(location + ""/.classpath"");\r\n\t\t\taddToFileViewer(location + ""/.properties"");\r\n\t\t\trefreshFileViewer(location, false);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates new file and saves the old one. Switches to the new file\r\n\t * for editing automatically.\r\n\t */\r\n\tpublic void newFile()\r\n\t{\r\n\t\tcodeField.setText("""");\r\n\t\tcodeField.setLanguage(0);\r\n\t\t\r\n\t\tString location = ""Untitled"" + untitledNumber++;\r\n\t\t\r\n\t\tfileLocation = location;\r\n\t\t\r\n\t\taddTab(location, location);\r\n\t\t\r\n\t\tsetFileSaved(location, false);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new FileDialog at the absolute path of the workspace\r\n\t * location.\r\n\t * \r\n\t * @return The created, unopened FileDialog at the workspace path\r\n\t * \t\tused for opening files.\r\n\t */\r\n\tpublic FileDialog openFileBrowseDialog()\r\n\t{\r\n\t\tString location = null;\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""dialog.location""))\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""dialog.location"");\r\n\t\t\t\r\n\t\t\tif (!new File(location).exists())\r\n\t\t\t{\r\n\t\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t}\r\n\t\t\r\n\t\treturn openFileBrowseDialog(location);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiates a new FileDialog set for all types of files to be\r\n\t * set at the specified location.\r\n\t * \r\n\t * @param relativeLocation The location for the FileDialog to start.\r\n\t * @return The created, unopened FileDialog used for opening files.\r\n\t */\r\n\tpublic FileDialog openFileBrowseDialog(String location)\r\n\t{\r\n\t\tFileDialog dialog = new FileDialog(window.getShell(), SWT.OPEN | SWT.MULTI);\r\n\t\tdialog.setFilterNames(new String[] { ""All Files (*)"" });\r\n\t\tdialog.setFilterExtensions(new String[] { ""*"" });\r\n\t\tdialog.setFilterPath(location);\r\n\t\t\r\n\t\treturn dialog;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Open a file located at the specified location.\r\n\t * \r\n\t * @param location The location of the file to open.\r\n\t */\r\n\tpublic void openFile(String location) throws FileNotFoundException\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\topenFile(location, true, true);\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\tif (e instanceof FileNotFoundException)\r\n\t\t\t{\r\n\t\t\t\tthrow (FileNotFoundException)e;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that opens a file at the specified location and also\r\n\t * takes the option whether or not to cache the save the fileLocation\r\n\t * in the {@link #CONFIG_DATA} for reuse when the IDE is restarted.\r\n\t * \r\n\t * @param\tlocation The location of the file to open.\r\n\t * @param\tcache Whether or not to save the file for use after restart.\r\n\t * @param \tsetLanguage Whether or not to set the language of the codeField.\r\n\t * @throws\tFileNotFoundException Thrown if the file can not be found.\r\n\t * @throws\tIOException Thrown if there was trouble reading or writing.\r\n\t */\r\n\tpublic void openFile(String location, boolean cache, boolean setLanguage) throws FileNotFoundException, IOException\r\n\t{\r\n\t\tlocation = location.replace('\\\\', '/');\r\n\t\t\r\n\t\tboolean alreadyOpen = fileCache.containsKey(location);\r\n\t\t\r\n\t\tif (oldTabId != 0)\r\n\t\t{\r\n\t\t\ttabTopPixels.put(oldTabId, codeField.getTopPixel());\r\n\t\t\ttabSelection.put(oldTabId, codeField.getSelection());\r\n\t\t}\r\n\t\t\r\n\t\tif (alreadyOpen)\r\n\t\t{\r\n\t\t\tcodeField.setText(fileCache.get(location), true, true);\r\n\t\t\t\r\n\t\t\tcodeField.setLanguage(Language.getLanguage(location));\r\n\t\t\t\r\n\t\t\tcodeField.redraw();\r\n\t\t\t\r\n\t\t\tint tabId = tabFileIds.get(location);\r\n\t\t\t\r\n\t\t\tString oldLocation = fileLocation;\r\n\t\t\t\r\n\t\t\tfileLocation = location;\r\n\t\t\t\r\n\t\t\tfileTabs.setSelection(tabId);\r\n\t\t\t\r\n\t\t\tif (!location.equals(oldLocation))\r\n\t\t\t{\r\n\t\t\t\toldTabId = tabId;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tFile file = new File(location);\r\n\t\t\t\r\n\t\t\tif (file.isDirectory())\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tBufferedReader reader = new BufferedReader(new FileReader(file));\r\n\t\t\t\r\n\t\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\t\r\n\t\t\tString line = """";\r\n\t\t\t\r\n\t\t\twhile ((line = reader.readLine()) != null)\r\n\t\t\t{\r\n\t\t\t\tbuilder.append(line + ""\\r\\n"");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treader.close();\r\n\t\t\t\r\n\t\t\tif (builder.length() > 0)\r\n\t\t\t{\r\n\t\t\t\tbuilder.deleteCharAt(builder.length() - 1);\r\n\t\t\t\tbuilder.deleteCharAt(builder.length() - 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString fileContents = builder.toString();\r\n\t\t\t\r\n\t\t\tfileCache.put(location, fileContents);\r\n\t\t\tfileCacheSaved.put(location, true);\r\n\t\t\t\r\n\t\t\tcodeField.setText(fileContents, true);\r\n\t\t\t\r\n\t\t\tcodeField.redraw();\r\n\t\t\t\r\n\t\t\tif (!location.equals(fileLocation))\r\n\t\t\t{\r\n\t\t\t\taddTab(location, cache);\r\n\t\t\t\t\r\n\t\t\t\tif (fileLocation != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tint tabId = tabFileIds.get(location);\r\n\t\t\t\t\t\r\n\t\t\t\t\toldTabId = tabId;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileLocation = location;\r\n\t\t}\r\n\t\t\r\n\t\tif (setLanguage)\r\n\t\t{\r\n\t\t\tcodeField.setLanguage(Language.getLanguage(location));\r\n\t\t}\r\n\t\t\r\n\t\tcodeField.setFocus();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Opens a FileDialog to search for a file to open, then opens\r\n\t * the result.\r\n\t */\r\n\tpublic void openFile() throws FileNotFoundException\r\n\t{\r\n\t\tFileDialog dialog = openFileBrowseDialog();\r\n\t\t\r\n\t\tString location   = dialog.open();\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tlocation           = location.replace('\\\\', '/');\r\n\t\t\r\n\t\tString parent      = FileUtils.getParentFolder(location) + ""/"";\r\n\t\t\r\n\t\tString fileNames[] = dialog.getFileNames();\r\n\t\t\r\n\t\tfor (int i = 0; i < fileNames.length; i ++)\r\n\t\t{\r\n\t\t\topenFile(parent + fileNames[i]);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""dialog.location"", parent);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new FileDialog at the absolute path of the workspace\r\n\t * location.\r\n\t * \r\n\t * @return The created, unopened FileDialog at the workspace path\r\n\t * \t\tused for saving.\r\n\t */\r\n\tpublic FileDialog openSaveDialog()\r\n\t{\r\n\t\tString location = null;\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""dialog.location""))\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""dialog.location"");\r\n\t\t\t\r\n\t\t\tif (!new File(location).exists())\r\n\t\t\t{\r\n\t\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t}\r\n\t\t\r\n\t\treturn openSaveDialog(location);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiates a new FileDialog set for all types of files to be\r\n\t * set at the specified location.\r\n\t * \r\n\t * @param relativeLocation The location for the FileDialog to start.\r\n\t * @return The created, unopened FileDialog used for saving.\r\n\t */\r\n\tpublic FileDialog openSaveDialog(String location)\r\n\t{\r\n\t\tFileDialog dialog = new FileDialog(window.getShell(), SWT.SAVE);\r\n\t\tdialog.setFilterNames(new String[] { ""All Files (*)"" });\r\n\t\tdialog.setFilterExtensions(new String[] { ""*"" });\r\n\t\tdialog.setFilterPath(location);\r\n\t\t\r\n\t\treturn dialog;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Saves a file located at the specified location.\r\n\t * \r\n\t * @param location The location of the file to open.\r\n\t */\r\n\tpublic void saveFile(String location)\r\n\t{\r\n\t\tif (fileLocation == null && location == null)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\topenFile();\r\n\t\t\t}\r\n\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (location != null)\r\n\t\t{\r\n\t\t\tlocation = location.replace('\\\\', '/');\r\n\t\t}\r\n\t\t\r\n\t\tif (location == null || location.startsWith(""Untitled""))\r\n\t\t{\r\n\t\t\tboolean hasTab = tabFileIds.containsKey(location);\r\n\t\t\tint     tabId  = 0;\r\n\t\t\t\r\n\t\t\tif (hasTab)\r\n\t\t\t{\r\n\t\t\t\ttabId = tabFileIds.get(location);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString oldLoc = location;\r\n\t\t\t\r\n\t\t\tFileDialog dialog = openSaveDialog();\r\n\t\t\tlocation = dialog.open();\r\n\t\t\t\r\n\t\t\tif (location != null)\r\n\t\t\t{\r\n\t\t\t\tlocation = location.replace('\\\\', '/');\r\n\t\t\t\t\r\n\t\t\t\tif (hasTab)\r\n\t\t\t\t{\r\n\t\t\t\t\tString fileName = FileUtils.getFileName(location);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttabFileIds.remove(oldLoc);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfileTabs.setTabText(tabId, fileName);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttabFileIds.put(location, tabId);\r\n\t\t\t\t\ttabFileLocations.put(tabId, location);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (fileLocation == null)\r\n\t\t{\r\n\t\t\tfileLocation = """";\r\n\t\t}\r\n\t\t\r\n\t\tboolean saved\t\t= false;\r\n\t\t\r\n\t\tboolean currentFile = location.equals(fileLocation);\r\n\t\r\n\t\tif (fileCacheSaved.containsKey(fileLocation))\r\n\t\t{\r\n\t\t\tsaved = fileCacheSaved.get(fileLocation);\r\n\t\t}\r\n\t\t\r\n\t\tFileUtils.writeFile(location, codeField.getWritableText());\r\n\t\t\r\n\t\tfileLocation\t  = location;\r\n\t\t\r\n\t\tcodeField.setLanguage(Language.getLanguage(fileLocation));\r\n\t\t\r\n\t\tboolean highlight = codeField.getLanguage() == 0;\r\n\t\t//TODO: did if rog et something?\r\n//\t\tSystem.out.println(""done"");\r\n\t\tif (highlight)\r\n\t\t{\r\n\t\t\tcodeField.highlightSyntax();\r\n\t\t}\r\n//\t\tSystem.out.println(""done2"");\r\n\t\t\r\n\t\tif (currentFile)\r\n\t\t{\r\n\t\t\tsetFileSaved(location, true);\r\n\t\t}\r\n\t\t\r\n\t\tboolean isInViewer = treeItemLocations.containsKey(fileLocation);\r\n\t\t\r\n\t\tif (isInViewer)\r\n\t\t{\r\n\t\t\taddToFileViewer(location);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that adds the file at the specified location to file viewer.\r\n\t * Faster than refreshing the whole doggone file viewer.\r\n\t * \r\n\t * @param location The location of the file to add.\r\n\t */\r\n\tpublic void addToFileViewer(String location)\r\n\t{\r\n\t\tif (treeItemLocations.containsValue(location))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tFile file     = new File(location);\r\n\r\n\t\tboolean isDirectory = file.isDirectory();\r\n\t\t\r\n\t\tString name   = FileUtils.getFileName(location);\r\n\t\t\r\n\t\tImage img     = isDirectory ? folderImage : getFileImage(location);\r\n\t\t\r\n\t\tString parentLocation = FileUtils.getParentFolder(location);\r\n\t\t\r\n\t\tint parentId = 0;\r\n\t\t\r\n\t\tif (parentLocation.equals(CONFIG_DATA.get(""workspace.location"")))\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tparentId = treeItemIds.get(parentLocation);\r\n\t\t}\r\n\t\t\r\n\t\tint id        = treeMenu.addItem(parentId, name, img);\r\n\t\t\r\n\t\tif (fileCacheSaved.containsKey(location))\r\n\t\t{\r\n\t\t\tfileCacheSaved.put(location, true);\r\n\t\t}\r\n\r\n\t\ttreeItemLocations.put(id, location);\r\n\t\ttreeItemIds.put(location, id);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to remove the file at the specified location from the file\r\n\t * viewer. Faster than refreshing the whole doggone file viewer.\r\n\t * \r\n\t * @param location The location of the file to remove.\r\n\t */\r\n\tpublic void removeFromFileViewer(String location)\r\n\t{\r\n\t\tint id = treeItemIds.get(location);\r\n\t\t\r\n\t\ttreeItemDirectories.remove(id);\r\n\t\ttreeItemIds.remove(location);\r\n\t\ttreeItemLocations.remove(id);\r\n\t\t\r\n\t\tif (treeMenu.containsItem(id))\r\n\t\t{\r\n\t\t\ttreeMenu.removeItem(id);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Refresh the file viewer to all of the updated file names.\r\n\t * If a file has been added, add it to the\r\n\t * {@link #treeMenu file viewer}.\r\n\t * \r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(boolean ignoreRemove)\r\n\t{\r\n\t\trefreshFileViewer(CONFIG_DATA.get(""workspace.location""), 0, ignoreRemove);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to refresh the files within the directory of the specified\r\n\t * location.\r\n\t * \r\n\t * @param location The location of the root directory to refresh.\r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(String location, boolean ignoreRemove)\r\n\t{\r\n\t\tint parentId = treeItemIds.get(location);\r\n\t\t\r\n\t\trefreshFileViewer(location, parentId, ignoreRemove);\r\n\t}\r\n\r\n\t/**\r\n\t * Method to refresh the files within the directory of the specified\r\n\t * location.\r\n\t * \r\n\t * @param location The location of the root directory to refresh.\r\n\t * @param parentId The id of the TreeMenu item to refresh.\r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(final String location, final int parentId, final boolean ignoreRemove)\r\n\t{\r\n\t\tThread refreshThread = new Thread()\r\n\t\t{\r\n\t\t\tpublic void run()\r\n\t\t\t{\r\n\t\t\t\tFile parent  = new File(location);\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tfindSubFiles(parent, parentId, true);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (IOException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\texit(window);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tString locations[] = treeItemLocations.values().toArray(new String[0]);\r\n\t\t\t\t\r\n\t\t\t\tif (!ignoreRemove)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (int i = 0; i < locations.length; i ++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile file = new File(locations[i]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (!file.exists())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfinal int id = treeItemIds.get(locations[i]);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\ttreeItemIds.remove(locations[i]);\r\n\t\t\t\t\t\t\ttreeItemLocations.remove(id);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (treeMenu.containsItem(id))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ttreeMenu.removeItem(id);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ttreeMenu.alphabetize();\r\n\t\t\t\t\r\n\t\t\t\tfileViewerThreads.remove(this);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tfileViewerThreads.add(refreshThread);\r\n\t\t\r\n\t\trefreshThread.start();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Finds the sub-files of a directory and if they have not been\r\n\t * added, add them to the TreeMenu.\r\n\t * \r\n\t * @param file The directory to search sub-files for.\r\n\t * @param parent The id of the directory TreeMenu item.\r\n\t * @throws IOException \r\n\t */\r\n\tprivate void findSubFiles(File file, final int parent, boolean ignoreRemove) throws IOException\r\n\t{\r\n\t\tif (exiting)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tFile subFiles[] = file.listFiles();\r\n\t\t\r\n\t\tif (subFiles != null)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < subFiles.length; i ++)\r\n\t\t\t{\r\n\t\t\t\tboolean isDirectory = subFiles[i].isDirectory();\r\n\t\t\t\t\r\n\t\t\t\tfinal String orig          = subFiles[i].getCanonicalPath().replace('\\\\', '/');\r\n\t\t\t\tfinal String name          = FileUtils.getFileName(orig);\r\n\t\t\t\t\r\n\t\t\t\tif (name.charAt(0) == '.')\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n//\t\t\t\tString location      = orig;//orig.toLowerCase();\r\n\t\t\t\t\r\n\t\t\t\tint id               = 0;\r\n\t\t\t\t\r\n\t\t\t\tfinal Image img            = isDirectory ? folderImage : getFileImage(orig);\r\n\t\t\t\t\r\n\t\t\t\tboolean alreadyAdded = treeItemIds.containsKey(orig);\r\n\t\t\t\t\r\n\t\t\t\tif (!ignoreRemove)\r\n\t\t\t\t{\r\n\t\t\t\t\talreadyAdded = true;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (treeItemLocations.containsValue(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurId = treeItemIds.get(orig);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tid = curId;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (isDirectory)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfindSubFiles(subFiles[i], id, ignoreRemove);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Set text correctly of renamed files.\r\n\t\t\t\t\telse if (treeItemLocations.containsValue(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid = treeItemIds.get(orig);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttreeMenu.setTreeItemText(id, name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\talreadyAdded = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (!alreadyAdded)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (exiting)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurId = treeMenu.addItem(parent, name, img);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tid = curId;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (isDirectory)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfindSubFiles(subFiles[i], id, ignoreRemove);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttreeItemDirectories.put(id, orig);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (fileCacheSaved.containsKey(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfileCacheSaved.put(orig, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\ttreeItemLocations.put(id, orig);\r\n\t\t\t\t\ttreeItemIds.put(orig, id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that occurs whenever the content\r\n\t * of a TextField is changed. In this case it tells you that\r\n\t * the current file has been changed and needs to be saved.\r\n\t */\r\n\tpublic void contentChanged(ContentEvent event)\r\n\t{\r\n\t\tObject source = event.getSource();\r\n\t\t\r\n\t\tif (source == codeField)\r\n\t\t{\r\n\t\t\tif (fileLocation != null)\r\n\t\t\t{\r\n\t\t\t\tsetFileSaved(fileLocation, false);\r\n\t\t\t\t\r\n\t\t\t\tfinal String code = codeField.getText();\r\n\t\t\t\t\r\n\t\t\t\tnew Thread()\r\n\t\t\t\t{\r\n\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcodeField.clearErrors();\r\n\t\t\t\t\t\tfinal String outputLocation = FileUtils.getParentFolder(fileLocation) + ""/"";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\ttry\r\n//\t\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\t\tconsoleField.setText("""");\r\n//\t\t\t\t\t\t\t\t\t\r\n//\t\t\t\t\t\t\t\t\tLanguage.compile(fileLocation, codeField.getRawText(), outputLocation, consoleStream);\r\n//\t\t\t\t\t\t\t\t}\r\n//\t\t\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n//\t\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n//\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tLanguage.compile(fileLocation, code, outputLocation, null);\r\n\t\t\t\t\t}\r\n\t\t\t\t}.start();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Return the Image associated with the type of file given through\r\n\t * the location parameter.\r\n\t * \r\n\t * @param location The location of the file.\r\n\t * @return The Image associated with the file.\r\n\t */\r\n\tprivate Image getFileImage(String location)\r\n\t{\r\n\t\tImage img = null;\r\n\t\t\r\n\t\tint fileType = FileUtils.getFileType(location);\r\n\t\t\r\n\t\tif (fileType == FileUtils.JAVA)\r\n\t\t{\r\n\t\t\timg = javaFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.CLASS)\r\n\t\t{\r\n\t\t\timg = classFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.GLSL)\r\n\t\t{\r\n\t\t\timg = glslFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.TXT)\r\n\t\t{\r\n\t\t\timg = txtFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.RTF)\r\n\t\t{\r\n\t\t\timg = rtfFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.EXE)\r\n\t\t{\r\n\t\t\timg = exeFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.ASSEMBLY)\r\n\t\t{\r\n\t\t\timg = asmFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.CPP)\r\n\t\t{\r\n\t\t\timg = cppFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.H)\r\n\t\t{\r\n\t\t\timg = hFileImage;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\timg = fileImage;\r\n\t\t}\r\n\t\t\r\n\t\treturn img;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks whether the text returned from the codeField is null, or\r\n\t * if it is an empty String.\r\n\t * \r\n\t * @return Whether the codeField is empty.\r\n\t */\r\n\tpublic boolean isCodeFieldEmpty()\r\n\t{\r\n\t\tString text = codeField.getText();\r\n\t\t\r\n\t\treturn text == null || text.equals("""");\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set the tab and TreeMenu item associated with the file\r\n\t * location to start with a '*' depending if the file is\r\n\t * saved or not.\r\n\t * \r\n\t * @param location The location of the file to set as saved or not.\r\n\t * @param saved Whether the file is saved or not.\r\n\t */\r\n\tpublic void setFileSaved(String location, boolean saved)\r\n\t{\r\n\t\tString locKey\t= location;\r\n\t\t\r\n\t\tString text\t\t= null;\r\n\t\t\r\n\t\tint id\t\t\t= 0;\r\n\t\t\r\n\t\tif (saved)\r\n\t\t{\r\n\t\t\tif (treeItemIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tid = treeItemIds.get(locKey);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (tabFileIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tint tabId\t= tabFileIds.get(locKey);\r\n\t\t\t\t\r\n\t\t\t\ttext\t\t= fileTabs.getTabText(tabId);\r\n\t\t\t}\r\n\t\t\telse if (treeItemLocations.containsValue(locKey))\r\n\t\t\t{\r\n\t\t\t\ttext = treeMenu.getTreeItemText(id);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (text != null && text.startsWith(""*""))\r\n\t\t\t{\r\n\t\t\t\ttext = text.substring(1);\r\n\t\t\t\r\n\t\t\t\tif (treeItemLocations.containsValue(locKey))\r\n\t\t\t\t{\r\n\t\t\t\t\ttreeMenu.setTreeItemText(id, text);\r\n\t\t\t\t}\r\n\t\t\t\tif (tabFileIds.containsKey(locKey))\r\n\t\t\t\t{\r\n\t\t\t\t\tfileTabs.setTabText(tabFileIds.get(locKey), text);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileCacheSaved.put(locKey, true);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tint tabId = tabFileIds.get(locKey);\r\n\t\t\t\r\n\t\t\ttext = fileTabs.getTabText(tabId);\r\n\t\t\t\r\n\t\t\tif (!text.startsWith(""*""))\r\n\t\t\t{\r\n\t\t\t\ttext = ""*"" + text;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (treeItemIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tid = treeItemIds.get(locKey);\r\n\t\t\t\ttreeMenu.setTreeItemText(id, text);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileTabs.setTabText(tabId, text);\r\n\t\t\t\r\n\t\t\tfileCacheSaved.put(locKey, false);\r\n\t\t\t\r\n\t\t\tString fileContents = codeField.getText();\r\n\t\t\t\r\n\t\t\tfileCache.put(locKey, fileContents);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to remove all of the TreeMenu items and clear the\r\n\t * HashMaps.\r\n\t */\r\n\tpublic void removeAllTreeItems()\r\n\t{\r\n\t\ttreeMenu.removeAllItems();\r\n\t\t\r\n\t\ttreeItemLocations.clear();\r\n\t\ttreeItemIds.clear();\r\n\t\ttreeItemDirectories.clear();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add a tab of the file at fileLocation to the TabMenu.\r\n\t * \r\n\t * @param fileLocation The location of the file to represent.\r\n\t */\r\n\tprivate void addTab(String fileLocation)\r\n\t{\r\n\t\taddTab(fileLocation, true);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to add a tab at the specified location.\r\n\t * \r\n\t * @param fileLocation The location of the file that was opened.\r\n\t * @param cache Whether or not to save the tab for later use after\r\n\t * \t\trestart.\r\n\t */\r\n\tprivate void addTab(String fileLocation, boolean cache)\r\n\t{\r\n\t\tString fileName = FileUtils.getFileName(fileLocation);\r\n\t\t\r\n\t\taddTab(fileName, fileLocation, cache);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add a tab of the file with the fileName and location to the TabMenu.\r\n\t * \r\n\t * @param fileName The name of the file to represent.\r\n\t * @param location The location, including the fileName, of the file.\r\n\t */\r\n\tprivate void addTab(String fileName, String location)\r\n\t{\r\n\t\taddTab(fileName, location, true);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to add a tab at the specified location with the tab labeled\r\n\t * with the fileName param.\r\n\t * \r\n\t * @param fileName The String to label the tab with.\r\n\t * @param location The location of the file that was opened.\r\n\t * @param cache Whether or not to save the tab for later use after\r\n\t * \t\trestart.\r\n\t */\r\n\tprivate void addTab(String fileName, final String location, boolean cache)\r\n\t{\r\n\t\tint id = fileTabs.addTab(fileName);\r\n\t\t\r\n\t\tif (oldTabId == 0)\r\n\t\t{\r\n\t\t\toldTabId = id;\r\n\t\t}\r\n\t\t\r\n\t\ttabTopPixels.put(id, 0);\r\n\t\ttabSelection.put(id, new Point(0, 0));\r\n\t\t\r\n\t\ttabFileLocations.put(id, location);\r\n\t\ttabFileIds.put(location, id);\r\n\t\t\r\n\t\tif (cache)\r\n\t\t{\r\n\t\t\tnew Thread()\r\n\t\t\t{\r\n\t\t\t\tpublic void run()\r\n\t\t\t\t{\r\n\t\t\t\t\tappendConfigDataValue(""last.tabs"", location + "";"");\r\n\t\t\t\t}\r\n\t\t\t}.start();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a tab's close icon\r\n\t * is pressed. If the file in the tab is not saved, ask whether to\r\n\t * save it or not.\r\n\t * \r\n\t * @param event The TabMenuEvent sent with the tab close.\r\n\t * @return Whether to close the tab or not.\r\n\t */\r\n\tpublic boolean tabClosing(TabMenuEvent event)\r\n\t{\r\n\t\tint tabId       = event.getTabId();\r\n\t\t\r\n\t\tboolean cancel = false;\r\n\t\t\r\n\t\tif (event.getSource() == fileTabs)\r\n\t\t{\r\n\t\t\tint newId\t\t= fileTabs.getSelected();\r\n\t\t\t\r\n\t\t\tString location = tabFileLocations.get(tabId);\r\n\t\t\tString result\t= null;\r\n\t\r\n\t\t\tboolean askSave\t= false;\r\n\t\t\t\r\n\t\t\tif (fileCacheSaved.containsKey(location))\r\n\t\t\t{\r\n\t\t\t\tif (!fileCacheSaved.get(location))\r\n\t\t\t\t{\r\n\t\t\t\t\taskSave = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif (!isCodeFieldEmpty())\r\n\t\t\t\t{\r\n\t\t\t\t\taskSave = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (askSave)\r\n\t\t\t{\r\n\t\t\t\tOptionDialog saveDialog = new OptionDialog(""Save?"", ""\\"""" + FileUtils.getFileName(location) + ""\\"" has not been saved, would you like to save it?"");\r\n\t\t\t\t\r\n\t\t\t\tresult = saveDialog.open();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!askSave || (result != null && (result.equals(""yes"") || result.equals(""no""))))\r\n\t\t\t{\r\n\t\t\t\tString files = CONFIG_DATA.get(""last.tabs"").replace((tabFileLocations.get(tabId) + ';'), """");\r\n\t\t\t\tsetConfigDataValue(""last.tabs"", files);\r\n\t\t\t\t\r\n\t\t\t\ttabFileLocations.remove(tabId);\r\n\t\t\t\ttabFileIds.remove(location);\r\n\t\t\t\ttabTopPixels.remove(tabId);\r\n\t\t\t\ttabSelection.remove(tabId);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (result != null)\r\n\t\t\t{\r\n\t\t\t\tif (result.equals(""yes""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(location);\r\n\t\t\t\t}\r\n\t\t\t\telse if (result.equals(""no""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsetFileSaved(location, true);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tcancel = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcancel = askSave;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (cancel)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfileCache.remove(location);\r\n\t\t\t\tfileCacheSaved.remove(location);\r\n\t\t\t\t\r\n\t\t\t\tif (tabId == oldTabId)\r\n\t\t\t\t{\r\n\t\t\t\t\toldTabId = newId;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (tabId != newId)\r\n\t\t\t\t{\r\n\t\t\t\t\tString loc = tabFileLocations.get(newId);\r\n\t\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile(loc);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfileLocation = null;\r\n\t\t\t\t\tcodeField.setText("""");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (event.getSource() == consoleTabs)\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn !cancel;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a tab is selected\r\n\t * in a TabMenu. It then opens the file.\r\n\t * \r\n\t * @param event The TabMenuEvent sent with the tab select.\r\n\t */\r\n\tpublic void tabSelected(TabMenuEvent event)\r\n\t{\r\n\t\tint tabId = event.getTabId();\r\n\t\t\r\n\t\tif (event.getSource() == fileTabs)\r\n\t\t{\r\n\t\t\tString location = tabFileLocations.get(tabId);\r\n\t\t\t\r\n\t\t\tif (location.equals(fileLocation))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (location != null)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\topenFile(location);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tcodeField.setSelection(tabSelection.get(tabId));\r\n\t\t\t\tcodeField.setTopPixel(tabTopPixels.get(tabId));\r\n\t\t\t\tcodeField.select();\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (event.getSource() == consoleTabs)\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a key is pressed\r\n\t * in a TextField.\r\n\t * \r\n\t * @param e The CodeFieldEvent that was passed.\r\n\t */\r\n\tpublic void keyPressed(CodeFieldEvent e)\r\n\t{\r\n\t\tif (e.getSource() == codeField)\r\n\t\t{\r\n\t\t\tif (e.getStateMask() == (Integer)PROPERTIES.get(""key.control"") && e.getKeyCode() == 's')\r\n\t\t\t{\r\n\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that deletes the file at the specified location.\r\n\t * \r\n\t * @param location The location of the file to be deleted.\r\n\t * @return Whether the file was successfully deleted or not.\r\n\t */\r\n\tpublic boolean deleteFile(String location)\r\n\t{\r\n\t\tint treeId    = treeItemIds.get(location);\r\n\t\t\r\n\t\ttreeItemLocations.remove(treeId);\r\n\t\ttreeItemDirectories.remove(treeId);\r\n\t\tfileCache.remove(location);\r\n\t\tfileCacheSaved.remove(location);\r\n\t\t\r\n\t\ttreeMenu.removeItem(treeId);\r\n\t\t\r\n\t\tboolean deleted = FileUtils.delete(new File(location));\r\n\t\t\r\n\t\treturn deleted;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to synchronistically update the components of the main\r\n\t * window.\r\n\t */\r\n\tpublic void update()\r\n\t{\r\n\t\t\r\n\t}\r\n}\r\n----------------------------------- SOURCE END -------------------------------------",1364132439217
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1364132439218
error,log,,,"Error in JDT Core during AST creation",1364132439218
executed,command,org.eclipse.ui.workbench.texteditor,3.7.0.v20110928-1504,"org.eclipse.ui.edit.text.toggleOverwrite",1364132440169
executed,command,org.eclipse.ui.workbench.texteditor,3.7.0.v20110928-1504,"org.eclipse.ui.edit.text.toggleOverwrite",1364132440744
error,log,,,"Exception occurred during compilation unit conversion:\r\n----------------------------------- SOURCE BEGIN -------------------------------------\r\npackage net.foxycorndog.arrowide;\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.awt.TextField;\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\nimport java.io.PrintStream;\r\nimport java.net.URLDecoder;\r\n\r\nimport net.foxycorndog.arrowide.color.ColorUtils;\r\nimport net.foxycorndog.arrowide.components.CodeField;\r\nimport net.foxycorndog.arrowide.components.CodeFieldEvent;\r\nimport net.foxycorndog.arrowide.components.CodeFieldListener;\r\nimport net.foxycorndog.arrowide.components.CompositeSizer;\r\nimport net.foxycorndog.arrowide.components.ConsoleField;\r\nimport net.foxycorndog.arrowide.components.ContentEvent;\r\nimport net.foxycorndog.arrowide.components.ContentListener;\r\nimport net.foxycorndog.arrowide.components.SizerListener;\r\nimport net.foxycorndog.arrowide.components.SplashScreen;\r\nimport net.foxycorndog.arrowide.components.TitleBar;\r\nimport net.foxycorndog.arrowide.components.menubar.Menubar;\r\nimport net.foxycorndog.arrowide.components.menubar.MenubarListener;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenu;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenuEvent;\r\nimport net.foxycorndog.arrowide.components.tabmenu.TabMenuListener;\r\nimport net.foxycorndog.arrowide.components.toolbar.Toolbar;\r\nimport net.foxycorndog.arrowide.components.toolbar.ToolbarListener;\r\nimport net.foxycorndog.arrowide.components.treemenu.TreeMenu;\r\nimport net.foxycorndog.arrowide.components.treemenu.TreeMenuListener;\r\nimport net.foxycorndog.arrowide.components.window.Window;\r\nimport net.foxycorndog.arrowide.console.ConsoleListener;\r\nimport net.foxycorndog.arrowide.console.ConsoleStream;\r\nimport net.foxycorndog.arrowide.dialog.Dialog;\r\nimport net.foxycorndog.arrowide.dialog.DialogFilter;\r\nimport net.foxycorndog.arrowide.dialog.FileBrowseDialog;\r\nimport net.foxycorndog.arrowide.dialog.FileInputDialog;\r\nimport net.foxycorndog.arrowide.dialog.OptionDialog;\r\nimport net.foxycorndog.arrowide.dialog.PreferencesDialog;\r\nimport net.foxycorndog.arrowide.dialog.DialogPanel;\r\nimport net.foxycorndog.arrowide.dialog.PropertiesDialog;\r\nimport net.foxycorndog.arrowide.dialog.TextInputDialog;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.AssemblyPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.CppPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.GeneralPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.JavaPanel;\r\nimport net.foxycorndog.arrowide.dialog.preferencesdialogpanel.PythonPanel;\r\nimport net.foxycorndog.arrowide.file.ConfigReader;\r\nimport net.foxycorndog.arrowide.file.FileUtils;\r\nimport net.foxycorndog.arrowide.formatter.Formatter;\r\nimport net.foxycorndog.arrowide.language.CompilerListener;\r\nimport net.foxycorndog.arrowide.language.Keyword;\r\nimport net.foxycorndog.arrowide.language.Language;\r\nimport net.foxycorndog.arrowide.language.CompileOutput;\r\nimport net.foxycorndog.arrowide.language.java.JavaLanguage;\r\nimport net.foxycorndog.arrowide.printer.TextPrinter;\r\nimport net.foxycorndog.arrowide.xml.Reader;\r\nimport net.foxycorndog.arrowide.xml.XMLItem;\r\n\r\nimport org.eclipse.swt.SWT;\r\nimport org.eclipse.swt.events.ControlEvent;\r\nimport org.eclipse.swt.events.ControlListener;\r\nimport org.eclipse.swt.events.DisposeEvent;\r\nimport org.eclipse.swt.events.DisposeListener;\r\nimport org.eclipse.swt.events.KeyEvent;\r\nimport org.eclipse.swt.events.KeyListener;\r\nimport org.eclipse.swt.events.MouseEvent;\r\nimport org.eclipse.swt.events.MouseListener;\r\nimport org.eclipse.swt.events.MouseMoveListener;\r\nimport org.eclipse.swt.events.PaintEvent;\r\nimport org.eclipse.swt.events.PaintListener;\r\nimport org.eclipse.swt.events.SelectionEvent;\r\nimport org.eclipse.swt.events.SelectionListener;\r\nimport org.eclipse.swt.graphics.Color;\r\nimport org.eclipse.swt.graphics.Font;\r\nimport org.eclipse.swt.graphics.FontData;\r\nimport org.eclipse.swt.graphics.GC;\r\nimport org.eclipse.swt.graphics.Image;\r\nimport org.eclipse.swt.graphics.Point;\r\nimport org.eclipse.swt.graphics.Rectangle;\r\nimport org.eclipse.swt.layout.FillLayout;\r\nimport org.eclipse.swt.layout.GridData;\r\nimport org.eclipse.swt.layout.GridLayout;\r\nimport org.eclipse.swt.opengl.GLCanvas;\r\nimport org.eclipse.swt.opengl.GLData;\r\nimport org.eclipse.swt.printing.PrintDialog;\r\nimport org.eclipse.swt.printing.Printer;\r\nimport org.eclipse.swt.printing.PrinterData;\r\nimport org.eclipse.swt.widgets.Button;\r\nimport org.eclipse.swt.widgets.Composite;\r\nimport org.eclipse.swt.widgets.DirectoryDialog;\r\nimport org.eclipse.swt.widgets.Display;\r\nimport org.eclipse.swt.widgets.Event;\r\nimport org.eclipse.swt.widgets.FileDialog;\r\nimport org.eclipse.swt.widgets.Label;\r\nimport org.eclipse.swt.widgets.Listener;\r\nimport org.eclipse.swt.widgets.Menu;\r\nimport org.eclipse.swt.widgets.MenuItem;\r\nimport org.eclipse.swt.widgets.Monitor;\r\nimport org.eclipse.swt.widgets.Shell;\r\nimport org.eclipse.swt.widgets.TabFolder;\r\nimport org.eclipse.swt.widgets.TabItem;\r\nimport org.eclipse.swt.widgets.Text;\r\nimport org.eclipse.swt.widgets.Widget;\r\nimport org.lwjgl.LWJGLException;\r\nimport org.lwjgl.Sys;\r\nimport org.lwjgl.opengl.GLContext;\r\n\r\n/**\r\n * Main class for the ArrowIDE program.\r\n * \r\n * @author\tBraden Steffaniak\r\n * @since\tFeb 13, 2013 at 4:46:00 PM\r\n * @since\tv0.7\r\n * @version\tFeb 13, 2013 at 4:46:00 PM\r\n * @version\tv0.7\r\n */\r\npublic class ArrowIDE implements ContentListener, CodeFieldListener, TabMenuListener\r\n{\r\n\tprivate boolean\t\t\t\t\t\t\t\tfilesNeedRefresh;\r\n\tprivate boolean\t\t\t\t\t\t\t\tcustom;\r\n\t\r\n\tprivate int\t\t\t\t\t\t\t\t\tcurId;\r\n\tprivate int\t\t\t\t\t\t\t\t\ttitleBarHeight;\r\n\tprivate int\t\t\t\t\t\t\t\t\toldTabId;\r\n\r\n\tprivate CodeField\t\t\t\t\t\t\tcodeField;\r\n\r\n\tprivate ConsoleField\t\t\t\t\t\tconsoleField;\r\n\r\n\tprivate String\t\t\t\t\t\t\t\tfileLocation;\r\n\r\n\tprivate Image\t\t\t\t\t\t\t\tfolderImage, fileImage,\r\n\t\t\tjavaFileImage, classFileImage, glslFileImage, txtFileImage,\r\n\t\t\trtfFileImage, exeFileImage, asmFileImage, cppFileImage, hFileImage;\r\n\r\n\tprivate PropertiesDialog\t\t\t\t\tproperties;\r\n\tprivate PreferencesDialog\t\t\t\t\tpreferences;\r\n\r\n\tprivate Composite\t\t\t\t\t\t\tcontentPanel;\r\n\t\r\n\tprivate Menubar\t\t\t\t\t\t\t\tmenubar;\r\n\r\n\tprivate TitleBar\t\t\t\t\t\t\ttitleBar;\r\n\t\r\n\tprivate Toolbar\t\t\t\t\t\t\t\ttoolbar;\r\n\r\n\tprivate TreeMenu\t\t\t\t\t\t\ttreeMenu;\r\n\t\r\n\tprivate CompositeSizer\t\t\t\t\t\ttreeMenuSizer, codeFieldSizer;\r\n\r\n\tprivate TabMenu\t\t\t\t\t\t\t\tfileTabs, consoleTabs;\r\n\r\n\tprivate ConsoleStream\t\t\t\t\t\tconsoleStream;\r\n\r\n\tprivate Dialog\t\t\t\t\t\t\t\tnewFolderDialog, newFileDialog,\r\n\t\t\tnewProjectDialog;\r\n\tprivate TextInputDialog\t\t\t\t\t\trenameFileDialog;\r\n\r\n\tprivate HashMap<Integer, String>\t\t\ttreeItemLocations;\r\n\tprivate HashMap<String, Integer>\t\t\ttreeItemIds;\r\n\tprivate HashMap<Integer, String>\t\t\ttreeItemDirectories;\r\n\tprivate HashMap<String, String>\t\t\t\tfileCache;\r\n\tprivate HashMap<String, Boolean>\t\t\tfileCacheSaved;\r\n\tprivate HashMap<Integer, String>\t\t\ttabFileLocations;\r\n\tprivate HashMap<String, Integer>\t\t\ttabFileIds;\r\n\tprivate HashMap<Integer, Integer>\t\t\ttabTopPixels;\r\n\tprivate HashMap<Integer, Point>\t\t\t\ttabSelection;\r\n//\tprivate HashMap<, Integer>\t\t\t\t\tconsoleTabIds;\r\n\tprivate HashMap<Integer, Program>\t\t\t\t\tconsoleTabPrograms;\r\n\t\r\n\tprivate ArrayList<Program>\t\t\t\t\tprograms;\r\n\r\n\tprivate static boolean\t\t\t\t\t\trestarting;\r\n\tprivate static boolean\t\t\t\t\t\texiting;\r\n\t\r\n\tprivate static int\t\t\t\t\t\t\tuntitledNumber;\r\n\t\r\n\tprivate static Window\t\t\t\t\t\twindow;\r\n\t\r\n\tprivate static SplashScreen\t\t\t\t\tsplash;\r\n\r\n\tprivate static String\t\t\t\t\t\tconfigLocation;\r\n\r\n\tpublic static final Display\t\t\t\t\tDISPLAY;\r\n\r\n\tpublic static final Color\t\t\t\t\tTITLE_BAR_BACKGROUND, TITLE_BAR_FOREGROUND, FOCUS_COLOR, NON_FOCUS_COLOR;\r\n\t\r\n\tpublic static final HashMap<String, String>\tCONFIG_DATA;\r\n\t\r\n\tpublic static final HashMap<String, HashMap<String, XMLItem[]>>\tPROJECT_PROPERTIES;\r\n\tpublic static final HashMap<String, HashMap<String, XMLItem[]>>\tPROJECT_CLASSPATHS;\r\n\t// public static final HashMap<Integer, String> CONFIG_LINE_NUMBER_DATA;\r\n\t// public static final HashMap<String, Integer> CONFIG_LINE_NUMBERS;\r\n\r\n\tpublic static final HashMap<String, Object>\tPROPERTIES;\r\n\t\r\n\tprivate static ArrayList<Thread>\t\t\tfileViewerThreads;\r\n\t\r\n\tprivate class Efficient\r\n\t{\r\n\t\tprivate int i;\r\n\t\t\r\n\t\tprivate String s;\r\n\t\t\r\n\t\tpublic Efficient(String s, int i)\r\n\t\t{\r\n\t\t\tthis.s = s;\r\n\t\t\tthis.i = i;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiate the {@link #DISPLAY display}, and the color palette.\r\n\t */\r\n\tstatic\r\n\t{\r\n\t\tDISPLAY = new Display();\r\n\t\t\r\n\t\tTITLE_BAR_BACKGROUND = new Color(DISPLAY, 240, 240, 240);\r\n\t\tTITLE_BAR_FOREGROUND = TITLE_BAR_BACKGROUND;\r\n\t\t\r\n\t\tFOCUS_COLOR = new Color(DISPLAY, 255, 255, 255);\r\n\t\tNON_FOCUS_COLOR = ColorUtils.lighten(TITLE_BAR_BACKGROUND, 10);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize the CONFIG_DATA HashMaps and set the os properties\r\n\t * in the PROPERTIES HashMap.\r\n\t */\r\n\tstatic\r\n\t{\r\n\t\tCONFIG_DATA             = new HashMap<String, String>();\r\n\t\t\r\n\t\tPROJECT_PROPERTIES      = new HashMap<String, HashMap<String, XMLItem[]>>();\r\n\t\tPROJECT_CLASSPATHS      = new HashMap<String, HashMap<String, XMLItem[]>>();\r\n//\t\tCONFIG_LINE_NUMBER_DATA = new HashMap<Integer, String>();\r\n//\t\tCONFIG_LINE_NUMBERS     = new HashMap<String, Integer>();\r\n\t\t\r\n\t\tPROPERTIES              = new HashMap<String, Object>();\r\n\t\t\r\n\t\tString osName = System.getProperty(""os.name"");\r\n\t\t\r\n\t\tif (osName.toLowerCase().contains(""mac""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""macosx"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.BORDER);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.COMMAND);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", """");\r\n\t\t\tPROPERTIES.put(""colon"", ';');\r\n\t\t}\r\n\t\telse if (osName.toLowerCase().contains(""win""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""windows"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.NONE);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.CTRL);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", "".exe"");\r\n\t\t\tPROPERTIES.put(""colon"", ';');\r\n\t\t}\r\n\t\telse if (osName.toLowerCase().contains(""lin""))\r\n\t\t{\r\n\t\t\tPROPERTIES.put(""os.name"", ""linux"");\r\n\t\t\tPROPERTIES.put(""composite.modifiers"", SWT.NONE);\r\n\t\t\tPROPERTIES.put(""key.control"", SWT.CTRL);\r\n\t\t\tPROPERTIES.put(""os.executable.extension"", """");\r\n\t\t\tPROPERTIES.put(""colon"", ':');\r\n\t\t}\r\n\t\t\r\n\t\tsetArchitecture();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set the os.arch value for the {@link #PROPERTIES} variable.\r\n\t */\r\n\tprivate static void setArchitecture()\r\n\t{\r\n\t\tint bitness = 32;\r\n\t\t\r\n\t\tProcessBuilder b = new ProcessBuilder(new String[] { ""res/bitness"" });\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tProcess p = b.start();\r\n\t\t\t\r\n\t\t\tInputStream in = p.getInputStream();\r\n\t\t\t\r\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(in));\r\n\t\t\t\r\n\t\t\tString line = null;\r\n\t\t\t\r\n\t\t\twhile ((line = reader.readLine()) != null)\r\n\t\t\t{\r\n\t\t\t\tbitness = Integer.valueOf(line);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tPROPERTIES.put(""os.arch"", bitness);\r\n\t}\r\n\t\r\n\t/**\r\n\t * The initial starting point of the program. It is only called\r\n\t * whenever the program is started from scratch without a restart.\r\n\t * \r\n\t * @param args The command line arguments. (Unused)\r\n\t */\r\n\tpublic static void main(String args[])\r\n\t{\r\n\t\tstart();\r\n\t}\r\n\t\r\n\t/**\r\n\t * The constructor for this class. Initializes the window that is\r\n\t * used for programming.\r\n\t * \r\n\t * @param display The display to use.\r\n\t */\r\n\tpublic ArrowIDE(final Display display)\r\n\t{\r\n//\t\tSystem.out.println(map.get(""Contacts.Contact.ContactId"")[0].getContents());\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""window.custom""))\r\n\t\t{\r\n\t\t\tcustom = Boolean.valueOf(CONFIG_DATA.get(""window.custom""));\r\n\t\t}\r\n\t\t\r\n\t\tMonitor monitor = DISPLAY.getPrimaryMonitor();\r\n\t\tfinal Rectangle screenBounds = monitor.getBounds();\r\n\t\t\r\n\t\tint height = (int)(monitor.getBounds().height / 1.5f);\r\n\t\tint width  = (int)(monitor.getBounds().width / 1.5f);\r\n\t\t\r\n\t\twindow = new Window(DISPLAY, custom);//, SWT.SHELL_TRIM & (~SWT.RESIZE));\r\n\t\twindow.setSize(width, height);\r\n\t\t\r\n\t\tfinal Rectangle shellBounds = window.getBounds();\r\n\t\t \r\n\t\twindow.setLocation(screenBounds.width / 2 - shellBounds.width / 2, screenBounds.height / 2 - shellBounds.height / 2);\r\n\t\twindow.setTitle(""Arrow IDE"");\r\n\t\t\r\n\t\tPROPERTIES.put(""arrowide.location"", FileUtils.getParentFolder(configLocation));\r\n\t\t\r\n\t\t/**\r\n\t\t * Set up the OpenGL (lwjgl) capabilities for the program.\r\n\t\t */\r\n\t\t{\r\n\t\t\tSystem.setProperty(""org.lwjgl.librarypath"", PROPERTIES.get(""arrowide.location"") + ""/res/native/"" + PROPERTIES.get(""os.name"") + ""/"");\r\n\t\t\t\r\n\t\t\tComposite comp = new Composite(window.getShell(), SWT.NONE);\r\n\t\t\tcomp.setLayout(new FillLayout());\r\n\t\t\t\r\n\t\t\tGLData data = new GLData();\r\n\t\t\tdata.doubleBuffer = true;\r\n\t\t\tfinal GLCanvas canvas = new GLCanvas(comp, SWT.NONE, data);\r\n\t\t\t\r\n\t\t\tcanvas.setCurrent();\r\n\t\t\t\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tGLContext.useContext(canvas);\r\n\t\t\t}\r\n\t\t\tcatch(LWJGLException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""monitor.width"") && CONFIG_DATA.containsKey(""monitor.height""))\r\n\t\t{\r\n\t\t\twidth  = Integer.parseInt(CONFIG_DATA.get(""monitor.width""));\r\n\t\t\theight = Integer.parseInt(CONFIG_DATA.get(""monitor.height""));\r\n\t\t\t\r\n\t\t\tif (width == screenBounds.width && height == screenBounds.height)\r\n\t\t\t{\r\n\t\t\t\tif (CONFIG_DATA.containsKey(""window.width"") && CONFIG_DATA.containsKey(""window.height""))\r\n\t\t\t\t{\r\n\t\t\t\t\twidth  = Integer.parseInt(CONFIG_DATA.get(""window.width""));\r\n\t\t\t\t\theight = Integer.parseInt(CONFIG_DATA.get(""window.height""));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (width > 0 && height > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twindow.setSize(width, height);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (CONFIG_DATA.containsKey(""window.x"") && CONFIG_DATA.containsKey(""window.y""))\r\n\t\t\t\t{\r\n\t\t\t\t\tint x = Integer.parseInt(CONFIG_DATA.get(""window.x""));\r\n\t\t\t\t\tint y = Integer.parseInt(CONFIG_DATA.get(""window.y""));\r\n\t\t\t\t\t\r\n\t\t\t\t\twindow.setLocation(x, y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""monitor.width"", screenBounds.width + """");\r\n\t\tsetConfigDataValue(""monitor.height"", screenBounds.height + """");\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""window.fullscreen""))\r\n\t\t{\r\n\t\t\tboolean fullscreen = Boolean.valueOf(CONFIG_DATA.get(""window.fullscreen""));\r\n\t\t\t\r\n\t\t\twindow.setFullscreen(fullscreen);\r\n\t\t}\r\n\t\t\r\n\t\tif (!window.isFullscreen() && CONFIG_DATA.containsKey(""window.maximized""))\r\n\t\t{\r\n\t\t\tboolean maximized = Boolean.valueOf(CONFIG_DATA.get(""window.maximized""));\r\n\t\t\t\r\n\t\t\twindow.setMaximized(maximized);\r\n\t\t}\r\n\t\t\r\n\t\twindow.setBackground(new Color(display, 225, 225, 225));\r\n\t\t\r\n\t\tif (custom)\r\n\t\t{\r\n\t\t\twindow.setBorderColor(new Color(display, 215, 215, 215));\r\n\t\t\twindow.setBorderSize(3);\r\n\t\t}\r\n\t\t\r\n\t\tdisplay.addFilter(SWT.KeyDown, new Listener()\r\n\t\t{\r\n\t\t\tpublic void handleEvent(Event event)\r\n\t\t\t{\r\n\t\t\t\tif (event.keyCode == SWT.F11)\r\n\t\t\t\t{\r\n\t\t\t\t\twindow.setFullscreen(!window.isFullscreen());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tcontentPanel = window.getContentPanel();\r\n\t\tcontentPanel.setLocation(0, 0);\r\n\t\tcontentPanel.setSize(window.getClientArea().width, window.getClientArea().height);\r\n\t\tcontentPanel.setBackground(window.getBackground());\r\n\t\t\r\n\t\tif (custom)\r\n\t\t{\r\n\t\t\ttitleBar     = new TitleBar(window, 28, SWT.MIN | SWT.MAX | SWT.CLOSE | SWT.CENTER);\r\n\t\t\ttitleBar.setBackground(TITLE_BAR_BACKGROUND);\r\n\t\t\ttitleBar.setForeground(TITLE_BAR_FOREGROUND);\r\n\t\t\t\r\n\t\t\ttitleBarHeight = titleBar.getHeight();\r\n\t\t}\r\n\t\t\r\n//\t\tGridLayout b = new GridLayout();\r\n//\t\tb.makeColumnsEqualWidth = false;\r\n//\t\t\r\n//\t\tshell.setLayout(b);\r\n\t\t\r\n\t\tfileCache     = new HashMap<String, String>();\r\n\t\t\r\n\t\tcodeField     = new CodeField(contentPanel);\r\n\t\tconsoleField  = new ConsoleField(contentPanel);\r\n\t\t\r\n\t\tcodeField.addContentListener(this);\r\n\t\tcodeField.addCodeFieldListener(this);\r\n\t\tcodeField.setBackground(FOCUS_COLOR);\r\n\t\t\r\n\t\tint contentWidth  = (int)(contentPanel.getSize().x / 100f * 80);\r\n\t\tint conHeight     = (int)(contentPanel.getSize().y / 100f * 20);\r\n\t\tint toolbarHeight = (int)(25);\r\n\t\t\r\n\t\tcodeField.setSize(contentWidth, contentPanel.getSize().y - conHeight - toolbarHeight - 16);\r\n\t\tcodeField.setLocation(contentPanel.getSize().x - codeField.getWidth(), toolbarHeight);//contentPanel.getSize().y - codeField.getHeight());\r\n\t\tcodeField.setShowLineNumbers(true);\r\n\t\t\r\n\t\tconsoleField.setSize(contentWidth, conHeight - 5);\r\n\t\tconsoleField.setLocation(codeField.getBounds().x, codeField.getHeight() + codeField.getBounds().y + 5);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconsoleStream = new ConsoleStream(""log.txt"");\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tfolderImage       = new Image(display, new FileInputStream(""res/images/folderimage.png""));\r\n\t\t\tfileImage         = new Image(display, new FileInputStream(""res/images/fileimage.png""));\r\n\t\t\tjavaFileImage     = new Image(display, new FileInputStream(""res/images/javafileimage.png""));\r\n\t\t\tclassFileImage    = new Image(display, new FileInputStream(""res/images/classfileimage.png""));\r\n\t\t\tglslFileImage     = new Image(display, new FileInputStream(""res/images/glslfileimage.png""));\r\n\t\t\ttxtFileImage      = new Image(display, new FileInputStream(""res/images/txtfileimage.png""));\r\n\t\t\trtfFileImage      = new Image(display, new FileInputStream(""res/images/rtffileimage.png""));\r\n\t\t\texeFileImage      = new Image(display, new FileInputStream(""res/images/exefileimage.png""));\r\n\t\t\tasmFileImage      = new Image(display, new FileInputStream(""res/images/asmfileimage.png""));\r\n\t\t\tcppFileImage      = new Image(display, new FileInputStream(""res/images/cppfileimage.png""));\r\n\t\t\thFileImage        = new Image(display, new FileInputStream(""res/images/hfileimage.png""));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttabFileLocations  = new HashMap<Integer, String>();\r\n\t\ttabFileIds        = new HashMap<String, Integer>();\r\n\t\ttabTopPixels      = new HashMap<Integer, Integer>();\r\n\t\ttabSelection      = new HashMap<Integer, Point>();\r\n\t\t\r\n\t\tfileTabs = new TabMenu(contentPanel);\r\n\t\tfileTabs.setBackground(ColorUtils.darken(contentPanel.getBackground(), 20));\r\n\t\tfileTabs.addListener(this);\r\n\t\t\r\n\t\tconsoleTabs = new TabMenu(contentPanel);\r\n\t\tconsoleTabs.setBackground(ColorUtils.darken(contentPanel.getBackground(), 20));\r\n\t\tconsoleTabs.setMaxWidth(codeField.getWidth() + 2);\r\n\t\tconsoleTabs.addListener(this);\r\n\t\t\r\n\t\tprograms = new ArrayList<Program>();\r\n\t\tconsoleTabPrograms = new HashMap<Integer, Program>();\r\n\t\t\r\n\t    fileTabs.setMaxWidth(codeField.getWidth() + 2);\r\n\t\tcodeField.setLocation(codeField.getX(), codeField.getY() + fileTabs.getHeight());\r\n\t\tfileTabs.setLocation(codeField.getX(), 2);\r\n\t\t\r\n\t\tpreferences = new PreferencesDialog(contentPanel);\r\n\t\tpreferences.addDialogPanel(new GeneralPanel(preferences.getContentPanel(), this));\r\n\t\tpreferences.addDialogPanel(new JavaPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new CppPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new AssemblyPanel(preferences.getContentPanel()));\r\n\t\tpreferences.addDialogPanel(new PythonPanel(preferences.getContentPanel()));\r\n\t\t\r\n\t\tproperties = new PropertiesDialog(contentPanel);\r\n\t\tproperties.addDialogPanel(new JavaPanel(properties.getContentPanel()));\r\n\t\t\r\n\t\tmenubar = new Menubar(contentPanel);\r\n\t\tmenubar.setBackground(TITLE_BAR_BACKGROUND);\r\n\t\tmenubar.setSize(contentPanel.getSize().x, 20);\r\n\t\tmenubar.addMenuHeader(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""New"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Open"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Save"", ""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Save as..."", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Refresh"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Print"", ""FILE"");\r\n\t\tmenubar.addSeparator(""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Restart"", ""FILE"");\r\n\t\tmenubar.addMenuSubItem(""Exit"", ""FILE"");\r\n\r\n\t\tmenubar.addMenuSubItem(""Project"", ""FILE>New"");\r\n\t\tmenubar.addMenuSubItem(""Empty File"", ""FILE>New"");\r\n\t\t\r\n\t\tmenubar.addMenuHeader(""EDIT"");\r\n\t\tmenubar.addMenuSubItem(""Preferences"", ""EDIT"");\r\n\r\n\t\tmenubar.addMenuHeader(""PROJECT"");\r\n\t\tmenubar.addMenuSubItem(""Properties"", ""PROJECT"");\r\n\t\t\r\n\t\tmenubar.addListener(new MenubarListener()\r\n\t\t{\r\n\t\t\tpublic void subItemPressed(String subItemId)\r\n\t\t\t{\r\n\t\t\t\tif (subItemId.equals(""FILE>New>Empty File""))\r\n\t\t\t\t{\r\n\t\t\t\t\tnewFile();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>New>Project""))\r\n\t\t\t\t{\r\n\t\t\t\t\tnewProject();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Open""))\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Save""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Save as...""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(null);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Refresh""))\r\n\t\t\t\t{\r\n\t\t\t\t\trefreshFileViewer(false);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Print""))\r\n\t\t\t\t{\r\n\t\t\t\t\tPrintDialog dialog = new PrintDialog(window.getShell(), SWT.NONE);\r\n\t\t\t\t\tdialog.setScope(PrinterData.SELECTION);\r\n\t\t\t\t\t\r\n\t\t\t\t\tPrinterData data = dialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tFontData fd[] = codeField.getFont().getFontData().clone();\r\n\t\t\t\t\tfd[0].setHeight(10);\r\n\t\t\t\t\t\r\n\t\t\t\t\tTextPrinter printer = new TextPrinter(data, codeField.getText(), new Font(display, fd[0]), codeField.getStyles());\r\n\t\t\t\t\tprinter.setMargins(1, 1, 1, 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!printer.print())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tSystem.err.println(""Was not able to print!"");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Restart""))\r\n\t\t\t\t{\r\n\t\t\t\t\trestart();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""FILE>Exit""))\r\n\t\t\t\t{\r\n\t\t\t\t\texit(window);\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""EDIT>Preferences""))\r\n\t\t\t\t{\r\n\t\t\t\t\tpreferences.open();\r\n\t\t\t\t}\r\n\t\t\t\telse if (subItemId.equals(""PROJECT>Properties""))\r\n\t\t\t\t{\r\n\t\t\t\t\tproperties.open();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\ttoolbar       = new Toolbar(contentPanel);\r\n\t\t\t\r\n\t\t\ttoolbar.setBackground(window.getBackground());\r\n\r\n\t\t\ttoolbar.addToolItem(""Save"", new Image(display, new FileInputStream(""res/images/savebutton.png"")));\r\n\t\t\ttoolbar.addSeparator();\r\n\t\t\ttoolbar.addToolItem(""Compile"", new Image(display, new FileInputStream(""res/images/compilebutton.png"")));\r\n\t\t\ttoolbar.addSeparator();\r\n\t\t\ttoolbar.addToolItem(""Run"", new Image(display, new FileInputStream(""res/images/runbutton.png"")));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttoolbar.addListener(new ToolbarListener()\r\n\t\t{\r\n\t\t\tpublic void toolItemPressed(String toolItemName)\r\n\t\t\t{\r\n\t\t\t\tif (toolItemName.equals(""Save""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t}\r\n\t\t\t\telse if (toolItemName.equals(""Compile""))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (fileLocation == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\topenFile();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (Language.canCompile(FileUtils.getFileType(fileLocation)))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tString outputLocation = FileUtils.getParentFolder(fileLocation) + ""/"";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tnew File(outputLocation).mkdirs();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tLanguage.compile(fileLocation, codeField.getRawText(), outputLocation, consoleStream);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (toolItemName.equals(""Run""))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (fileLocation == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsoleField.setText("""");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tProgram program = Language.run(codeField.getLanguage(), fileLocation, consoleStream);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (program != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tprograms.add(program);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconsoleTabPrograms.put(, consoleTabs.addTab(program.getName());\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tupdateLayout();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tLanguage.init();\r\n\t\t\r\n\t\tLanguage.addCompilerListener(new CompilerListener()\r\n\t\t{\r\n\t\t\tpublic void compiled(final String files[], final CompileOutput outputs[], final PrintStream stream, String fileName)\r\n\t\t\t{\r\n\t\t\t\tfinal boolean isInViewer = treeItemLocations.containsKey(fileLocation);\r\n\t\t\t\t\r\n\t\t\t\tif (outputs[0].getResult() == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tdisplay.syncExec(new Runnable()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (stream != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tstream.println(""Compiled successfully."");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (isInViewer)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor (int i = 0; i < files.length; i ++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(files[i]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t{\r\n\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor (int i = 0; i < outputs.length; i++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (outputs[i].getResult() != 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcodeField.addError(outputs[i].getStartIndex(), outputs[i].getEndIndex());\r\n//\t\t\t\t\t\t\t\tSystem.out.print(outputs[i] + ""; "");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tSystem.out.println();\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tcodeField.highlightSyntax();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tfileViewerThreads    = new ArrayList<Thread>();\r\n\t\t\r\n\t\tfileCacheSaved        = new HashMap<String, Boolean>();\r\n\t\ttreeItemLocations     = new HashMap<Integer, String>();\r\n\t\ttreeItemIds           = new HashMap<String, Integer>();\r\n\t\ttreeItemDirectories   = new HashMap<Integer, String>();\r\n\t\t\r\n\t\ttreeMenu              = new TreeMenu(contentPanel);\r\n\t\ttreeMenu.setSize(contentPanel.getSize().x - codeField.getWidth() - 10, codeField.getHeight() + consoleField.getHeight());\r\n\t\ttreeMenu.setLocation(0, codeField.getY());\r\n\t\ttreeMenu.setBackground(NON_FOCUS_COLOR);\r\n\t\t\r\n\t\ttreeMenuSizer = new CompositeSizer(contentPanel, CompositeSizer.VERTICAL);\r\n\t\ttreeMenuSizer.setSize(5, treeMenu.getHeight());\r\n\t\ttreeMenuSizer.setLocation(treeMenu.getLocation().x + treeMenu.getWidth(), treeMenu.getLocation().y);\r\n\t\ttreeMenuSizer.setBackground(new Color(DISPLAY, 100, 100, 100));\r\n\t\ttreeMenuSizer.setForeground(new Color(DISPLAY, 230, 230, 230));\r\n\t\ttreeMenuSizer.setMinimumX(treeMenu.getLocation().x);\r\n\t\ttreeMenuSizer.addSizerListener(new SizerListener()\r\n\t\t{\r\n\t\t\tpublic void sizerMoved(int dx, int dy)\r\n\t\t\t{\r\n\t\t\t\ttreeMenu.setSize(treeMenu.getWidth() + dx, treeMenu.getHeight());\r\n\t\t\t\tcodeField.setSize(codeField.getWidth() - dx, codeField.getHeight());\r\n\t\t\t\tcodeField.setLocation(codeField.getX() + dx, codeField.getY());\r\n\t\t\t\t\r\n\t\t\t\tconsoleField.setSize(codeField.getWidth(), consoleField.getHeight());\r\n\t\t\t\tconsoleField.setLocation(codeField.getX(), consoleField.getLocation().y);\r\n\r\n\t\t\t\tcodeFieldSizer.setSize(codeField.getWidth(), 5);\r\n\t\t\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight());\r\n\t\t\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t\t\t\t\r\n\t\t\t\ttoolbar.setLocation(codeField.getX(), toolbar.getY());\r\n\t\t\t\tfileTabs.setLocation(codeField.getX(), fileTabs.getY());\r\n\t\t\t\tconsoleTabs.setLocation(codeField.getX(), consoleTabs.getY());\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tcodeFieldSizer = new CompositeSizer(contentPanel, CompositeSizer.HORIZONTAL);\r\n\t\tcodeFieldSizer.setSize(codeField.getWidth(), 3);\r\n\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight() + 1);\r\n\t\tcodeFieldSizer.setBackground(new Color(DISPLAY, 100, 100, 100));\r\n\t\tcodeFieldSizer.setForeground(new Color(DISPLAY, 230, 230, 230));\r\n\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t\tcodeFieldSizer.addSizerListener(new SizerListener()\r\n\t\t{\r\n\t\t\tpublic void sizerMoved(int dx, int dy)\r\n\t\t\t{\r\n\t\t\t\tcodeField.setSize(codeField.getWidth(), codeField.getHeight() + dy);\r\n\t\t\t\t\r\n\t\t\t\tconsoleField.setSize(codeField.getWidth(), consoleField.getHeight() - dy);\r\n\t\t\t\tconsoleField.setLocation(codeField.getX(), consoleField.getLocation().y + dy);\r\n\t\t\t\t\r\n\t\t\t\tconsoleTabs.setLocation(codeField.getX(), consoleTabs.getY() + dy);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tMenu m = new Menu(treeMenu);\r\n\t\ttreeMenu.setMenu(m);\r\n\t\t\r\n\t\tfinal MenuItem newFolder = new MenuItem(m, SWT.CASCADE);\r\n\t\tnewFolder.setText(""New Folder"");\r\n\t\t\r\n\t\tfinal MenuItem newFile = new MenuItem(m, SWT.CASCADE);\r\n\t\tnewFile.setText(""New File"");\r\n\t\t\r\n\t\tfinal MenuItem rename = new MenuItem(m, SWT.CASCADE);\r\n\t\trename.setText(""Rename"");\r\n\t\t\r\n\t\tfinal MenuItem delete = new MenuItem(m, SWT.CASCADE);\r\n\t\tdelete.setText(""Delete"");\r\n\t\t\r\n\t\tfinal ArrowIDE thisIDE = this;\r\n\t\t\r\n\t\tSelectionListener menuListener = new SelectionListener()\r\n\t\t{\r\n\t\t\tpublic void widgetDefaultSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tif (e.widget == delete)\r\n\t\t\t\t{\r\n\t\t\t\t\tint id = treeMenu.getSelection();\r\n//\t\t\t\t\t\r\n//\t\t\t\t\tif (treeItems.containsKey(id))\r\n//\t\t\t\t\t{\r\n//\t\t\t\t\t\tSystem.out.println(""is file"");\r\n//\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = treeItemLocations.get(id);\r\n\t\t\t\t\t\r\n\t\t\t\t\tdeleteFile(location);\r\n\r\n\t\t\t\t\tremoveFromFileViewer(location);\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == newFolder)\r\n\t\t\t\t{\r\n\t\t\t\t\tString preLoc = treeItemLocations.get(treeMenu.getSelection());\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (preLoc == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLoc = FileUtils.removeEndingSlashes(CONFIG_DATA.get(""workspace.location"")) + ""/"";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString preLocation = FileUtils.removeEndingSlashes(preLoc);\r\n\r\n\t\t\t\t\tif (FileUtils.isFile(preLocation))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLocation = FileUtils.getParentFolder(preLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tnewFolderDialog = new FileInputDialog(""Enter the folder name:"", ""Folder name:"", true, preLocation + ""/"", false);\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = newFolderDialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (location != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile f = new File(location);\r\n\t\t\t\t\t\tf.mkdirs();\r\n\r\n\t\t\t\t\t\taddToFileViewer(location);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == newFile)\r\n\t\t\t\t{\r\n\t\t\t\t\tString preLoc = treeItemLocations.get(treeMenu.getSelection());\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (preLoc == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLoc = FileUtils.removeEndingSlashes(CONFIG_DATA.get(""workspace.location"")) + ""/"";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tString preLocation = FileUtils.removeEndingSlashes(preLoc);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (FileUtils.isFile(preLocation))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpreLocation = FileUtils.getParentFolder(preLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tnewFileDialog = new FileInputDialog(""Enter the file name:"", ""File name:"", false, preLocation + ""/"", false);\r\n\t\t\t\t\t\r\n\t\t\t\t\tString location = newFileDialog.open();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (location != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile f = new File(location);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tf.createNewFile();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\topenFile(location);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\taddToFileViewer(location);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (IOException e2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\te2.printStackTrace();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.widget == rename)\r\n\t\t\t\t{\r\n\t\t\t\t\tfinal int selection\t\t= treeMenu.getSelection();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfinal String loc\t\t= treeItemLocations.get(selection);\r\n\t\t\t\t\t\r\n\t\t\t\t\tboolean willContinue\t= false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (fileCache.containsKey(loc))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (!fileCacheSaved.get(loc))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tString result = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tOptionDialog optDialog = new OptionDialog(""Save?"", ""Would you like to save before renaming?"");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tresult = optDialog.open();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (result != null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif (result.equals(""yes""))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tsaveFile(loc);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\twillContinue\t= true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if (result.equals(""no""))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twillContinue = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (willContinue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trenameFileDialog = new TextInputDialog(""Enter the new name:"", ""New name:"", FileUtils.getFileName(treeItemLocations.get(selection)));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\trenameFileDialog.addDialogFilter(new DialogFilter()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic String filter(String text)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttext = FileUtils.removeEndingSlashes(text.replace('\\\\', '/'));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor (int i = 0; i < text.length(); i ++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (text.charAt(i) == '/')\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\treturn ""The name must be in the same location."";\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tString newLoc\t\t= FileUtils.getParentFolder(loc) + ""/"" + text;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tboolean currentFile\t= text.equals(FileUtils.getFileName(loc));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (currentFile)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn ""The name must be different than the current name."";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tremoveFromFileViewer(loc);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tFile f = new File(loc);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tboolean successful = f.renameTo(new File(newLoc));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (successful)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (fileCache.containsKey(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileCache.put(newLoc, fileCache.remove(loc));\r\n\t\t\t\t\t\t\t\t\t\tfileCacheSaved.put(newLoc, fileCacheSaved.remove(loc));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (tabFileLocations.containsValue(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tint tabId = tabFileIds.remove(loc);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tfileTabs.setTabText(tabId, FileUtils.getFileName(newLoc));\r\n\t\t\t\t\t\t\t\t\t\ttabFileLocations.put(tabId, newLoc);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\ttabFileIds.put(newLoc, tabId);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (tabFileIds.containsKey(loc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ttabFileIds.put(newLoc, tabFileIds.remove(loc));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (currentFile)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileLocation = newLoc;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tcodeField.setLanguage(Language.getLanguage(fileLocation));\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tcodeField.highlightSyntax();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (loc.equals(fileLocation))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfileLocation = newLoc;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tboolean before = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (fileCacheSaved.containsKey(newLoc))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tbefore = fileCacheSaved.get(newLoc);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n//\t\t\t\t\t\t\t\t\trefreshFileViewer();\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(newLoc);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tfileCacheSaved.put(newLoc, before);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\taddToFileViewer(loc);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tString result = renameFileDialog.open();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (result != null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tFileUtils.removeEndingSlashes(result.replace('\\\\', '/'));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\twidgetDefaultSelected(e);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tnewFolder.addSelectionListener(menuListener);\r\n\t\tnewFile.addSelectionListener(menuListener);\r\n\t\trename.addSelectionListener(menuListener);\r\n\t\tdelete.addSelectionListener(menuListener);\r\n\t\t\r\n\t\ttreeMenu.addListener(new TreeMenuListener()\r\n\t\t{\r\n\t\t\tpublic void treeItemDoubleClicked(int id)\r\n\t\t\t{\r\n\t\t\t\tif (!treeItemDirectories.containsKey(id))\r\n\t\t\t\t{\r\n\t\t\t\t\tString location = treeItemLocations.get(id);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile(location);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpublic void treeItemRightClicked(int id)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tpublic void treeItemSelected(int id)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\tconsoleStream.addConsoleListener(new ConsoleListener()\r\n\t\t{\r\n\t\t\tpublic void onPrintln(final Object o)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tif (o instanceof String)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsoleField.append((String)o);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tpublic void onPrint(Object o)\r\n\t\t\t{\r\n\t\t\t\tif (o instanceof String)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsoleField.append((String)o);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t    ControlListener shellListener = new ControlListener()\r\n\t\t{\r\n\t\t\tpublic void controlMoved(ControlEvent e)\r\n\t\t\t{\r\n\t\t\t\tsetConfigDataValue(""window.x"", window.getLocation().x + """");\r\n\t\t\t\tsetConfigDataValue(""window.y"", window.getLocation().y + """");\r\n\t\t\t}\r\n\r\n\t\t\t// TODO clean this crap up.\r\n\t\t\tpublic void controlResized(ControlEvent e)\r\n\t\t\t{\r\n\t\t\t\tupdateLayout();\r\n\t\t\t\t\r\n\t\t\t\tif (!window.isMaximized() && !window.isFullscreen())\r\n\t\t\t\t{\r\n\t\t\t\t\tsetConfigDataValue(""window.width"", window.getWidth() + """");\r\n\t\t\t\t\tsetConfigDataValue(""window.height"", window.getHeight() + """");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tsetConfigDataValue(""window.maximized"", window.isMaximized() + """");\r\n\t\t\t\t\r\n\t\t\t\tsetConfigDataValue(""window.fullscreen"", window.isFullscreen() + """");\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\twindow.addControlListener(shellListener);\r\n\t\t\r\n\t\tshellListener.controlResized(null);\r\n\t\t\r\n\t\twindow.addPaintListener(new PaintListener()\r\n\t\t{\r\n\t\t\tpublic void paintControl(PaintEvent e)\r\n\t\t\t{\r\n\t\t\t\te.gc.drawString(codeField.getSelection().x + """", 0, 50);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""last.tabs""))\r\n\t\t{\r\n\t\t\tString lastTabs[] = CONFIG_DATA.get(""last.tabs"").split("";"");\r\n\t\t\t\r\n\t\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < lastTabs.length; i++)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\topenFile(lastTabs[i], false, i == lastTabs.length - 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\tbuilder.append(lastTabs[i] + ';');\r\n\t\t\t\t}\r\n\t\t\t\tcatch (IOException e)\r\n\t\t\t\t{\r\n\t\t\t\t\t// If file wasnt found.. or something else.\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsetConfigDataValue(""last.tabs"", builder.toString());\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Updates the components locations in the frame.\r\n\t */\r\n\tprivate void updateLayout()\r\n\t{\r\n\t\tcontentPanel.setSize(window.getClientArea().width, window.getClientArea().height);\r\n\t\t\r\n\t\tint width     = (int)(contentPanel.getSize().x / 100f * 80);\r\n\t\tint conHeight = (int)(contentPanel.getSize().y / 100f * 20);\r\n\t\t\r\n\t\tmenubar.setSize(contentPanel.getSize().x, menubar.getHeight());\r\n\t\tmenubar.setLocation(0, titleBarHeight);\r\n\t\t\r\n\t\tcodeField.setSize(width, contentPanel.getSize().y - conHeight - toolbar.getHeight() - fileTabs.getY());\r\n\t\tcodeField.setLocation(contentPanel.getSize().x - codeField.getWidth(), fileTabs.getHeight() + fileTabs.getY());\r\n\t\t\r\n\t\ttoolbar.setSize(toolbar.getWidth(), 25);\r\n\t\ttoolbar.setLocation(codeField.getX(), menubar.getY() + menubar.getHeight());\r\n\t\t\r\n\t\tboolean cTabs = programs.size() > 0;\r\n\t\tint cOffset   = cTabs ? consoleTabs.getHeight() : 0;\r\n\t\t\r\n\t\tconsoleField.setSize(width, conHeight - 5 - cOffset);\r\n\t\tconsoleField.setLocation(codeField.getBounds().x, codeField.getHeight() + codeField.getBounds().y + 5 + cOffset);\r\n\t\tSystem.out.println(""!"" + consoleField.getLocation().y);\r\n\t\t\r\n//\t\ttabs.setWidth(codeField.getWidth() + 2);\r\n\t\tfileTabs.setLocation(codeField.getX(), toolbar.getY() + toolbar.getHeight() + 2);\r\n\t\tconsoleTabs.setLocation(consoleField.getLocation().x, consoleField.getLocation().y - cOffset);\r\n\t\tSystem.out.println(consoleTabs.getY());\r\n\t\t\r\n\t\ttreeMenu.setLocation(treeMenu.getLocation().x, codeField.getY());\r\n\t\ttreeMenu.setSize(contentPanel.getSize().x - codeField.getWidth() - 5, consoleField.getLocation().y + consoleField.getHeight() - codeField.getY());\r\n\t\t\r\n\t\ttreeMenuSizer.setSize(5, treeMenu.getHeight());\r\n\t\ttreeMenuSizer.setLocation(treeMenu.getLocation().x + treeMenu.getWidth(), treeMenu.getLocation().y);\r\n\r\n\t\tcodeFieldSizer.setSize(codeField.getWidth(), 5);\r\n\t\tcodeFieldSizer.setLocation(codeField.getLocation().x, codeField.getLocation().y + codeField.getHeight());\r\n\t\tcodeFieldSizer.setMinimumY(codeField.getY());\r\n\t}\r\n\t\r\n\t/**\r\n\t * The start method that is used to start up the whole ArrowIDE\r\n\t * program. Creates the window and puts the stuff in it.\r\n\t */\r\n\tpublic static void start()\r\n\t{\r\n//\t\tsplash = new Shell(display, SWT.ON_TOP);\r\n//\t\tsplash.setSize(largeIcon.getBounds().width, largeIcon.getBounds().height);\r\n//\t\tsplash.setLocation(screenBounds.width / 2 - splash.getSize().x / 2, screenBounds.height / 2 - splash.getSize().y / 2);\r\n//\t\t\r\n//\t\tLabel splashImage = new Label(splash, SWT.NONE);\r\n//\t\tsplashImage.setSize(splash.getSize());\r\n//\t\tsplashImage.setImage(largeIcon);\r\n\t\t\r\n//\t\tsplash = new SplashScreen(""res/images/iconlarge.png"", 3000);\r\n\t\t\r\n//\t\tsplash.open(3000);\r\n\t\t\r\n\t\tuntitledNumber = 0;\r\n\t\t\r\n\t\tArrowIDE ide = null;\r\n\r\n\t\tconfigLocation       = new File(""arrow.config"").getAbsolutePath().replace('\\\\', '/');\r\n\t\t\r\n\t\tcreateConfigData();\r\n\t\t\r\n\t\tif (workspaceCreated())\r\n\t\t{\r\n\t\t\tide = openIDE();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tchooseWorkspace();\r\n\t\t\t\r\n\t\t\tide = openIDE();\r\n\t\t}\r\n\t\t\r\n//\t\tSystem.out.println(OS.SendMessage(shell.handle, OS.EM_SETSEL, 5, 9));//new TCHAR(0, ""2dasdf"", true)));\r\n\t\t\r\n\t\twindow.setFocus();\r\n\t\twindow.forceActive();\r\n\t\twindow.forceFocus();\r\n\t\twindow.setActive();\r\n\t\t\r\n\t\twhile (!window.isDisposed())\r\n\t\t{\r\n\t\t\tif (!DISPLAY.readAndDispatch())\r\n\t\t\t{\r\n\t\t\t\tide.update();\r\n//\t\t\t\tsplash.update();\r\n\t\t\t\t\r\n\t\t\t\tDISPLAY.sleep();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (!restarting)\r\n\t\t{\r\n\t\t\texit(window);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create a new ArrowIDE and then open it.\r\n\t * \r\n\t * @return The created ArrowIDE object.\r\n\t */\r\n\tpublic static ArrowIDE openIDE()\r\n\t{\r\n\t\tString location = CONFIG_DATA.get(""workspace.location.relative"");\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tlocation = FileUtils.getAbsolutePath(location);\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t\texit(window);\r\n\t\t}\r\n\t\t\r\n\t\tCONFIG_DATA.put(""workspace.location"", location);\r\n\t\t\r\n\t\tArrowIDE ide = new ArrowIDE(DISPLAY);\r\n\t\t\r\n\t\twindow.open();\r\n\t\t\r\n\t\tImage largeIcon = null;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tlargeIcon = new Image(DISPLAY, new FileInputStream(""res/images/iconlarge.png""));\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\t\twindow.setIcon(largeIcon);\r\n\t\t\r\n\t\tide.refreshFileViewer(true);\r\n\t\t\r\n\t\treturn ide;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Restarts the program to a fresh state.\r\n\t */\r\n\tpublic static void restart()\r\n\t{\r\n\t\trestarting = true;\r\n\t\t\r\n\t\twindow.dispose();\r\n\t\t\r\n\t\tstart();\r\n\t\t\r\n\t\trestarting = false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * The method that is called right before the exiting of the program.\r\n\t * \r\n\t * @param shell The window to close (The main window).\r\n\t */\r\n\tpublic static void exit(Window shell)\r\n\t{\r\n\t\texiting = true;\r\n\t\t\r\n\t\tif (shell != null)\r\n\t\t{\r\n\t\t\tshell.dispose();\r\n\t\t}\r\n\t\t\r\n\t\tif (fileViewerThreads != null)\r\n\t\t{\r\n\t\t\tfor (int i = fileViewerThreads.size() - 1; i >= 0; i--)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tfileViewerThreads.get(i).join();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (InterruptedException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tDisplay.getDefault().close();\r\n\t\t\r\n\t\tSystem.exit(0);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method used to choose the Workspace location. Sets the value of\r\n\t * the absolute location in the workspace.location key for the {@link #CONFIG_DATA}.\r\n\t */\r\n\tpublic static void chooseWorkspace()\r\n\t{\r\n\t\tDialogFilter filter = new DialogFilter()\r\n\t\t{\r\n\t\t\tpublic String filter(String text)\r\n\t\t\t{\r\n\t\t\t\tFile f = new File(text);\r\n\t\t\t\t\r\n\t\t\t\tif (!f.exists())\r\n\t\t\t\t{\r\n\t\t\t\t\treturn ""The directory must exist."";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tFileBrowseDialog chooseWorkspace = new FileBrowseDialog(""Choose your project workspace folder:"", ""Workspace:"", FileBrowseDialog.DIRECTORY);\r\n\t\tchooseWorkspace.addDialogFilter(filter);\r\n\t\t\r\n\t\tString location = chooseWorkspace.open();\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\texit(window);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""workspace.location.relative"", location);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tsetConfigDataValue(""workspace.location"", FileUtils.getAbsolutePath(location));\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns whether a workspace has been located or created.\r\n\t * \r\n\t * @return Whether the workspace has been located or created.\r\n\t */\r\n\tpublic static boolean workspaceCreated()\r\n\t{\r\n\t\tFile workspaceDirectory = null;\r\n\t\t\r\n\t\tif (!CONFIG_DATA.containsKey(""workspace.location""))\r\n\t\t{\r\n\t\t\tchooseWorkspace();\r\n\t\t}\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tsetConfigDataValue(""workspace.location"", FileUtils.getAbsolutePath(CONFIG_DATA.get(""workspace.location.relative"")));\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tworkspaceDirectory = new File(CONFIG_DATA.get(""workspace.location""));\r\n\t\t\r\n\t\treturn workspaceDirectory.exists();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that appends the given String to the value of the key given.\r\n\t * \r\n\t * @param key\tThe key to append to.\r\n\t * @param value\tThe value to append.\r\n\t */\r\n\tpublic static synchronized void appendConfigDataValue(String key, String value)\r\n\t{\r\n\t\tString prev = """";\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(key))\r\n\t\t{\r\n\t\t\tprev = CONFIG_DATA.get(key);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(key, prev + value);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set a CONFIG_DATA value in the HashMap and the arrow.config file.\r\n\t * If the key is not already in the file, it will add it to the end.\r\n\t * \r\n\t * @param key The key of the property to set.\r\n\t * @param value The value of the property to set.\r\n\t */\r\n\tpublic static synchronized void setConfigDataValue(String key, String value)\r\n\t{\r\n\t\tboolean added = false;\r\n\t\t\r\n\t\tCONFIG_DATA.put(key, value);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tPrintWriter p = new PrintWriter(new FileWriter(configLocation));\r\n\t\t\t\r\n\t\t\tString keys[] = CONFIG_DATA.keySet().toArray(new String[0]);\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < CONFIG_DATA.size(); i ++)\r\n\t\t\t{\r\n\t\t\t\tString lineKey   = null;\r\n\t\t\t\tString lineValue = null;\r\n\t\t\t\t\r\n\t\t\t\tlineKey          = keys[i];\r\n\t\t\t\t\r\n\t\t\t\tif (lineKey.equals(key))\r\n\t\t\t\t{\r\n\t\t\t\t\tlineValue = CONFIG_DATA.get(lineKey);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tlineValue = CONFIG_DATA.get(lineKey);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tp.print(lineKey + ""="" + lineValue + (i == CONFIG_DATA.size() - 1 ? """" : ""\\r\\n""));\r\n\t\t\t}\r\n\t\t\r\n\t\t\tp.close();\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates and initializes the CONFIG_DATA. Puts all of the correct\r\n\t * values into the HashMap.\r\n\t */\r\n\tprivate static void createConfigData()\r\n\t{\r\n\t\tFile file = new File(configLocation);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tConfigReader.read(configLocation, CONFIG_DATA);\r\n\t\t\t\r\n\t\t\tif (!CONFIG_DATA.containsKey(""workspace.location""))\r\n\t\t\t{\r\n\t\t\t\tPrintWriter writer;\r\n\t\t\t\twriter = new PrintWriter(new FileWriter(configLocation));\r\n\t\t\t\t\r\n\t\t\t\twriter.print(""workspace.location="");\r\n\t\t\t\t\r\n\t\t\t\twriter.close();\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that checks to see if the given location is a valid\r\n\t * project. If it is, then load all of the classpath and\r\n\t * project properties into the {@link #PROJECT_PROPERTIES} and\r\n\t * the classpaths into the {@link #PROJECT_CLASSPATHS}.\r\n\t * \r\n\t * @param location The location of the root folder of the project\r\n\t * \t\tto check.\r\n\t */\r\n\tpublic static void checkProject(String location)\r\n\t{\r\n\t\tlocation = FileUtils.removeEndingSlashes(location);\r\n\t\t\r\n\t\tString propsLocation = location + ""/.properties"";\r\n\t\tString cpLocation = location + ""/.classpath"";\r\n\t\t\r\n\t\tFile props = new File(propsLocation);\r\n\t\tFile cp = new File(cpLocation);\r\n\t\t\r\n\t\tif (props.isFile())\r\n\t\t{\r\n\t\t\tif (!PROJECT_PROPERTIES.containsKey(propsLocation))\r\n\t\t\t{\r\n\t\t\t\tHashMap<String, XMLItem[]> map = Reader.read(propsLocation);\r\n\t\t\t\t\r\n\t\t\t\tPROJECT_PROPERTIES.put(propsLocation, map);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (cp.isFile())\r\n\t\t{\r\n\t\t\tif (!PROJECT_CLASSPATHS.containsKey(cpLocation))\r\n\t\t\t{\r\n\t\t\t\tHashMap<String, XMLItem[]> map = Reader.read(cpLocation);\r\n\t\t\t\t\r\n\t\t\t\tPROJECT_CLASSPATHS.put(cpLocation, map);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a Dialog to ask for the project name. Next it creates a\r\n\t * directory/folder for the project and refreshes the file viewer.\r\n\t */\r\n\tpublic void newProject()\r\n\t{\r\n\t\tnewProjectDialog = new FileInputDialog(""Enter the name of your project:"", ""Project name:"", """", true, CONFIG_DATA.get(""workspace.location""), false);\r\n\t\t\r\n\t\tString location  = newProjectDialog.open();\r\n\t\t\r\n\t\tif (location != null)\r\n\t\t{\r\n\t\t\tFile f = new File(location);\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/bin"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/res"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\tf = new File(location + ""/src"");\r\n\t\t\tf.mkdirs();\r\n\t\t\t\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tf = new File(location + ""/.classpath"");\r\n\t\t\t\tf.createNewFile();\r\n\t\t\t\r\n\t\t\t\tf = new File(location + ""/.properties"");\r\n\t\t\t\tf.createNewFile();\r\n\t\t\t}\r\n\t\t\tcatch (IOException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\r\n\t\t\taddToFileViewer(location);\r\n\t\t\taddToFileViewer(location + ""/bin"");\r\n\t\t\taddToFileViewer(location + ""/res"");\r\n\t\t\taddToFileViewer(location + ""/src"");\r\n\t\t\taddToFileViewer(location + ""/.classpath"");\r\n\t\t\taddToFileViewer(location + ""/.properties"");\r\n\t\t\trefreshFileViewer(location, false);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates new file and saves the old one. Switches to the new file\r\n\t * for editing automatically.\r\n\t */\r\n\tpublic void newFile()\r\n\t{\r\n\t\tcodeField.setText("""");\r\n\t\tcodeField.setLanguage(0);\r\n\t\t\r\n\t\tString location = ""Untitled"" + untitledNumber++;\r\n\t\t\r\n\t\tfileLocation = location;\r\n\t\t\r\n\t\taddTab(location, location);\r\n\t\t\r\n\t\tsetFileSaved(location, false);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new FileDialog at the absolute path of the workspace\r\n\t * location.\r\n\t * \r\n\t * @return The created, unopened FileDialog at the workspace path\r\n\t * \t\tused for opening files.\r\n\t */\r\n\tpublic FileDialog openFileBrowseDialog()\r\n\t{\r\n\t\tString location = null;\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""dialog.location""))\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""dialog.location"");\r\n\t\t\t\r\n\t\t\tif (!new File(location).exists())\r\n\t\t\t{\r\n\t\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t}\r\n\t\t\r\n\t\treturn openFileBrowseDialog(location);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiates a new FileDialog set for all types of files to be\r\n\t * set at the specified location.\r\n\t * \r\n\t * @param relativeLocation The location for the FileDialog to start.\r\n\t * @return The created, unopened FileDialog used for opening files.\r\n\t */\r\n\tpublic FileDialog openFileBrowseDialog(String location)\r\n\t{\r\n\t\tFileDialog dialog = new FileDialog(window.getShell(), SWT.OPEN | SWT.MULTI);\r\n\t\tdialog.setFilterNames(new String[] { ""All Files (*)"" });\r\n\t\tdialog.setFilterExtensions(new String[] { ""*"" });\r\n\t\tdialog.setFilterPath(location);\r\n\t\t\r\n\t\treturn dialog;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Open a file located at the specified location.\r\n\t * \r\n\t * @param location The location of the file to open.\r\n\t */\r\n\tpublic void openFile(String location) throws FileNotFoundException\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\topenFile(location, true, true);\r\n\t\t}\r\n\t\tcatch (IOException e)\r\n\t\t{\r\n\t\t\tif (e instanceof FileNotFoundException)\r\n\t\t\t{\r\n\t\t\t\tthrow (FileNotFoundException)e;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that opens a file at the specified location and also\r\n\t * takes the option whether or not to cache the save the fileLocation\r\n\t * in the {@link #CONFIG_DATA} for reuse when the IDE is restarted.\r\n\t * \r\n\t * @param\tlocation The location of the file to open.\r\n\t * @param\tcache Whether or not to save the file for use after restart.\r\n\t * @param \tsetLanguage Whether or not to set the language of the codeField.\r\n\t * @throws\tFileNotFoundException Thrown if the file can not be found.\r\n\t * @throws\tIOException Thrown if there was trouble reading or writing.\r\n\t */\r\n\tpublic void openFile(String location, boolean cache, boolean setLanguage) throws FileNotFoundException, IOException\r\n\t{\r\n\t\tlocation = location.replace('\\\\', '/');\r\n\t\t\r\n\t\tboolean alreadyOpen = fileCache.containsKey(location);\r\n\t\t\r\n\t\tif (oldTabId != 0)\r\n\t\t{\r\n\t\t\ttabTopPixels.put(oldTabId, codeField.getTopPixel());\r\n\t\t\ttabSelection.put(oldTabId, codeField.getSelection());\r\n\t\t}\r\n\t\t\r\n\t\tif (alreadyOpen)\r\n\t\t{\r\n\t\t\tcodeField.setText(fileCache.get(location), true, true);\r\n\t\t\t\r\n\t\t\tcodeField.setLanguage(Language.getLanguage(location));\r\n\t\t\t\r\n\t\t\tcodeField.redraw();\r\n\t\t\t\r\n\t\t\tint tabId = tabFileIds.get(location);\r\n\t\t\t\r\n\t\t\tString oldLocation = fileLocation;\r\n\t\t\t\r\n\t\t\tfileLocation = location;\r\n\t\t\t\r\n\t\t\tfileTabs.setSelection(tabId);\r\n\t\t\t\r\n\t\t\tif (!location.equals(oldLocation))\r\n\t\t\t{\r\n\t\t\t\toldTabId = tabId;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tFile file = new File(location);\r\n\t\t\t\r\n\t\t\tif (file.isDirectory())\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tBufferedReader reader = new BufferedReader(new FileReader(file));\r\n\t\t\t\r\n\t\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\t\r\n\t\t\tString line = """";\r\n\t\t\t\r\n\t\t\twhile ((line = reader.readLine()) != null)\r\n\t\t\t{\r\n\t\t\t\tbuilder.append(line + ""\\r\\n"");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treader.close();\r\n\t\t\t\r\n\t\t\tif (builder.length() > 0)\r\n\t\t\t{\r\n\t\t\t\tbuilder.deleteCharAt(builder.length() - 1);\r\n\t\t\t\tbuilder.deleteCharAt(builder.length() - 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString fileContents = builder.toString();\r\n\t\t\t\r\n\t\t\tfileCache.put(location, fileContents);\r\n\t\t\tfileCacheSaved.put(location, true);\r\n\t\t\t\r\n\t\t\tcodeField.setText(fileContents, true);\r\n\t\t\t\r\n\t\t\tcodeField.redraw();\r\n\t\t\t\r\n\t\t\tif (!location.equals(fileLocation))\r\n\t\t\t{\r\n\t\t\t\taddTab(location, cache);\r\n\t\t\t\t\r\n\t\t\t\tif (fileLocation != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tint tabId = tabFileIds.get(location);\r\n\t\t\t\t\t\r\n\t\t\t\t\toldTabId = tabId;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileLocation = location;\r\n\t\t}\r\n\t\t\r\n\t\tif (setLanguage)\r\n\t\t{\r\n\t\t\tcodeField.setLanguage(Language.getLanguage(location));\r\n\t\t}\r\n\t\t\r\n\t\tcodeField.setFocus();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Opens a FileDialog to search for a file to open, then opens\r\n\t * the result.\r\n\t */\r\n\tpublic void openFile() throws FileNotFoundException\r\n\t{\r\n\t\tFileDialog dialog = openFileBrowseDialog();\r\n\t\t\r\n\t\tString location   = dialog.open();\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tlocation           = location.replace('\\\\', '/');\r\n\t\t\r\n\t\tString parent      = FileUtils.getParentFolder(location) + ""/"";\r\n\t\t\r\n\t\tString fileNames[] = dialog.getFileNames();\r\n\t\t\r\n\t\tfor (int i = 0; i < fileNames.length; i ++)\r\n\t\t{\r\n\t\t\topenFile(parent + fileNames[i]);\r\n\t\t}\r\n\t\t\r\n\t\tsetConfigDataValue(""dialog.location"", parent);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new FileDialog at the absolute path of the workspace\r\n\t * location.\r\n\t * \r\n\t * @return The created, unopened FileDialog at the workspace path\r\n\t * \t\tused for saving.\r\n\t */\r\n\tpublic FileDialog openSaveDialog()\r\n\t{\r\n\t\tString location = null;\r\n\t\t\r\n\t\tif (CONFIG_DATA.containsKey(""dialog.location""))\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""dialog.location"");\r\n\t\t\t\r\n\t\t\tif (!new File(location).exists())\r\n\t\t\t{\r\n\t\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlocation = CONFIG_DATA.get(""workspace.location"");\r\n\t\t}\r\n\t\t\r\n\t\treturn openSaveDialog(location);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Instantiates a new FileDialog set for all types of files to be\r\n\t * set at the specified location.\r\n\t * \r\n\t * @param relativeLocation The location for the FileDialog to start.\r\n\t * @return The created, unopened FileDialog used for saving.\r\n\t */\r\n\tpublic FileDialog openSaveDialog(String location)\r\n\t{\r\n\t\tFileDialog dialog = new FileDialog(window.getShell(), SWT.SAVE);\r\n\t\tdialog.setFilterNames(new String[] { ""All Files (*)"" });\r\n\t\tdialog.setFilterExtensions(new String[] { ""*"" });\r\n\t\tdialog.setFilterPath(location);\r\n\t\t\r\n\t\treturn dialog;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Saves a file located at the specified location.\r\n\t * \r\n\t * @param location The location of the file to open.\r\n\t */\r\n\tpublic void saveFile(String location)\r\n\t{\r\n\t\tif (fileLocation == null && location == null)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\topenFile();\r\n\t\t\t}\r\n\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t{\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (location != null)\r\n\t\t{\r\n\t\t\tlocation = location.replace('\\\\', '/');\r\n\t\t}\r\n\t\t\r\n\t\tif (location == null || location.startsWith(""Untitled""))\r\n\t\t{\r\n\t\t\tboolean hasTab = tabFileIds.containsKey(location);\r\n\t\t\tint     tabId  = 0;\r\n\t\t\t\r\n\t\t\tif (hasTab)\r\n\t\t\t{\r\n\t\t\t\ttabId = tabFileIds.get(location);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString oldLoc = location;\r\n\t\t\t\r\n\t\t\tFileDialog dialog = openSaveDialog();\r\n\t\t\tlocation = dialog.open();\r\n\t\t\t\r\n\t\t\tif (location != null)\r\n\t\t\t{\r\n\t\t\t\tlocation = location.replace('\\\\', '/');\r\n\t\t\t\t\r\n\t\t\t\tif (hasTab)\r\n\t\t\t\t{\r\n\t\t\t\t\tString fileName = FileUtils.getFileName(location);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttabFileIds.remove(oldLoc);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfileTabs.setTabText(tabId, fileName);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttabFileIds.put(location, tabId);\r\n\t\t\t\t\ttabFileLocations.put(tabId, location);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (location == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (fileLocation == null)\r\n\t\t{\r\n\t\t\tfileLocation = """";\r\n\t\t}\r\n\t\t\r\n\t\tboolean saved\t\t= false;\r\n\t\t\r\n\t\tboolean currentFile = location.equals(fileLocation);\r\n\t\r\n\t\tif (fileCacheSaved.containsKey(fileLocation))\r\n\t\t{\r\n\t\t\tsaved = fileCacheSaved.get(fileLocation);\r\n\t\t}\r\n\t\t\r\n\t\tFileUtils.writeFile(location, codeField.getWritableText());\r\n\t\t\r\n\t\tfileLocation\t  = location;\r\n\t\t\r\n\t\tcodeField.setLanguage(Language.getLanguage(fileLocation));\r\n\t\t\r\n\t\tboolean highlight = codeField.getLanguage() == 0;\r\n\t\t//TODO: did if rog et something?\r\n//\t\tSystem.out.println(""done"");\r\n\t\tif (highlight)\r\n\t\t{\r\n\t\t\tcodeField.highlightSyntax();\r\n\t\t}\r\n//\t\tSystem.out.println(""done2"");\r\n\t\t\r\n\t\tif (currentFile)\r\n\t\t{\r\n\t\t\tsetFileSaved(location, true);\r\n\t\t}\r\n\t\t\r\n\t\tboolean isInViewer = treeItemLocations.containsKey(fileLocation);\r\n\t\t\r\n\t\tif (isInViewer)\r\n\t\t{\r\n\t\t\taddToFileViewer(location);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that adds the file at the specified location to file viewer.\r\n\t * Faster than refreshing the whole doggone file viewer.\r\n\t * \r\n\t * @param location The location of the file to add.\r\n\t */\r\n\tpublic void addToFileViewer(String location)\r\n\t{\r\n\t\tif (treeItemLocations.containsValue(location))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tFile file     = new File(location);\r\n\r\n\t\tboolean isDirectory = file.isDirectory();\r\n\t\t\r\n\t\tString name   = FileUtils.getFileName(location);\r\n\t\t\r\n\t\tImage img     = isDirectory ? folderImage : getFileImage(location);\r\n\t\t\r\n\t\tString parentLocation = FileUtils.getParentFolder(location);\r\n\t\t\r\n\t\tint parentId = 0;\r\n\t\t\r\n\t\tif (parentLocation.equals(CONFIG_DATA.get(""workspace.location"")))\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tparentId = treeItemIds.get(parentLocation);\r\n\t\t}\r\n\t\t\r\n\t\tint id        = treeMenu.addItem(parentId, name, img);\r\n\t\t\r\n\t\tif (fileCacheSaved.containsKey(location))\r\n\t\t{\r\n\t\t\tfileCacheSaved.put(location, true);\r\n\t\t}\r\n\r\n\t\ttreeItemLocations.put(id, location);\r\n\t\ttreeItemIds.put(location, id);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to remove the file at the specified location from the file\r\n\t * viewer. Faster than refreshing the whole doggone file viewer.\r\n\t * \r\n\t * @param location The location of the file to remove.\r\n\t */\r\n\tpublic void removeFromFileViewer(String location)\r\n\t{\r\n\t\tint id = treeItemIds.get(location);\r\n\t\t\r\n\t\ttreeItemDirectories.remove(id);\r\n\t\ttreeItemIds.remove(location);\r\n\t\ttreeItemLocations.remove(id);\r\n\t\t\r\n\t\tif (treeMenu.containsItem(id))\r\n\t\t{\r\n\t\t\ttreeMenu.removeItem(id);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Refresh the file viewer to all of the updated file names.\r\n\t * If a file has been added, add it to the\r\n\t * {@link #treeMenu file viewer}.\r\n\t * \r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(boolean ignoreRemove)\r\n\t{\r\n\t\trefreshFileViewer(CONFIG_DATA.get(""workspace.location""), 0, ignoreRemove);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to refresh the files within the directory of the specified\r\n\t * location.\r\n\t * \r\n\t * @param location The location of the root directory to refresh.\r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(String location, boolean ignoreRemove)\r\n\t{\r\n\t\tint parentId = treeItemIds.get(location);\r\n\t\t\r\n\t\trefreshFileViewer(location, parentId, ignoreRemove);\r\n\t}\r\n\r\n\t/**\r\n\t * Method to refresh the files within the directory of the specified\r\n\t * location.\r\n\t * \r\n\t * @param location The location of the root directory to refresh.\r\n\t * @param parentId The id of the TreeMenu item to refresh.\r\n\t * @param ignoreRemove Whether or not to ignore the process of\r\n\t * \t\tsearching for files that were removed.\r\n\t */\r\n\tpublic void refreshFileViewer(final String location, final int parentId, final boolean ignoreRemove)\r\n\t{\r\n\t\tThread refreshThread = new Thread()\r\n\t\t{\r\n\t\t\tpublic void run()\r\n\t\t\t{\r\n\t\t\t\tFile parent  = new File(location);\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tfindSubFiles(parent, parentId, true);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (IOException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\texit(window);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tString locations[] = treeItemLocations.values().toArray(new String[0]);\r\n\t\t\t\t\r\n\t\t\t\tif (!ignoreRemove)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (int i = 0; i < locations.length; i ++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFile file = new File(locations[i]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (!file.exists())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfinal int id = treeItemIds.get(locations[i]);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\ttreeItemIds.remove(locations[i]);\r\n\t\t\t\t\t\t\ttreeItemLocations.remove(id);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (treeMenu.containsItem(id))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ttreeMenu.removeItem(id);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ttreeMenu.alphabetize();\r\n\t\t\t\t\r\n\t\t\t\tfileViewerThreads.remove(this);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tfileViewerThreads.add(refreshThread);\r\n\t\t\r\n\t\trefreshThread.start();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Finds the sub-files of a directory and if they have not been\r\n\t * added, add them to the TreeMenu.\r\n\t * \r\n\t * @param file The directory to search sub-files for.\r\n\t * @param parent The id of the directory TreeMenu item.\r\n\t * @throws IOException \r\n\t */\r\n\tprivate void findSubFiles(File file, final int parent, boolean ignoreRemove) throws IOException\r\n\t{\r\n\t\tif (exiting)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tFile subFiles[] = file.listFiles();\r\n\t\t\r\n\t\tif (subFiles != null)\r\n\t\t{\r\n\t\t\tfor (int i = 0; i < subFiles.length; i ++)\r\n\t\t\t{\r\n\t\t\t\tboolean isDirectory = subFiles[i].isDirectory();\r\n\t\t\t\t\r\n\t\t\t\tfinal String orig          = subFiles[i].getCanonicalPath().replace('\\\\', '/');\r\n\t\t\t\tfinal String name          = FileUtils.getFileName(orig);\r\n\t\t\t\t\r\n\t\t\t\tif (name.charAt(0) == '.')\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n//\t\t\t\tString location      = orig;//orig.toLowerCase();\r\n\t\t\t\t\r\n\t\t\t\tint id               = 0;\r\n\t\t\t\t\r\n\t\t\t\tfinal Image img            = isDirectory ? folderImage : getFileImage(orig);\r\n\t\t\t\t\r\n\t\t\t\tboolean alreadyAdded = treeItemIds.containsKey(orig);\r\n\t\t\t\t\r\n\t\t\t\tif (!ignoreRemove)\r\n\t\t\t\t{\r\n\t\t\t\t\talreadyAdded = true;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (treeItemLocations.containsValue(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurId = treeItemIds.get(orig);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tid = curId;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (isDirectory)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfindSubFiles(subFiles[i], id, ignoreRemove);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Set text correctly of renamed files.\r\n\t\t\t\t\telse if (treeItemLocations.containsValue(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid = treeItemIds.get(orig);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttreeMenu.setTreeItemText(id, name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\talreadyAdded = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (!alreadyAdded)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (exiting)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurId = treeMenu.addItem(parent, name, img);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tid = curId;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (isDirectory)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfindSubFiles(subFiles[i], id, ignoreRemove);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttreeItemDirectories.put(id, orig);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (fileCacheSaved.containsKey(orig))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfileCacheSaved.put(orig, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\ttreeItemLocations.put(id, orig);\r\n\t\t\t\t\ttreeItemIds.put(orig, id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that occurs whenever the content\r\n\t * of a TextField is changed. In this case it tells you that\r\n\t * the current file has been changed and needs to be saved.\r\n\t */\r\n\tpublic void contentChanged(ContentEvent event)\r\n\t{\r\n\t\tObject source = event.getSource();\r\n\t\t\r\n\t\tif (source == codeField)\r\n\t\t{\r\n\t\t\tif (fileLocation != null)\r\n\t\t\t{\r\n\t\t\t\tsetFileSaved(fileLocation, false);\r\n\t\t\t\t\r\n\t\t\t\tfinal String code = codeField.getText();\r\n\t\t\t\t\r\n\t\t\t\tnew Thread()\r\n\t\t\t\t{\r\n\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcodeField.clearErrors();\r\n\t\t\t\t\t\tfinal String outputLocation = FileUtils.getParentFolder(fileLocation) + ""/"";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tDISPLAY.syncExec(new Runnable()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpublic void run()\r\n\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\ttry\r\n//\t\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\t\tconsoleField.setText("""");\r\n//\t\t\t\t\t\t\t\t\t\r\n//\t\t\t\t\t\t\t\t\tLanguage.compile(fileLocation, codeField.getRawText(), outputLocation, consoleStream);\r\n//\t\t\t\t\t\t\t\t}\r\n//\t\t\t\t\t\t\t\tcatch (UnsupportedOperationException e)\r\n//\t\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\t\tconsoleStream.println(e.getMessage());\r\n//\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n//\t\t\t\t\t\tLanguage.compile(fileLocation, code, outputLocation, null);\r\n\t\t\t\t\t}\r\n\t\t\t\t}.start();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Return the Image associated with the type of file given through\r\n\t * the location parameter.\r\n\t * \r\n\t * @param location The location of the file.\r\n\t * @return The Image associated with the file.\r\n\t */\r\n\tprivate Image getFileImage(String location)\r\n\t{\r\n\t\tImage img = null;\r\n\t\t\r\n\t\tint fileType = FileUtils.getFileType(location);\r\n\t\t\r\n\t\tif (fileType == FileUtils.JAVA)\r\n\t\t{\r\n\t\t\timg = javaFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.CLASS)\r\n\t\t{\r\n\t\t\timg = classFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.GLSL)\r\n\t\t{\r\n\t\t\timg = glslFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.TXT)\r\n\t\t{\r\n\t\t\timg = txtFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.RTF)\r\n\t\t{\r\n\t\t\timg = rtfFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.EXE)\r\n\t\t{\r\n\t\t\timg = exeFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.ASSEMBLY)\r\n\t\t{\r\n\t\t\timg = asmFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.CPP)\r\n\t\t{\r\n\t\t\timg = cppFileImage;\r\n\t\t}\r\n\t\telse if (fileType == FileUtils.H)\r\n\t\t{\r\n\t\t\timg = hFileImage;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\timg = fileImage;\r\n\t\t}\r\n\t\t\r\n\t\treturn img;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks whether the text returned from the codeField is null, or\r\n\t * if it is an empty String.\r\n\t * \r\n\t * @return Whether the codeField is empty.\r\n\t */\r\n\tpublic boolean isCodeFieldEmpty()\r\n\t{\r\n\t\tString text = codeField.getText();\r\n\t\t\r\n\t\treturn text == null || text.equals("""");\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set the tab and TreeMenu item associated with the file\r\n\t * location to start with a '*' depending if the file is\r\n\t * saved or not.\r\n\t * \r\n\t * @param location The location of the file to set as saved or not.\r\n\t * @param saved Whether the file is saved or not.\r\n\t */\r\n\tpublic void setFileSaved(String location, boolean saved)\r\n\t{\r\n\t\tString locKey\t= location;\r\n\t\t\r\n\t\tString text\t\t= null;\r\n\t\t\r\n\t\tint id\t\t\t= 0;\r\n\t\t\r\n\t\tif (saved)\r\n\t\t{\r\n\t\t\tif (treeItemIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tid = treeItemIds.get(locKey);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (tabFileIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tint tabId\t= tabFileIds.get(locKey);\r\n\t\t\t\t\r\n\t\t\t\ttext\t\t= fileTabs.getTabText(tabId);\r\n\t\t\t}\r\n\t\t\telse if (treeItemLocations.containsValue(locKey))\r\n\t\t\t{\r\n\t\t\t\ttext = treeMenu.getTreeItemText(id);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (text != null && text.startsWith(""*""))\r\n\t\t\t{\r\n\t\t\t\ttext = text.substring(1);\r\n\t\t\t\r\n\t\t\t\tif (treeItemLocations.containsValue(locKey))\r\n\t\t\t\t{\r\n\t\t\t\t\ttreeMenu.setTreeItemText(id, text);\r\n\t\t\t\t}\r\n\t\t\t\tif (tabFileIds.containsKey(locKey))\r\n\t\t\t\t{\r\n\t\t\t\t\tfileTabs.setTabText(tabFileIds.get(locKey), text);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileCacheSaved.put(locKey, true);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tint tabId = tabFileIds.get(locKey);\r\n\t\t\t\r\n\t\t\ttext = fileTabs.getTabText(tabId);\r\n\t\t\t\r\n\t\t\tif (!text.startsWith(""*""))\r\n\t\t\t{\r\n\t\t\t\ttext = ""*"" + text;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (treeItemIds.containsKey(locKey))\r\n\t\t\t{\r\n\t\t\t\tid = treeItemIds.get(locKey);\r\n\t\t\t\ttreeMenu.setTreeItemText(id, text);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfileTabs.setTabText(tabId, text);\r\n\t\t\t\r\n\t\t\tfileCacheSaved.put(locKey, false);\r\n\t\t\t\r\n\t\t\tString fileContents = codeField.getText();\r\n\t\t\t\r\n\t\t\tfileCache.put(locKey, fileContents);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to remove all of the TreeMenu items and clear the\r\n\t * HashMaps.\r\n\t */\r\n\tpublic void removeAllTreeItems()\r\n\t{\r\n\t\ttreeMenu.removeAllItems();\r\n\t\t\r\n\t\ttreeItemLocations.clear();\r\n\t\ttreeItemIds.clear();\r\n\t\ttreeItemDirectories.clear();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add a tab of the file at fileLocation to the TabMenu.\r\n\t * \r\n\t * @param fileLocation The location of the file to represent.\r\n\t */\r\n\tprivate void addTab(String fileLocation)\r\n\t{\r\n\t\taddTab(fileLocation, true);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to add a tab at the specified location.\r\n\t * \r\n\t * @param fileLocation The location of the file that was opened.\r\n\t * @param cache Whether or not to save the tab for later use after\r\n\t * \t\trestart.\r\n\t */\r\n\tprivate void addTab(String fileLocation, boolean cache)\r\n\t{\r\n\t\tString fileName = FileUtils.getFileName(fileLocation);\r\n\t\t\r\n\t\taddTab(fileName, fileLocation, cache);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add a tab of the file with the fileName and location to the TabMenu.\r\n\t * \r\n\t * @param fileName The name of the file to represent.\r\n\t * @param location The location, including the fileName, of the file.\r\n\t */\r\n\tprivate void addTab(String fileName, String location)\r\n\t{\r\n\t\taddTab(fileName, location, true);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to add a tab at the specified location with the tab labeled\r\n\t * with the fileName param.\r\n\t * \r\n\t * @param fileName The String to label the tab with.\r\n\t * @param location The location of the file that was opened.\r\n\t * @param cache Whether or not to save the tab for later use after\r\n\t * \t\trestart.\r\n\t */\r\n\tprivate void addTab(String fileName, final String location, boolean cache)\r\n\t{\r\n\t\tint id = fileTabs.addTab(fileName);\r\n\t\t\r\n\t\tif (oldTabId == 0)\r\n\t\t{\r\n\t\t\toldTabId = id;\r\n\t\t}\r\n\t\t\r\n\t\ttabTopPixels.put(id, 0);\r\n\t\ttabSelection.put(id, new Point(0, 0));\r\n\t\t\r\n\t\ttabFileLocations.put(id, location);\r\n\t\ttabFileIds.put(location, id);\r\n\t\t\r\n\t\tif (cache)\r\n\t\t{\r\n\t\t\tnew Thread()\r\n\t\t\t{\r\n\t\t\t\tpublic void run()\r\n\t\t\t\t{\r\n\t\t\t\t\tappendConfigDataValue(""last.tabs"", location + "";"");\r\n\t\t\t\t}\r\n\t\t\t}.start();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a tab's close icon\r\n\t * is pressed. If the file in the tab is not saved, ask whether to\r\n\t * save it or not.\r\n\t * \r\n\t * @param event The TabMenuEvent sent with the tab close.\r\n\t * @return Whether to close the tab or not.\r\n\t */\r\n\tpublic boolean tabClosing(TabMenuEvent event)\r\n\t{\r\n\t\tint tabId       = event.getTabId();\r\n\t\t\r\n\t\tboolean cancel = false;\r\n\t\t\r\n\t\tif (event.getSource() == fileTabs)\r\n\t\t{\r\n\t\t\tint newId\t\t= fileTabs.getSelected();\r\n\t\t\t\r\n\t\t\tString location = tabFileLocations.get(tabId);\r\n\t\t\tString result\t= null;\r\n\t\r\n\t\t\tboolean askSave\t= false;\r\n\t\t\t\r\n\t\t\tif (fileCacheSaved.containsKey(location))\r\n\t\t\t{\r\n\t\t\t\tif (!fileCacheSaved.get(location))\r\n\t\t\t\t{\r\n\t\t\t\t\taskSave = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif (!isCodeFieldEmpty())\r\n\t\t\t\t{\r\n\t\t\t\t\taskSave = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (askSave)\r\n\t\t\t{\r\n\t\t\t\tOptionDialog saveDialog = new OptionDialog(""Save?"", ""\\"""" + FileUtils.getFileName(location) + ""\\"" has not been saved, would you like to save it?"");\r\n\t\t\t\t\r\n\t\t\t\tresult = saveDialog.open();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!askSave || (result != null && (result.equals(""yes"") || result.equals(""no""))))\r\n\t\t\t{\r\n\t\t\t\tString files = CONFIG_DATA.get(""last.tabs"").replace((tabFileLocations.get(tabId) + ';'), """");\r\n\t\t\t\tsetConfigDataValue(""last.tabs"", files);\r\n\t\t\t\t\r\n\t\t\t\ttabFileLocations.remove(tabId);\r\n\t\t\t\ttabFileIds.remove(location);\r\n\t\t\t\ttabTopPixels.remove(tabId);\r\n\t\t\t\ttabSelection.remove(tabId);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (result != null)\r\n\t\t\t{\r\n\t\t\t\tif (result.equals(""yes""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsaveFile(location);\r\n\t\t\t\t}\r\n\t\t\t\telse if (result.equals(""no""))\r\n\t\t\t\t{\r\n\t\t\t\t\tsetFileSaved(location, true);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tcancel = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcancel = askSave;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (cancel)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfileCache.remove(location);\r\n\t\t\t\tfileCacheSaved.remove(location);\r\n\t\t\t\t\r\n\t\t\t\tif (tabId == oldTabId)\r\n\t\t\t\t{\r\n\t\t\t\t\toldTabId = newId;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (tabId != newId)\r\n\t\t\t\t{\r\n\t\t\t\t\tString loc = tabFileLocations.get(newId);\r\n\t\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\topenFile(loc);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfileLocation = null;\r\n\t\t\t\t\tcodeField.setText("""");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (event.getSource() == consoleTabs)\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn !cancel;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a tab is selected\r\n\t * in a TabMenu. It then opens the file.\r\n\t * \r\n\t * @param event The TabMenuEvent sent with the tab select.\r\n\t */\r\n\tpublic void tabSelected(TabMenuEvent event)\r\n\t{\r\n\t\tint tabId = event.getTabId();\r\n\t\t\r\n\t\tif (event.getSource() == fileTabs)\r\n\t\t{\r\n\t\t\tString location = tabFileLocations.get(tabId);\r\n\t\t\t\r\n\t\t\tif (location.equals(fileLocation))\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (location != null)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\topenFile(location);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (FileNotFoundException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tcodeField.setSelection(tabSelection.get(tabId));\r\n\t\t\t\tcodeField.setTopPixel(tabTopPixels.get(tabId));\r\n\t\t\t\tcodeField.select();\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (event.getSource() == consoleTabs)\r\n\t\t{\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Implemented method that is called whenever a key is pressed\r\n\t * in a TextField.\r\n\t * \r\n\t * @param e The CodeFieldEvent that was passed.\r\n\t */\r\n\tpublic void keyPressed(CodeFieldEvent e)\r\n\t{\r\n\t\tif (e.getSource() == codeField)\r\n\t\t{\r\n\t\t\tif (e.getStateMask() == (Integer)PROPERTIES.get(""key.control"") && e.getKeyCode() == 's')\r\n\t\t\t{\r\n\t\t\t\tsaveFile(fileLocation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method that deletes the file at the specified location.\r\n\t * \r\n\t * @param location The location of the file to be deleted.\r\n\t * @return Whether the file was successfully deleted or not.\r\n\t */\r\n\tpublic boolean deleteFile(String location)\r\n\t{\r\n\t\tint treeId    = treeItemIds.get(location);\r\n\t\t\r\n\t\ttreeItemLocations.remove(treeId);\r\n\t\ttreeItemDirectories.remove(treeId);\r\n\t\tfileCache.remove(location);\r\n\t\tfileCacheSaved.remove(location);\r\n\t\t\r\n\t\ttreeMenu.removeItem(treeId);\r\n\t\t\r\n\t\tboolean deleted = FileUtils.delete(new File(location));\r\n\t\t\r\n\t\treturn deleted;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Method to synchronistically update the components of the main\r\n\t * window.\r\n\t */\r\n\tpublic void update()\r\n\t{\r\n\t\t\r\n\t}\r\n}\r\n----------------------------------- SOURCE END -------------------------------------",1364132440992
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1364132440993
error,log,,,"Error in JDT Core during AST creation",1364132440993
executed,command,org.eclipse.ui,3.7.0.v20110928-1505,"org.eclipse.ui.edit.delete",1364132441028
