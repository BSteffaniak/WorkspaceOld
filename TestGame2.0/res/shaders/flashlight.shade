#version 120

varying vec4  fragScreenPos;
varying vec4  fragWorldPos;

uniform vec3  camPos;
uniform vec3  flashlightPos;

vec3 origColor;

vec3 upToOriginal(vec3, vec3);

vec3 flashlight(vec3 origColor)
{
	vec3 amb        = gl_LightModel.ambient.rgb;
	vec3 finalColor = origColor * amb;

	vec3 lightCol = vec3(0.6f, 0.6f, 0.6f);

	float dist = 0;

	/*
	 * Calculates the distance that the light shows for.
	 */
	dist = sqrt(((flashlightPos.x - fragWorldPos.x) * (flashlightPos.x - fragWorldPos.x)) +
				((flashlightPos.y - fragWorldPos.y) * (flashlightPos.y - fragWorldPos.y)) +
				((flashlightPos.z - fragWorldPos.z) * (flashlightPos.z - fragWorldPos.z)));

	float radius      = 3;
	float largeRadius = radius + (radius * 1);
	float radDist     = sqrt((fragScreenPos.x * fragScreenPos.x) + (fragScreenPos.y * fragScreenPos.y));

//	radius  = 0.1f + dist;
//	radius = 

	float fragDist = radDist;
	
	dist = dist;
	
	float radAffect = (dist / 20);

	if (fragDist <= radius + radAffect)
	{
//		lightCol.r = lightCol.r < 0 ? 0 : lightCol.r;
//		lightCol.g = lightCol.g < 0 ? 0 : lightCol.g;
//		lightCol.b = lightCol.b < 0 ? 0 : lightCol.b;

		vec3 litColor = finalColor;

//		litColor = origColor * (lightCol * 0.1f);

		if (fragDist <= radius + radAffect)
		{
			float num = radius + radAffect - (radDist * 1);
			
			if (num > 1)
			{
				num = 1;
			}
			
			lightCol.rgb = lightCol.rgb * num;

			litColor = origColor * lightCol;
			
//			litColor = upToOriginal(origColor, lightCol);
		}
		else
		{
			if (lightCol.r < amb.r || lightCol.g < amb.g || lightCol.b < amb.b)
			{
//				lightCol.rgb *= min(1, largeRadius - (radDist * 1));

				litColor = origColor * (lightCol * 0.5f);
			}
			
			litColor = finalColor;
		}

		litColor.r = lightCol.r < amb.r ? finalColor.r : litColor.r;
		litColor.g = lightCol.g < amb.g ? finalColor.g : litColor.g;
		litColor.b = lightCol.b < amb.b ? finalColor.b : litColor.b;
		

		finalColor = litColor;
	}
	
	return finalColor;
}

vec3 upToOriginal(vec3 oldColor, vec3 newColor)
{
	vec3 addedColor = vec3(1, 1, 1);
	
	addedColor.r = oldColor.r * newColor.r > origColor.r ? origColor.r : oldColor.r * newColor.r;
	addedColor.g = oldColor.g * newColor.g > origColor.g ? origColor.g : oldColor.g * newColor.g;
	addedColor.b = oldColor.b * newColor.b > origColor.b ? origColor.b : oldColor.b * newColor.b;
	
	return addedColor;
}